{"ast":null,"code":"/**\n * @typedef {[string, number]} TrigramTuple\n * @typedef {TrigramTuple[]} TrigramTuples\n * @typedef {Record<string, number>} TrigramDictionary\n */\n\nimport { trigram } from 'n-gram';\nimport { collapseWhiteSpace } from 'collapse-white-space';\nconst own = {}.hasOwnProperty;\n\n/**\n * Clean `value`.\n * Removed general non-important (as in, for language detection) punctuation\n * marks, symbols, and digits.\n *\n * @param {string|null} [value]\n * @returns {string}\n */\nexport function clean(value) {\n  if (value === null || value === undefined) {\n    return '';\n  }\n  return collapseWhiteSpace(String(value).replace(/[\\u0021-\\u0040]+/g, ' ')).trim().toLowerCase();\n}\n\n/**\n * Get clean, padded, trigrams.\n *\n * @param {string} [value]\n * @returns {string[]}\n */\nexport function trigrams(value) {\n  return trigram(' ' + clean(value) + ' ');\n}\n\n/**\n * Get an `Object` with trigrams as its attributes, and their occurence count as\n * their values.\n *\n * @param {string} value\n * @returns {TrigramDictionary}\n */\nexport function asDictionary(value) {\n  const values = trigrams(value);\n  /** @type {TrigramDictionary} */\n  const dictionary = {};\n  let index = -1;\n  while (++index < values.length) {\n    if (own.call(dictionary, values[index])) {\n      dictionary[values[index]]++;\n    } else {\n      dictionary[values[index]] = 1;\n    }\n  }\n  return dictionary;\n}\n\n/**\n * Get an `Array` containing trigram--count tuples from a given value.\n *\n * @param {string} value\n * @returns {TrigramTuples}\n */\nexport function asTuples(value) {\n  const dictionary = asDictionary(value);\n  /** @type {TrigramTuples} */\n  const tuples = [];\n  /** @type {string} */\n  let trigram;\n  for (trigram in dictionary) {\n    if (own.call(dictionary, trigram)) {\n      tuples.push([trigram, dictionary[trigram]]);\n    }\n  }\n  tuples.sort(sort);\n  return tuples;\n}\n\n/**\n * Get an `Array` containing trigram--count tuples from a given value.\n *\n * @param {TrigramTuples} tuples\n * @returns {TrigramDictionary}\n */\nexport function tuplesAsDictionary(tuples) {\n  /** @type {TrigramDictionary} */\n  const dictionary = {};\n  let index = -1;\n  while (++index < tuples.length) {\n    dictionary[tuples[index][0]] = tuples[index][1];\n  }\n  return dictionary;\n}\n\n/**\n * Deep regular sort on item at `1` in both `Object`s.\n *\n * @param {TrigramTuple} a\n * @param {TrigramTuple} b\n * @returns {number}\n */\nfunction sort(a, b) {\n  return a[1] - b[1];\n}","map":{"version":3,"names":["trigram","collapseWhiteSpace","own","hasOwnProperty","clean","value","undefined","String","replace","trim","toLowerCase","trigrams","asDictionary","values","dictionary","index","length","call","asTuples","tuples","push","sort","tuplesAsDictionary","a","b"],"sources":["C:/Users/swths/OneDrive/Documents/youtube-transcriber/youtube-transcriber/client/node_modules/trigram-utils/index.js"],"sourcesContent":["/**\n * @typedef {[string, number]} TrigramTuple\n * @typedef {TrigramTuple[]} TrigramTuples\n * @typedef {Record<string, number>} TrigramDictionary\n */\n\nimport {trigram} from 'n-gram'\nimport {collapseWhiteSpace} from 'collapse-white-space'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Clean `value`.\n * Removed general non-important (as in, for language detection) punctuation\n * marks, symbols, and digits.\n *\n * @param {string|null} [value]\n * @returns {string}\n */\nexport function clean(value) {\n  if (value === null || value === undefined) {\n    return ''\n  }\n\n  return collapseWhiteSpace(String(value).replace(/[\\u0021-\\u0040]+/g, ' '))\n    .trim()\n    .toLowerCase()\n}\n\n/**\n * Get clean, padded, trigrams.\n *\n * @param {string} [value]\n * @returns {string[]}\n */\nexport function trigrams(value) {\n  return trigram(' ' + clean(value) + ' ')\n}\n\n/**\n * Get an `Object` with trigrams as its attributes, and their occurence count as\n * their values.\n *\n * @param {string} value\n * @returns {TrigramDictionary}\n */\nexport function asDictionary(value) {\n  const values = trigrams(value)\n  /** @type {TrigramDictionary} */\n  const dictionary = {}\n  let index = -1\n\n  while (++index < values.length) {\n    if (own.call(dictionary, values[index])) {\n      dictionary[values[index]]++\n    } else {\n      dictionary[values[index]] = 1\n    }\n  }\n\n  return dictionary\n}\n\n/**\n * Get an `Array` containing trigram--count tuples from a given value.\n *\n * @param {string} value\n * @returns {TrigramTuples}\n */\nexport function asTuples(value) {\n  const dictionary = asDictionary(value)\n  /** @type {TrigramTuples} */\n  const tuples = []\n  /** @type {string} */\n  let trigram\n\n  for (trigram in dictionary) {\n    if (own.call(dictionary, trigram)) {\n      tuples.push([trigram, dictionary[trigram]])\n    }\n  }\n\n  tuples.sort(sort)\n\n  return tuples\n}\n\n/**\n * Get an `Array` containing trigram--count tuples from a given value.\n *\n * @param {TrigramTuples} tuples\n * @returns {TrigramDictionary}\n */\nexport function tuplesAsDictionary(tuples) {\n  /** @type {TrigramDictionary} */\n  const dictionary = {}\n  let index = -1\n\n  while (++index < tuples.length) {\n    dictionary[tuples[index][0]] = tuples[index][1]\n  }\n\n  return dictionary\n}\n\n/**\n * Deep regular sort on item at `1` in both `Object`s.\n *\n * @param {TrigramTuple} a\n * @param {TrigramTuple} b\n * @returns {number}\n */\nfunction sort(a, b) {\n  return a[1] - b[1]\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,OAAO,QAAO,QAAQ;AAC9B,SAAQC,kBAAkB,QAAO,sBAAsB;AAEvD,MAAMC,GAAG,GAAG,CAAC,CAAC,CAACC,cAAc;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,KAAKA,CAACC,KAAK,EAAE;EAC3B,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKC,SAAS,EAAE;IACzC,OAAO,EAAE;EACX;EAEA,OAAOL,kBAAkB,CAACM,MAAM,CAACF,KAAK,CAAC,CAACG,OAAO,CAAC,mBAAmB,EAAE,GAAG,CAAC,CAAC,CACvEC,IAAI,CAAC,CAAC,CACNC,WAAW,CAAC,CAAC;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAACN,KAAK,EAAE;EAC9B,OAAOL,OAAO,CAAC,GAAG,GAAGI,KAAK,CAACC,KAAK,CAAC,GAAG,GAAG,CAAC;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,YAAYA,CAACP,KAAK,EAAE;EAClC,MAAMQ,MAAM,GAAGF,QAAQ,CAACN,KAAK,CAAC;EAC9B;EACA,MAAMS,UAAU,GAAG,CAAC,CAAC;EACrB,IAAIC,KAAK,GAAG,CAAC,CAAC;EAEd,OAAO,EAAEA,KAAK,GAAGF,MAAM,CAACG,MAAM,EAAE;IAC9B,IAAId,GAAG,CAACe,IAAI,CAACH,UAAU,EAAED,MAAM,CAACE,KAAK,CAAC,CAAC,EAAE;MACvCD,UAAU,CAACD,MAAM,CAACE,KAAK,CAAC,CAAC,EAAE;IAC7B,CAAC,MAAM;MACLD,UAAU,CAACD,MAAM,CAACE,KAAK,CAAC,CAAC,GAAG,CAAC;IAC/B;EACF;EAEA,OAAOD,UAAU;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,QAAQA,CAACb,KAAK,EAAE;EAC9B,MAAMS,UAAU,GAAGF,YAAY,CAACP,KAAK,CAAC;EACtC;EACA,MAAMc,MAAM,GAAG,EAAE;EACjB;EACA,IAAInB,OAAO;EAEX,KAAKA,OAAO,IAAIc,UAAU,EAAE;IAC1B,IAAIZ,GAAG,CAACe,IAAI,CAACH,UAAU,EAAEd,OAAO,CAAC,EAAE;MACjCmB,MAAM,CAACC,IAAI,CAAC,CAACpB,OAAO,EAAEc,UAAU,CAACd,OAAO,CAAC,CAAC,CAAC;IAC7C;EACF;EAEAmB,MAAM,CAACE,IAAI,CAACA,IAAI,CAAC;EAEjB,OAAOF,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,kBAAkBA,CAACH,MAAM,EAAE;EACzC;EACA,MAAML,UAAU,GAAG,CAAC,CAAC;EACrB,IAAIC,KAAK,GAAG,CAAC,CAAC;EAEd,OAAO,EAAEA,KAAK,GAAGI,MAAM,CAACH,MAAM,EAAE;IAC9BF,UAAU,CAACK,MAAM,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGI,MAAM,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;EACjD;EAEA,OAAOD,UAAU;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,IAAIA,CAACE,CAAC,EAAEC,CAAC,EAAE;EAClB,OAAOD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}