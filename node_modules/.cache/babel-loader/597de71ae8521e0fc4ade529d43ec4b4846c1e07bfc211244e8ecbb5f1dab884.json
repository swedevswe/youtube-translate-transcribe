{"ast":null,"code":"import React,{useState}from'react';import axios from'axios';import{PayPalButtons,PayPalScriptProvider}from'@paypal/react-paypal-js';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TranscriptForm=()=>{const[url,setUrl]=useState('');const[message,setMessage]=useState('');const[transcript,setTranscript]=useState('');const[isPaymentReady,setIsPaymentReady]=useState(false);const[loading,setLoading]=useState(false);const[isNonEnglish,setIsNonEnglish]=useState(false);const[translate,setTranslate]=useState(false);const handleUrlChange=e=>{setUrl(e.target.value);};const handleTranslateChange=e=>{setTranslate(e.target.checked);};const handleSubmit=async e=>{e.preventDefault();setMessage('Processing...');setLoading(true);setIsNonEnglish(false);try{const videoId=extractVideoId(url);const audioBuffer=await fetchAudioStream(videoId);const formData=new FormData();formData.append('audio',new Blob([audioBuffer],{type:'audio/webm'}));const response=await axios.post('http://localhost:5000/api/transcribe',formData,{headers:{'Content-Type':'multipart/form-data'}});const generatedTranscript=response.data.transcript;const language=detectLanguage(generatedTranscript);if(language!=='en'){setIsNonEnglish(true);setMessage('Transcript available. This video is in a non-English language. You can get the transcript in the original language or translated to English for an extra fee.');}else{setMessage('Transcript available. Please make the payment to download.');}setTranscript(generatedTranscript);setIsPaymentReady(true);}catch(error){setMessage(error.message);console.error('Error during processing:',error);}finally{setLoading(false);}};const extractVideoId=url=>{const urlObj=new URL(url);const videoId=urlObj.searchParams.get('v')||urlObj.pathname.split('/').pop();if(!videoId){throw new Error('Invalid YouTube URL');}return videoId;};const fetchAudioStream=async videoId=>{const response=await axios.get(\"http://localhost:5000/api/get-audio-stream?videoId=\".concat(videoId),{responseType:'arraybuffer'});const audioContext=new(window.AudioContext||window.webkitAudioContext)();return await audioContext.decodeAudioData(response.data);};const detectLanguage=text=>{// Placeholder implementation for demo purposes\nreturn'en';};const translateTranscript=async text=>{const response=await axios.post('http://localhost:5000/api/translate',{text});return response.data.translatedText;};const handlePaymentSuccess=async()=>{if(isNonEnglish&&translate){try{const translatedTranscript=await translateTranscript(transcript);setTranscript(translatedTranscript);}catch(error){setMessage('Error translating transcript');return;}}setMessage('Payment successful. Download your transcript below.');setIsPaymentReady(false);localStorage.setItem('transcript',transcript);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"YouTube Transcriber\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"YouTube URL:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:url,onChange:handleUrlChange,required:true})]}),isNonEnglish&&/*#__PURE__*/_jsxs(\"label\",{children:[\"Translate to English:\",/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:translate,onChange:handleTranslateChange})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:loading,children:loading?'Processing...':'Get Transcript'})]}),message&&/*#__PURE__*/_jsx(\"p\",{children:message}),isPaymentReady&&/*#__PURE__*/_jsx(PayPalScriptProvider,{options:{\"client-id\":\"YOUR_PAYPAL_CLIENT_ID\"},children:/*#__PURE__*/_jsx(PayPalButtons,{style:{layout:'vertical'},createOrder:(data,actions)=>{const amount=isNonEnglish?\"7.00\":\"5.00\";return actions.order.create({purchase_units:[{amount:{value:amount}}]});},onApprove:(data,actions)=>{return actions.order.capture().then(handlePaymentSuccess);}})}),transcript&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:transcript}),/*#__PURE__*/_jsx(\"a\",{href:\"data:text/plain;charset=utf-8,\".concat(encodeURIComponent(transcript)),download:\"transcript.txt\",children:\"Download Transcript\"})]})]});};export default TranscriptForm;","map":{"version":3,"names":["React","useState","axios","PayPalButtons","PayPalScriptProvider","jsx","_jsx","jsxs","_jsxs","TranscriptForm","url","setUrl","message","setMessage","transcript","setTranscript","isPaymentReady","setIsPaymentReady","loading","setLoading","isNonEnglish","setIsNonEnglish","translate","setTranslate","handleUrlChange","e","target","value","handleTranslateChange","checked","handleSubmit","preventDefault","videoId","extractVideoId","audioBuffer","fetchAudioStream","formData","FormData","append","Blob","type","response","post","headers","generatedTranscript","data","language","detectLanguage","error","console","urlObj","URL","searchParams","get","pathname","split","pop","Error","concat","responseType","audioContext","window","AudioContext","webkitAudioContext","decodeAudioData","text","translateTranscript","translatedText","handlePaymentSuccess","translatedTranscript","localStorage","setItem","children","onSubmit","onChange","required","disabled","options","style","layout","createOrder","actions","amount","order","create","purchase_units","onApprove","capture","then","href","encodeURIComponent","download"],"sources":["C:/Users/swths/OneDrive/Documents/youtube-transcriber/youtube-transcriber/client/src/components/TranscriptForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';\r\n\r\nconst TranscriptForm = () => {\r\n    const [url, setUrl] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [transcript, setTranscript] = useState('');\r\n    const [isPaymentReady, setIsPaymentReady] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [isNonEnglish, setIsNonEnglish] = useState(false);\r\n    const [translate, setTranslate] = useState(false);\r\n\r\n    const handleUrlChange = (e) => {\r\n        setUrl(e.target.value);\r\n    };\r\n\r\n    const handleTranslateChange = (e) => {\r\n        setTranslate(e.target.checked);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setMessage('Processing...');\r\n        setLoading(true);\r\n        setIsNonEnglish(false);\r\n\r\n        try {\r\n            const videoId = extractVideoId(url);\r\n            const audioBuffer = await fetchAudioStream(videoId);\r\n            const formData = new FormData();\r\n            formData.append('audio', new Blob([audioBuffer], { type: 'audio/webm' }));\r\n\r\n            const response = await axios.post('http://localhost:5000/api/transcribe', formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            });\r\n\r\n            const generatedTranscript = response.data.transcript;\r\n\r\n            const language = detectLanguage(generatedTranscript);\r\n\r\n            if (language !== 'en') {\r\n                setIsNonEnglish(true);\r\n                setMessage('Transcript available. This video is in a non-English language. You can get the transcript in the original language or translated to English for an extra fee.');\r\n            } else {\r\n                setMessage('Transcript available. Please make the payment to download.');\r\n            }\r\n\r\n            setTranscript(generatedTranscript);\r\n            setIsPaymentReady(true);\r\n        } catch (error) {\r\n            setMessage(error.message);\r\n            console.error('Error during processing:', error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const extractVideoId = (url) => {\r\n        const urlObj = new URL(url);\r\n        const videoId = urlObj.searchParams.get('v') || urlObj.pathname.split('/').pop();\r\n        if (!videoId) {\r\n            throw new Error('Invalid YouTube URL');\r\n        }\r\n        return videoId;\r\n    };\r\n\r\n    const fetchAudioStream = async (videoId) => {\r\n        const response = await axios.get(`http://localhost:5000/api/get-audio-stream?videoId=${videoId}`, { responseType: 'arraybuffer' });\r\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n        return await audioContext.decodeAudioData(response.data);\r\n    };\r\n\r\n    const detectLanguage = (text) => {\r\n        // Placeholder implementation for demo purposes\r\n        return 'en';\r\n    };\r\n\r\n    const translateTranscript = async (text) => {\r\n        const response = await axios.post('http://localhost:5000/api/translate', { text });\r\n        return response.data.translatedText;\r\n    };\r\n\r\n    const handlePaymentSuccess = async () => {\r\n        if (isNonEnglish && translate) {\r\n            try {\r\n                const translatedTranscript = await translateTranscript(transcript);\r\n                setTranscript(translatedTranscript);\r\n            } catch (error) {\r\n                setMessage('Error translating transcript');\r\n                return;\r\n            }\r\n        }\r\n        setMessage('Payment successful. Download your transcript below.');\r\n        setIsPaymentReady(false);\r\n        localStorage.setItem('transcript', transcript);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>YouTube Transcriber</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    YouTube URL:\r\n                    <input type=\"text\" value={url} onChange={handleUrlChange} required />\r\n                </label>\r\n                {isNonEnglish && (\r\n                    <label>\r\n                        Translate to English:\r\n                        <input type=\"checkbox\" checked={translate} onChange={handleTranslateChange} />\r\n                    </label>\r\n                )}\r\n                <button type=\"submit\" disabled={loading}>\r\n                    {loading ? 'Processing...' : 'Get Transcript'}\r\n                </button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n            {isPaymentReady && (\r\n                <PayPalScriptProvider options={{ \"client-id\": \"YOUR_PAYPAL_CLIENT_ID\" }}>\r\n                    <PayPalButtons\r\n                        style={{ layout: 'vertical' }}\r\n                        createOrder={(data, actions) => {\r\n                            const amount = isNonEnglish ? \"7.00\" : \"5.00\";\r\n                            return actions.order.create({\r\n                                purchase_units: [{\r\n                                    amount: { value: amount }\r\n                                }]\r\n                            });\r\n                        }}\r\n                        onApprove={(data, actions) => {\r\n                            return actions.order.capture().then(handlePaymentSuccess);\r\n                        }}\r\n                    />\r\n                </PayPalScriptProvider>\r\n            )}\r\n            {transcript && (\r\n                <div>\r\n                    <p>{transcript}</p>\r\n                    <a\r\n                        href={`data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`}\r\n                        download=\"transcript.txt\"\r\n                    >\r\n                        Download Transcript\r\n                    </a>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TranscriptForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}