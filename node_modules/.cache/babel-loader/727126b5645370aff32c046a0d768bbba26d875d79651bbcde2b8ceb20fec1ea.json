{"ast":null,"code":"/**\n * @typedef {'html'|'js'} Style\n *\n * @typedef Options\n *   Configuration.\n * @property {Style} [style='js']\n *   Style of white space to support.\n * @property {boolean} [preserveLineEndings=false]\n *   Whether to collapse white space containing a line ending to that line\n *   ending.\n *   The default is to collapse to a single space.\n * @property {boolean} [trim=false]\n *   Whether to drop white space at the start and end of `value`.\n *   The default is to keep it.\n */\n\nconst js = /\\s+/g;\nconst html = /[\\t\\n\\v\\f\\r ]+/g;\n\n/**\n * Collapse white space.\n *\n * @param {string} value\n *   Value to collapse white space in.\n * @param {Style|Options} [options='js']\n *   Configuration.\n * @returns {string}\n *   Value with collapsed white space.\n */\nexport function collapseWhiteSpace(value, options) {\n  if (!options) {\n    options = {};\n  } else if (typeof options === 'string') {\n    options = {\n      style: options\n    };\n  }\n  const replace = options.preserveLineEndings ? replaceLineEnding : replaceSpace;\n  return String(value).replace(options.style === 'html' ? html : js, options.trim ? trimFactory(replace) : replace);\n}\n\n/**\n * Replace white space with a line ending as that line ending and otherwise a\n * space.\n *\n * @param {string} value\n * @returns {string}\n */\nfunction replaceLineEnding(value) {\n  const match = /\\r?\\n|\\r/.exec(value);\n  return match ? match[0] : ' ';\n}\n\n/**\n * Replace white space with a space.\n *\n * @returns {string}\n */\nfunction replaceSpace() {\n  return ' ';\n}\n\n/**\n * @param {(value: string) => string} replace\n */\nfunction trimFactory(replace) {\n  return dropOrReplace;\n\n  /**\n   * Replace white space with nothing if it starts or ends the string.\n   * Calls `replace` otherwise.\n   *\n   * @param {string} value\n   * @param {number} index\n   * @param {string} all\n   * @returns {string}\n   */\n  function dropOrReplace(value, index, all) {\n    return index === 0 || index + value.length === all.length ? '' : replace(value);\n  }\n}","map":{"version":3,"names":["js","html","collapseWhiteSpace","value","options","style","replace","preserveLineEndings","replaceLineEnding","replaceSpace","String","trim","trimFactory","match","exec","dropOrReplace","index","all","length"],"sources":["C:/Users/swths/OneDrive/Documents/youtube-transcriber/youtube-transcriber/client/node_modules/collapse-white-space/index.js"],"sourcesContent":["/**\n * @typedef {'html'|'js'} Style\n *\n * @typedef Options\n *   Configuration.\n * @property {Style} [style='js']\n *   Style of white space to support.\n * @property {boolean} [preserveLineEndings=false]\n *   Whether to collapse white space containing a line ending to that line\n *   ending.\n *   The default is to collapse to a single space.\n * @property {boolean} [trim=false]\n *   Whether to drop white space at the start and end of `value`.\n *   The default is to keep it.\n */\n\nconst js = /\\s+/g\nconst html = /[\\t\\n\\v\\f\\r ]+/g\n\n/**\n * Collapse white space.\n *\n * @param {string} value\n *   Value to collapse white space in.\n * @param {Style|Options} [options='js']\n *   Configuration.\n * @returns {string}\n *   Value with collapsed white space.\n */\nexport function collapseWhiteSpace(value, options) {\n  if (!options) {\n    options = {}\n  } else if (typeof options === 'string') {\n    options = {style: options}\n  }\n\n  const replace = options.preserveLineEndings ? replaceLineEnding : replaceSpace\n\n  return String(value).replace(\n    options.style === 'html' ? html : js,\n    options.trim ? trimFactory(replace) : replace\n  )\n}\n\n/**\n * Replace white space with a line ending as that line ending and otherwise a\n * space.\n *\n * @param {string} value\n * @returns {string}\n */\nfunction replaceLineEnding(value) {\n  const match = /\\r?\\n|\\r/.exec(value)\n  return match ? match[0] : ' '\n}\n\n/**\n * Replace white space with a space.\n *\n * @returns {string}\n */\nfunction replaceSpace() {\n  return ' '\n}\n\n/**\n * @param {(value: string) => string} replace\n */\nfunction trimFactory(replace) {\n  return dropOrReplace\n\n  /**\n   * Replace white space with nothing if it starts or ends the string.\n   * Calls `replace` otherwise.\n   *\n   * @param {string} value\n   * @param {number} index\n   * @param {string} all\n   * @returns {string}\n   */\n  function dropOrReplace(value, index, all) {\n    return index === 0 || index + value.length === all.length\n      ? ''\n      : replace(value)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,EAAE,GAAG,MAAM;AACjB,MAAMC,IAAI,GAAG,iBAAiB;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACC,KAAK,EAAEC,OAAO,EAAE;EACjD,IAAI,CAACA,OAAO,EAAE;IACZA,OAAO,GAAG,CAAC,CAAC;EACd,CAAC,MAAM,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IACtCA,OAAO,GAAG;MAACC,KAAK,EAAED;IAAO,CAAC;EAC5B;EAEA,MAAME,OAAO,GAAGF,OAAO,CAACG,mBAAmB,GAAGC,iBAAiB,GAAGC,YAAY;EAE9E,OAAOC,MAAM,CAACP,KAAK,CAAC,CAACG,OAAO,CAC1BF,OAAO,CAACC,KAAK,KAAK,MAAM,GAAGJ,IAAI,GAAGD,EAAE,EACpCI,OAAO,CAACO,IAAI,GAAGC,WAAW,CAACN,OAAO,CAAC,GAAGA,OACxC,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,iBAAiBA,CAACL,KAAK,EAAE;EAChC,MAAMU,KAAK,GAAG,UAAU,CAACC,IAAI,CAACX,KAAK,CAAC;EACpC,OAAOU,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASJ,YAAYA,CAAA,EAAG;EACtB,OAAO,GAAG;AACZ;;AAEA;AACA;AACA;AACA,SAASG,WAAWA,CAACN,OAAO,EAAE;EAC5B,OAAOS,aAAa;;EAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,aAAaA,CAACZ,KAAK,EAAEa,KAAK,EAAEC,GAAG,EAAE;IACxC,OAAOD,KAAK,KAAK,CAAC,IAAIA,KAAK,GAAGb,KAAK,CAACe,MAAM,KAAKD,GAAG,CAACC,MAAM,GACrD,EAAE,GACFZ,OAAO,CAACH,KAAK,CAAC;EACpB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}