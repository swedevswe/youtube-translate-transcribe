{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\swths\\\\OneDrive\\\\Documents\\\\youtube-transcriber\\\\youtube-transcriber\\\\client\\\\src\\\\components\\\\TranscriptForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TranscriptForm = () => {\n  _s();\n  const [url, setUrl] = useState('');\n  const [message, setMessage] = useState('');\n  const [transcript, setTranscript] = useState('');\n  const [isPaymentReady, setIsPaymentReady] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [isNonEnglish, setIsNonEnglish] = useState(false);\n  const [translate, setTranslate] = useState(false);\n  const handleUrlChange = e => {\n    setUrl(e.target.value);\n  };\n  const handleTranslateChange = e => {\n    setTranslate(e.target.checked);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setMessage('Processing...');\n    setLoading(true);\n    setIsNonEnglish(false);\n    try {\n      const videoId = extractVideoId(url);\n      const audioBuffer = await fetchAudioStream(videoId);\n      const formData = new FormData();\n      formData.append('audio', new Blob([audioBuffer], {\n        type: 'audio/webm'\n      }));\n      const response = await axios.post('http://localhost:5000/api/transcribe', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const generatedTranscript = response.data.transcript;\n      const language = detectLanguage(generatedTranscript);\n      if (language !== 'en') {\n        setIsNonEnglish(true);\n        setMessage('Transcript available. This video is in a non-English language. You can get the transcript in the original language or translated to English for an extra fee.');\n      } else {\n        setMessage('Transcript available. Please make the payment to download.');\n      }\n      setTranscript(generatedTranscript);\n      setIsPaymentReady(true);\n    } catch (error) {\n      setMessage(error.message);\n      console.error('Error during processing:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const extractVideoId = url => {\n    const urlObj = new URL(url);\n    const videoId = urlObj.searchParams.get('v') || urlObj.pathname.split('/').pop();\n    if (!videoId) {\n      throw new Error('Invalid YouTube URL');\n    }\n    return videoId;\n  };\n  const fetchAudioStream = async videoId => {\n    const response = await axios.get(`http://localhost:5000/api/get-audio-stream?videoId=${videoId}`, {\n      responseType: 'arraybuffer'\n    });\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    return await audioContext.decodeAudioData(response.data);\n  };\n  const detectLanguage = text => {\n    // Placeholder implementation for demo purposes\n    return 'en';\n  };\n  const translateTranscript = async text => {\n    const response = await axios.post('http://localhost:5000/api/translate', {\n      text\n    });\n    return response.data.translatedText;\n  };\n  const handlePaymentSuccess = async () => {\n    if (isNonEnglish && translate) {\n      try {\n        const translatedTranscript = await translateTranscript(transcript);\n        setTranscript(translatedTranscript);\n      } catch (error) {\n        setMessage('Error translating transcript');\n        return;\n      }\n    }\n    setMessage('Payment successful. Download your transcript below.');\n    setIsPaymentReady(false);\n    localStorage.setItem('transcript', transcript);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"YouTube Transcriber\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"YouTube URL:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: url,\n          onChange: handleUrlChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), isNonEnglish && /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Translate to English:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: translate,\n          onChange: handleTranslateChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? 'Processing...' : 'Get Transcript'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 25\n    }, this), isPaymentReady && /*#__PURE__*/_jsxDEV(PayPalScriptProvider, {\n      options: {\n        \"client-id\": \"YOUR_PAYPAL_CLIENT_ID\"\n      },\n      children: /*#__PURE__*/_jsxDEV(PayPalButtons, {\n        style: {\n          layout: 'vertical'\n        },\n        createOrder: (data, actions) => {\n          const amount = isNonEnglish ? \"7.00\" : \"5.00\";\n          return actions.order.create({\n            purchase_units: [{\n              amount: {\n                value: amount\n              }\n            }]\n          });\n        },\n        onApprove: (data, actions) => {\n          return actions.order.capture().then(handlePaymentSuccess);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }, this), transcript && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`,\n        download: \"transcript.txt\",\n        children: \"Download Transcript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n_s(TranscriptForm, \"gxyp6IIWUpwHiXcQoxt4QftuyAQ=\");\n_c = TranscriptForm;\nexport default TranscriptForm;\nvar _c;\n$RefreshReg$(_c, \"TranscriptForm\");","map":{"version":3,"names":["React","useState","axios","PayPalButtons","PayPalScriptProvider","jsxDEV","_jsxDEV","TranscriptForm","_s","url","setUrl","message","setMessage","transcript","setTranscript","isPaymentReady","setIsPaymentReady","loading","setLoading","isNonEnglish","setIsNonEnglish","translate","setTranslate","handleUrlChange","e","target","value","handleTranslateChange","checked","handleSubmit","preventDefault","videoId","extractVideoId","audioBuffer","fetchAudioStream","formData","FormData","append","Blob","type","response","post","headers","generatedTranscript","data","language","detectLanguage","error","console","urlObj","URL","searchParams","get","pathname","split","pop","Error","responseType","audioContext","window","AudioContext","webkitAudioContext","decodeAudioData","text","translateTranscript","translatedText","handlePaymentSuccess","translatedTranscript","localStorage","setItem","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","required","disabled","options","style","layout","createOrder","actions","amount","order","create","purchase_units","onApprove","capture","then","href","encodeURIComponent","download","_c","$RefreshReg$"],"sources":["C:/Users/swths/OneDrive/Documents/youtube-transcriber/youtube-transcriber/client/src/components/TranscriptForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';\r\n\r\nconst TranscriptForm = () => {\r\n    const [url, setUrl] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [transcript, setTranscript] = useState('');\r\n    const [isPaymentReady, setIsPaymentReady] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [isNonEnglish, setIsNonEnglish] = useState(false);\r\n    const [translate, setTranslate] = useState(false);\r\n\r\n    const handleUrlChange = (e) => {\r\n        setUrl(e.target.value);\r\n    };\r\n\r\n    const handleTranslateChange = (e) => {\r\n        setTranslate(e.target.checked);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setMessage('Processing...');\r\n        setLoading(true);\r\n        setIsNonEnglish(false);\r\n\r\n        try {\r\n            const videoId = extractVideoId(url);\r\n            const audioBuffer = await fetchAudioStream(videoId);\r\n            const formData = new FormData();\r\n            formData.append('audio', new Blob([audioBuffer], { type: 'audio/webm' }));\r\n\r\n            const response = await axios.post('http://localhost:5000/api/transcribe', formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            });\r\n\r\n            const generatedTranscript = response.data.transcript;\r\n\r\n            const language = detectLanguage(generatedTranscript);\r\n\r\n            if (language !== 'en') {\r\n                setIsNonEnglish(true);\r\n                setMessage('Transcript available. This video is in a non-English language. You can get the transcript in the original language or translated to English for an extra fee.');\r\n            } else {\r\n                setMessage('Transcript available. Please make the payment to download.');\r\n            }\r\n\r\n            setTranscript(generatedTranscript);\r\n            setIsPaymentReady(true);\r\n        } catch (error) {\r\n            setMessage(error.message);\r\n            console.error('Error during processing:', error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const extractVideoId = (url) => {\r\n        const urlObj = new URL(url);\r\n        const videoId = urlObj.searchParams.get('v') || urlObj.pathname.split('/').pop();\r\n        if (!videoId) {\r\n            throw new Error('Invalid YouTube URL');\r\n        }\r\n        return videoId;\r\n    };\r\n\r\n    const fetchAudioStream = async (videoId) => {\r\n        const response = await axios.get(`http://localhost:5000/api/get-audio-stream?videoId=${videoId}`, { responseType: 'arraybuffer' });\r\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n        return await audioContext.decodeAudioData(response.data);\r\n    };\r\n\r\n    const detectLanguage = (text) => {\r\n        // Placeholder implementation for demo purposes\r\n        return 'en';\r\n    };\r\n\r\n    const translateTranscript = async (text) => {\r\n        const response = await axios.post('http://localhost:5000/api/translate', { text });\r\n        return response.data.translatedText;\r\n    };\r\n\r\n    const handlePaymentSuccess = async () => {\r\n        if (isNonEnglish && translate) {\r\n            try {\r\n                const translatedTranscript = await translateTranscript(transcript);\r\n                setTranscript(translatedTranscript);\r\n            } catch (error) {\r\n                setMessage('Error translating transcript');\r\n                return;\r\n            }\r\n        }\r\n        setMessage('Payment successful. Download your transcript below.');\r\n        setIsPaymentReady(false);\r\n        localStorage.setItem('transcript', transcript);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>YouTube Transcriber</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    YouTube URL:\r\n                    <input type=\"text\" value={url} onChange={handleUrlChange} required />\r\n                </label>\r\n                {isNonEnglish && (\r\n                    <label>\r\n                        Translate to English:\r\n                        <input type=\"checkbox\" checked={translate} onChange={handleTranslateChange} />\r\n                    </label>\r\n                )}\r\n                <button type=\"submit\" disabled={loading}>\r\n                    {loading ? 'Processing...' : 'Get Transcript'}\r\n                </button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n            {isPaymentReady && (\r\n                <PayPalScriptProvider options={{ \"client-id\": \"YOUR_PAYPAL_CLIENT_ID\" }}>\r\n                    <PayPalButtons\r\n                        style={{ layout: 'vertical' }}\r\n                        createOrder={(data, actions) => {\r\n                            const amount = isNonEnglish ? \"7.00\" : \"5.00\";\r\n                            return actions.order.create({\r\n                                purchase_units: [{\r\n                                    amount: { value: amount }\r\n                                }]\r\n                            });\r\n                        }}\r\n                        onApprove={(data, actions) => {\r\n                            return actions.order.capture().then(handlePaymentSuccess);\r\n                        }}\r\n                    />\r\n                </PayPalScriptProvider>\r\n            )}\r\n            {transcript && (\r\n                <div>\r\n                    <p>{transcript}</p>\r\n                    <a\r\n                        href={`data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`}\r\n                        download=\"transcript.txt\"\r\n                    >\r\n                        Download Transcript\r\n                    </a>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TranscriptForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}