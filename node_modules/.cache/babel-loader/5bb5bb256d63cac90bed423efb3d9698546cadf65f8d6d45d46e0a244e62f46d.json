{"ast":null,"code":"import getHooks from './01-getHooks.js';\nimport trimDown from './02-trim-down.js';\n// import getWants from './03-get-wants.js'\nimport runMatch from './04-runMatch.js';\nconst tooSmall = function (maybeList, document) {\n  return maybeList.map((arr, i) => {\n    let termCount = document[i].length;\n    arr = arr.filter(o => {\n      return termCount >= o.minWords;\n    });\n    return arr;\n  });\n};\nconst sweep = function (document, net, methods) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  // find suitable matches to attempt, on each sentence\n  let docCache = methods.one.cacheDoc(document);\n  // collect possible matches for this document\n  let maybeList = getHooks(docCache, net.hooks);\n  // ensure all defined needs are met for each match\n  maybeList = trimDown(maybeList, docCache, document);\n  // add unchacheable matches to each sentence's todo-list\n  if (net.always.length > 0) {\n    maybeList = maybeList.map(arr => arr.concat(net.always));\n  }\n  // if we don't have enough words\n  maybeList = tooSmall(maybeList, document);\n\n  // now actually run the matches\n  let results = runMatch(maybeList, document, docCache, methods, opts);\n  // console.dir(results, { depth: 5 })\n  return results;\n};\nexport default sweep;","map":{"version":3,"names":["getHooks","trimDown","runMatch","tooSmall","maybeList","document","map","arr","i","termCount","length","filter","o","minWords","sweep","net","methods","opts","arguments","undefined","docCache","one","cacheDoc","hooks","always","concat","results"],"sources":["C:/Users/swths/node_modules/compromise/src/1-one/sweep/methods/sweep/index.js"],"sourcesContent":["import getHooks from './01-getHooks.js'\nimport trimDown from './02-trim-down.js'\n// import getWants from './03-get-wants.js'\nimport runMatch from './04-runMatch.js'\n\n\nconst tooSmall = function (maybeList, document) {\n  return maybeList.map((arr, i) => {\n    let termCount = document[i].length\n    arr = arr.filter(o => {\n      return termCount >= o.minWords\n    })\n    return arr\n  })\n}\n\nconst sweep = function (document, net, methods, opts = {}) {\n  // find suitable matches to attempt, on each sentence\n  let docCache = methods.one.cacheDoc(document)\n  // collect possible matches for this document\n  let maybeList = getHooks(docCache, net.hooks)\n  // ensure all defined needs are met for each match\n  maybeList = trimDown(maybeList, docCache, document)\n  // add unchacheable matches to each sentence's todo-list\n  if (net.always.length > 0) {\n    maybeList = maybeList.map(arr => arr.concat(net.always))\n  }\n  // if we don't have enough words\n  maybeList = tooSmall(maybeList, document)\n\n  // now actually run the matches\n  let results = runMatch(maybeList, document, docCache, methods, opts)\n  // console.dir(results, { depth: 5 })\n  return results\n}\nexport default sweep\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,QAAQ,MAAM,mBAAmB;AACxC;AACA,OAAOC,QAAQ,MAAM,kBAAkB;AAGvC,MAAMC,QAAQ,GAAG,SAAAA,CAAUC,SAAS,EAAEC,QAAQ,EAAE;EAC9C,OAAOD,SAAS,CAACE,GAAG,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;IAC/B,IAAIC,SAAS,GAAGJ,QAAQ,CAACG,CAAC,CAAC,CAACE,MAAM;IAClCH,GAAG,GAAGA,GAAG,CAACI,MAAM,CAACC,CAAC,IAAI;MACpB,OAAOH,SAAS,IAAIG,CAAC,CAACC,QAAQ;IAChC,CAAC,CAAC;IACF,OAAON,GAAG;EACZ,CAAC,CAAC;AACJ,CAAC;AAED,MAAMO,KAAK,GAAG,SAAAA,CAAUT,QAAQ,EAAEU,GAAG,EAAEC,OAAO,EAAa;EAAA,IAAXC,IAAI,GAAAC,SAAA,CAAAR,MAAA,QAAAQ,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC,CAAC;EACvD;EACA,IAAIE,QAAQ,GAAGJ,OAAO,CAACK,GAAG,CAACC,QAAQ,CAACjB,QAAQ,CAAC;EAC7C;EACA,IAAID,SAAS,GAAGJ,QAAQ,CAACoB,QAAQ,EAAEL,GAAG,CAACQ,KAAK,CAAC;EAC7C;EACAnB,SAAS,GAAGH,QAAQ,CAACG,SAAS,EAAEgB,QAAQ,EAAEf,QAAQ,CAAC;EACnD;EACA,IAAIU,GAAG,CAACS,MAAM,CAACd,MAAM,GAAG,CAAC,EAAE;IACzBN,SAAS,GAAGA,SAAS,CAACE,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACkB,MAAM,CAACV,GAAG,CAACS,MAAM,CAAC,CAAC;EAC1D;EACA;EACApB,SAAS,GAAGD,QAAQ,CAACC,SAAS,EAAEC,QAAQ,CAAC;;EAEzC;EACA,IAAIqB,OAAO,GAAGxB,QAAQ,CAACE,SAAS,EAAEC,QAAQ,EAAEe,QAAQ,EAAEJ,OAAO,EAAEC,IAAI,CAAC;EACpE;EACA,OAAOS,OAAO;AAChB,CAAC;AACD,eAAeZ,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}