{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\swths\\\\OneDrive\\\\Documents\\\\youtube-transcriber\\\\youtube-transcriber\\\\client\\\\src\\\\components\\\\TranscriptForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TranscriptForm = () => {\n  _s();\n  const [url, setUrl] = useState('');\n  const [message, setMessage] = useState('');\n  const [transcript, setTranscript] = useState('');\n  const [isPaymentReady, setIsPaymentReady] = useState(false);\n  const handleUrlChange = e => {\n    setUrl(e.target.value);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setMessage('Processing...');\n    const videoId = extractVideoId(url);\n    console.log('Extracted videoId:', videoId);\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    try {\n      console.log('Fetching audio stream...');\n      const audioBuffer = await fetchAudioStream(videoId, audioContext);\n      console.log('Audio stream fetched, processing audio...');\n      const generatedTranscript = await processAudioStream(audioBuffer, audioContext);\n      console.log('Audio processed, setting transcript...');\n      setTranscript(generatedTranscript);\n      setMessage('Transcript ready. Please make the payment to download.');\n      setIsPaymentReady(true);\n    } catch (error) {\n      console.error('Error during processing:', error.message);\n      setMessage('Error processing audio');\n    }\n  };\n  const extractVideoId = url => {\n    const urlObj = new URL(url);\n    const videoId = urlObj.searchParams.get('v') || urlObj.pathname.split('/').pop();\n    if (!videoId) {\n      throw new Error('Invalid YouTube URL');\n    }\n    return videoId;\n  };\n  const fetchAudioStream = async (videoId, audioContext) => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/get-audio-stream?videoId=${videoId}`, {\n        responseType: 'arraybuffer'\n      });\n      const audioBuffer = await audioContext.decodeAudioData(response.data);\n      return audioBuffer;\n    } catch (error) {\n      console.error('Error fetching audio stream:', error.message);\n      throw new Error('Error fetching audio stream');\n    }\n  };\n  const processAudioStream = async (audioBuffer, audioContext) => {\n    return new Promise((resolve, reject) => {\n      const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n      recognition.lang = 'en-US';\n      recognition.interimResults = false;\n      recognition.maxAlternatives = 1;\n      recognition.onresult = event => {\n        const transcript = event.results[0][0].transcript;\n        resolve(transcript);\n      };\n      recognition.onerror = event => {\n        console.error('Speech recognition error:', event.error);\n        reject(new Error('Speech recognition error'));\n      };\n      recognition.onend = () => {\n        console.warn('Speech recognition ended without results');\n        reject(new Error('Speech recognition ended without results'));\n      };\n      const source = audioContext.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(audioContext.destination);\n      const mediaStreamDestination = audioContext.createMediaStreamDestination();\n      source.connect(mediaStreamDestination);\n      const mediaRecorder = new MediaRecorder(mediaStreamDestination.stream);\n      const chunks = [];\n      mediaRecorder.ondataavailable = e => {\n        chunks.push(e.data);\n      };\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunks, {\n          type: 'audio/webm'\n        });\n        const audioUrl = URL.createObjectURL(blob);\n        const audio = new Audio(audioUrl);\n        audio.play();\n        recognition.start();\n      };\n      mediaRecorder.start();\n      source.start(0);\n      setTimeout(() => {\n        mediaRecorder.stop();\n        source.stop();\n      }, audioBuffer.duration * 1000);\n    });\n  };\n  const handlePaymentSuccess = () => {\n    setMessage('Payment successful. Download your transcript below.');\n    setIsPaymentReady(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"YouTube URL:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: url,\n          onChange: handleUrlChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Get Transcript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 25\n    }, this), isPaymentReady && /*#__PURE__*/_jsxDEV(PayPalScriptProvider, {\n      options: {\n        \"client-id\": \"YOUR_PAYPAL_CLIENT_ID\"\n      },\n      children: /*#__PURE__*/_jsxDEV(PayPalButtons, {\n        style: {\n          layout: 'vertical'\n        },\n        createOrder: (data, actions) => {\n          return actions.order.create({\n            purchase_units: [{\n              amount: {\n                value: \"5.00\" // Set the correct amount\n              }\n            }]\n          });\n        },\n        onApprove: (data, actions) => {\n          return actions.order.capture().then(handlePaymentSuccess);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }, this), message === 'Payment successful. Download your transcript below.' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`,\n        download: \"transcript.txt\",\n        children: \"Download Transcript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n};\n_s(TranscriptForm, \"c8lgiaYLKusQWv55oaXUHRdskxI=\");\n_c = TranscriptForm;\nexport default TranscriptForm;\nvar _c;\n$RefreshReg$(_c, \"TranscriptForm\");","map":{"version":3,"names":["React","useState","axios","PayPalButtons","PayPalScriptProvider","jsxDEV","_jsxDEV","TranscriptForm","_s","url","setUrl","message","setMessage","transcript","setTranscript","isPaymentReady","setIsPaymentReady","handleUrlChange","e","target","value","handleSubmit","preventDefault","videoId","extractVideoId","console","log","audioContext","window","AudioContext","webkitAudioContext","audioBuffer","fetchAudioStream","generatedTranscript","processAudioStream","error","urlObj","URL","searchParams","get","pathname","split","pop","Error","response","responseType","decodeAudioData","data","Promise","resolve","reject","recognition","SpeechRecognition","webkitSpeechRecognition","lang","interimResults","maxAlternatives","onresult","event","results","onerror","onend","warn","source","createBufferSource","buffer","connect","destination","mediaStreamDestination","createMediaStreamDestination","mediaRecorder","MediaRecorder","stream","chunks","ondataavailable","push","onstop","blob","Blob","type","audioUrl","createObjectURL","audio","Audio","play","start","setTimeout","stop","duration","handlePaymentSuccess","children","onSubmit","onChange","required","fileName","_jsxFileName","lineNumber","columnNumber","options","style","layout","createOrder","actions","order","create","purchase_units","amount","onApprove","capture","then","href","encodeURIComponent","download","_c","$RefreshReg$"],"sources":["C:/Users/swths/OneDrive/Documents/youtube-transcriber/youtube-transcriber/client/src/components/TranscriptForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';\r\n\r\nconst TranscriptForm = () => {\r\n    const [url, setUrl] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [transcript, setTranscript] = useState('');\r\n    const [isPaymentReady, setIsPaymentReady] = useState(false);\r\n\r\n    const handleUrlChange = (e) => {\r\n        setUrl(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setMessage('Processing...');\r\n\r\n        const videoId = extractVideoId(url);\r\n        console.log('Extracted videoId:', videoId);\r\n\r\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n        try {\r\n            console.log('Fetching audio stream...');\r\n            const audioBuffer = await fetchAudioStream(videoId, audioContext);\r\n            console.log('Audio stream fetched, processing audio...');\r\n            const generatedTranscript = await processAudioStream(audioBuffer, audioContext);\r\n            console.log('Audio processed, setting transcript...');\r\n            setTranscript(generatedTranscript);\r\n            setMessage('Transcript ready. Please make the payment to download.');\r\n            setIsPaymentReady(true);\r\n        } catch (error) {\r\n            console.error('Error during processing:', error.message);\r\n            setMessage('Error processing audio');\r\n        }\r\n    };\r\n\r\n    const extractVideoId = (url) => {\r\n        const urlObj = new URL(url);\r\n        const videoId = urlObj.searchParams.get('v') || urlObj.pathname.split('/').pop();\r\n        if (!videoId) {\r\n            throw new Error('Invalid YouTube URL');\r\n        }\r\n        return videoId;\r\n    };\r\n\r\n    const fetchAudioStream = async (videoId, audioContext) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:5000/api/get-audio-stream?videoId=${videoId}`, { responseType: 'arraybuffer' });\r\n            const audioBuffer = await audioContext.decodeAudioData(response.data);\r\n            return audioBuffer;\r\n        } catch (error) {\r\n            console.error('Error fetching audio stream:', error.message);\r\n            throw new Error('Error fetching audio stream');\r\n        }\r\n    };    \r\n\r\n    const processAudioStream = async (audioBuffer, audioContext) => {\r\n        return new Promise((resolve, reject) => {\r\n            const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n            recognition.lang = 'en-US';\r\n            recognition.interimResults = false;\r\n            recognition.maxAlternatives = 1;\r\n\r\n            recognition.onresult = (event) => {\r\n                const transcript = event.results[0][0].transcript;\r\n                resolve(transcript);\r\n            };\r\n\r\n            recognition.onerror = (event) => {\r\n                console.error('Speech recognition error:', event.error);\r\n                reject(new Error('Speech recognition error'));\r\n            };\r\n\r\n            recognition.onend = () => {\r\n                console.warn('Speech recognition ended without results');\r\n                reject(new Error('Speech recognition ended without results'));\r\n            };\r\n\r\n            const source = audioContext.createBufferSource();\r\n            source.buffer = audioBuffer;\r\n            source.connect(audioContext.destination);\r\n\r\n            const mediaStreamDestination = audioContext.createMediaStreamDestination();\r\n            source.connect(mediaStreamDestination);\r\n\r\n            const mediaRecorder = new MediaRecorder(mediaStreamDestination.stream);\r\n            const chunks = [];\r\n\r\n            mediaRecorder.ondataavailable = (e) => {\r\n                chunks.push(e.data);\r\n            };\r\n\r\n            mediaRecorder.onstop = () => {\r\n                const blob = new Blob(chunks, { type: 'audio/webm' });\r\n                const audioUrl = URL.createObjectURL(blob);\r\n                const audio = new Audio(audioUrl);\r\n                audio.play();\r\n\r\n                recognition.start();\r\n            };\r\n\r\n            mediaRecorder.start();\r\n            source.start(0);\r\n\r\n            setTimeout(() => {\r\n                mediaRecorder.stop();\r\n                source.stop();\r\n            }, audioBuffer.duration * 1000);\r\n        });\r\n    };\r\n\r\n    const handlePaymentSuccess = () => {\r\n        setMessage('Payment successful. Download your transcript below.');\r\n        setIsPaymentReady(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    YouTube URL:\r\n                    <input type=\"text\" value={url} onChange={handleUrlChange} required />\r\n                </label>\r\n                <button type=\"submit\">Get Transcript</button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n            {isPaymentReady && (\r\n                <PayPalScriptProvider options={{ \"client-id\": \"YOUR_PAYPAL_CLIENT_ID\" }}>\r\n                    <PayPalButtons\r\n                        style={{ layout: 'vertical' }}\r\n                        createOrder={(data, actions) => {\r\n                            return actions.order.create({\r\n                                purchase_units: [{\r\n                                    amount: {\r\n                                        value: \"5.00\" // Set the correct amount\r\n                                    }\r\n                                }]\r\n                            });\r\n                        }}\r\n                        onApprove={(data, actions) => {\r\n                            return actions.order.capture().then(handlePaymentSuccess);\r\n                        }}\r\n                    />\r\n                </PayPalScriptProvider>\r\n            )}\r\n            {message === 'Payment successful. Download your transcript below.' && (\r\n                <div>\r\n                    <p>{transcript}</p>\r\n                    <a\r\n                        href={`data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`}\r\n                        download=\"transcript.txt\"\r\n                    >\r\n                        Download Transcript\r\n                    </a>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TranscriptForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}