{"ast":null,"code":"export const bigram = nGram(2);\nexport const trigram = nGram(3);\n\n/**\n * Factory returning a function that converts a value string to n-grams.\n *\n * @param {number} n\n */\nexport function nGram(n) {\n  if (typeof n !== 'number' || Number.isNaN(n) || n < 1 || n === Number.POSITIVE_INFINITY) {\n    throw new Error('`' + n + '` is not a valid argument for `n-gram`');\n  }\n  return grams;\n\n  /**\n   * Create n-grams from a given value.\n   *\n   * @template {string|Array<unknown>} T\n   * @param {T} [value]\n   * @returns {T extends any[] ? T : Array<string>}\n   */\n  function grams(value) {\n    /** @type {T extends any[] ? T : Array<string>} */\n    // @ts-expect-error: pretty sure this is fine.\n    const nGrams = [];\n    if (value === null || value === undefined) {\n      return nGrams;\n    }\n    const source = typeof value.slice === 'function' ? value : String(value);\n    let index = source.length - n + 1;\n    if (index < 1) {\n      return nGrams;\n    }\n    while (index--) {\n      nGrams[index] = source.slice(index, index + n);\n    }\n    return nGrams;\n  }\n}","map":{"version":3,"names":["bigram","nGram","trigram","n","Number","isNaN","POSITIVE_INFINITY","Error","grams","value","nGrams","undefined","source","slice","String","index","length"],"sources":["C:/Users/swths/OneDrive/Documents/youtube-transcriber/youtube-transcriber/client/node_modules/n-gram/index.js"],"sourcesContent":["export const bigram = nGram(2)\nexport const trigram = nGram(3)\n\n/**\n * Factory returning a function that converts a value string to n-grams.\n *\n * @param {number} n\n */\nexport function nGram(n) {\n  if (\n    typeof n !== 'number' ||\n    Number.isNaN(n) ||\n    n < 1 ||\n    n === Number.POSITIVE_INFINITY\n  ) {\n    throw new Error('`' + n + '` is not a valid argument for `n-gram`')\n  }\n\n  return grams\n\n  /**\n   * Create n-grams from a given value.\n   *\n   * @template {string|Array<unknown>} T\n   * @param {T} [value]\n   * @returns {T extends any[] ? T : Array<string>}\n   */\n  function grams(value) {\n    /** @type {T extends any[] ? T : Array<string>} */\n    // @ts-expect-error: pretty sure this is fine.\n    const nGrams = []\n\n    if (value === null || value === undefined) {\n      return nGrams\n    }\n\n    const source = typeof value.slice === 'function' ? value : String(value)\n    let index = source.length - n + 1\n\n    if (index < 1) {\n      return nGrams\n    }\n\n    while (index--) {\n      nGrams[index] = source.slice(index, index + n)\n    }\n\n    return nGrams\n  }\n}\n"],"mappings":"AAAA,OAAO,MAAMA,MAAM,GAAGC,KAAK,CAAC,CAAC,CAAC;AAC9B,OAAO,MAAMC,OAAO,GAAGD,KAAK,CAAC,CAAC,CAAC;;AAE/B;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,KAAKA,CAACE,CAAC,EAAE;EACvB,IACE,OAAOA,CAAC,KAAK,QAAQ,IACrBC,MAAM,CAACC,KAAK,CAACF,CAAC,CAAC,IACfA,CAAC,GAAG,CAAC,IACLA,CAAC,KAAKC,MAAM,CAACE,iBAAiB,EAC9B;IACA,MAAM,IAAIC,KAAK,CAAC,GAAG,GAAGJ,CAAC,GAAG,wCAAwC,CAAC;EACrE;EAEA,OAAOK,KAAK;;EAEZ;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,KAAKA,CAACC,KAAK,EAAE;IACpB;IACA;IACA,MAAMC,MAAM,GAAG,EAAE;IAEjB,IAAID,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKE,SAAS,EAAE;MACzC,OAAOD,MAAM;IACf;IAEA,MAAME,MAAM,GAAG,OAAOH,KAAK,CAACI,KAAK,KAAK,UAAU,GAAGJ,KAAK,GAAGK,MAAM,CAACL,KAAK,CAAC;IACxE,IAAIM,KAAK,GAAGH,MAAM,CAACI,MAAM,GAAGb,CAAC,GAAG,CAAC;IAEjC,IAAIY,KAAK,GAAG,CAAC,EAAE;MACb,OAAOL,MAAM;IACf;IAEA,OAAOK,KAAK,EAAE,EAAE;MACdL,MAAM,CAACK,KAAK,CAAC,GAAGH,MAAM,CAACC,KAAK,CAACE,KAAK,EAAEA,KAAK,GAAGZ,CAAC,CAAC;IAChD;IAEA,OAAOO,MAAM;EACf;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}