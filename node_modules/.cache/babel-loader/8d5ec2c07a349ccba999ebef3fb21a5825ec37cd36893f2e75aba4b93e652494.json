{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\swths\\\\OneDrive\\\\Documents\\\\youtube-transcriber\\\\youtube-transcriber\\\\client\\\\src\\\\components\\\\TranscriptForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TranscriptForm = () => {\n  _s();\n  const [url, setUrl] = useState('');\n  const [message, setMessage] = useState('');\n  const [transcript, setTranscript] = useState('');\n  const [isPaymentReady, setIsPaymentReady] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [translate, setTranslate] = useState(false);\n  const handleUrlChange = e => {\n    setUrl(e.target.value);\n  };\n  const handleTranslateChange = e => {\n    setTranslate(e.target.checked);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setMessage('Processing...');\n    setLoading(true);\n    try {\n      const videoId = extractVideoId(url);\n      const audioBuffer = await fetchAudioStream(videoId);\n      const generatedTranscript = await processAudioBuffer(audioBuffer);\n      if (translate) {\n        const translatedTranscript = await translateTranscript(generatedTranscript);\n        setTranscript(translatedTranscript);\n      } else {\n        setTranscript(generatedTranscript);\n      }\n      setMessage('Transcript ready. Please make the payment to download.');\n      setIsPaymentReady(true);\n    } catch (error) {\n      setMessage(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const extractVideoId = url => {\n    try {\n      const urlObj = new URL(url);\n      const videoId = urlObj.searchParams.get('v') || urlObj.pathname.split('/').pop();\n      if (!videoId) {\n        throw new Error('Invalid YouTube URL');\n      }\n      return videoId;\n    } catch (error) {\n      throw new Error('Invalid URL format');\n    }\n  };\n  const fetchAudioStream = async videoId => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/get-audio-stream?videoId=${videoId}`, {\n        responseType: 'arraybuffer'\n      });\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const audioBuffer = await audioContext.decodeAudioData(response.data);\n      return audioBuffer;\n    } catch (error) {\n      throw new Error('Error fetching audio stream');\n    }\n  };\n  const processAudioBuffer = async audioBuffer => {\n    // Placeholder for server-side processing or alternative library\n    throw new Error('Audio processing not implemented');\n  };\n  const translateTranscript = async text => {\n    try {\n      const response = await axios.post(`http://localhost:5000/api/translate`, {\n        text\n      });\n      return response.data.translatedText;\n    } catch (error) {\n      throw new Error('Error translating transcript');\n    }\n  };\n  const handlePaymentSuccess = () => {\n    setMessage('Payment successful. Download your transcript below.');\n    setIsPaymentReady(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"YouTube URL:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: url,\n          onChange: handleUrlChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Translate to English:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: translate,\n          onChange: handleTranslateChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? 'Processing...' : 'Get Transcript'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }, this), isPaymentReady && /*#__PURE__*/_jsxDEV(PayPalScriptProvider, {\n      options: {\n        \"client-id\": process.env.REACT_APP_PAYPAL_CLIENT_ID\n      },\n      children: /*#__PURE__*/_jsxDEV(PayPalButtons, {\n        style: {\n          layout: 'vertical'\n        },\n        createOrder: (data, actions) => {\n          const amount = translate ? \"7.00\" : \"5.00\";\n          return actions.order.create({\n            purchase_units: [{\n              amount: {\n                value: amount\n              }\n            }]\n          });\n        },\n        onApprove: (data, actions) => {\n          return actions.order.capture().then(handlePaymentSuccess);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this), message === 'Payment successful. Download your transcript below.' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`,\n        download: \"transcript.txt\",\n        children: \"Download Transcript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n_s(TranscriptForm, \"xJJLyLQ7UUMiQm59K14kfmK7gCE=\");\n_c = TranscriptForm;\nexport default TranscriptForm;\nvar _c;\n$RefreshReg$(_c, \"TranscriptForm\");","map":{"version":3,"names":["React","useState","axios","PayPalButtons","PayPalScriptProvider","jsxDEV","_jsxDEV","TranscriptForm","_s","url","setUrl","message","setMessage","transcript","setTranscript","isPaymentReady","setIsPaymentReady","loading","setLoading","translate","setTranslate","handleUrlChange","e","target","value","handleTranslateChange","checked","handleSubmit","preventDefault","videoId","extractVideoId","audioBuffer","fetchAudioStream","generatedTranscript","processAudioBuffer","translatedTranscript","translateTranscript","error","urlObj","URL","searchParams","get","pathname","split","pop","Error","response","responseType","audioContext","window","AudioContext","webkitAudioContext","decodeAudioData","data","text","post","translatedText","handlePaymentSuccess","children","onSubmit","type","onChange","required","fileName","_jsxFileName","lineNumber","columnNumber","disabled","options","process","env","REACT_APP_PAYPAL_CLIENT_ID","style","layout","createOrder","actions","amount","order","create","purchase_units","onApprove","capture","then","href","encodeURIComponent","download","_c","$RefreshReg$"],"sources":["C:/Users/swths/OneDrive/Documents/youtube-transcriber/youtube-transcriber/client/src/components/TranscriptForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';\r\n\r\nconst TranscriptForm = () => {\r\n    const [url, setUrl] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [transcript, setTranscript] = useState('');\r\n    const [isPaymentReady, setIsPaymentReady] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [translate, setTranslate] = useState(false);\r\n\r\n    const handleUrlChange = (e) => {\r\n        setUrl(e.target.value);\r\n    };\r\n\r\n    const handleTranslateChange = (e) => {\r\n        setTranslate(e.target.checked);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setMessage('Processing...');\r\n        setLoading(true);\r\n\r\n        try {\r\n            const videoId = extractVideoId(url);\r\n            const audioBuffer = await fetchAudioStream(videoId);\r\n            const generatedTranscript = await processAudioBuffer(audioBuffer);\r\n\r\n            if (translate) {\r\n                const translatedTranscript = await translateTranscript(generatedTranscript);\r\n                setTranscript(translatedTranscript);\r\n            } else {\r\n                setTranscript(generatedTranscript);\r\n            }\r\n\r\n            setMessage('Transcript ready. Please make the payment to download.');\r\n            setIsPaymentReady(true);\r\n        } catch (error) {\r\n            setMessage(error.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const extractVideoId = (url) => {\r\n        try {\r\n            const urlObj = new URL(url);\r\n            const videoId = urlObj.searchParams.get('v') || urlObj.pathname.split('/').pop();\r\n            if (!videoId) {\r\n                throw new Error('Invalid YouTube URL');\r\n            }\r\n            return videoId;\r\n        } catch (error) {\r\n            throw new Error('Invalid URL format');\r\n        }\r\n    };\r\n\r\n    const fetchAudioStream = async (videoId) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:5000/api/get-audio-stream?videoId=${videoId}`, { responseType: 'arraybuffer' });\r\n            const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n            const audioBuffer = await audioContext.decodeAudioData(response.data);\r\n            return audioBuffer;\r\n        } catch (error) {\r\n            throw new Error('Error fetching audio stream');\r\n        }\r\n    };\r\n\r\n    const processAudioBuffer = async (audioBuffer) => {\r\n        // Placeholder for server-side processing or alternative library\r\n        throw new Error('Audio processing not implemented');\r\n    };\r\n\r\n    const translateTranscript = async (text) => {\r\n        try {\r\n            const response = await axios.post(`http://localhost:5000/api/translate`, { text });\r\n            return response.data.translatedText;\r\n        } catch (error) {\r\n            throw new Error('Error translating transcript');\r\n        }\r\n    };\r\n\r\n    const handlePaymentSuccess = () => {\r\n        setMessage('Payment successful. Download your transcript below.');\r\n        setIsPaymentReady(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    YouTube URL:\r\n                    <input type=\"text\" value={url} onChange={handleUrlChange} required />\r\n                </label>\r\n                <label>\r\n                    Translate to English:\r\n                    <input type=\"checkbox\" checked={translate} onChange={handleTranslateChange} />\r\n                </label>\r\n                <button type=\"submit\" disabled={loading}>\r\n                    {loading ? 'Processing...' : 'Get Transcript'}\r\n                </button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n            {isPaymentReady && (\r\n                <PayPalScriptProvider options={{ \"client-id\": process.env.REACT_APP_PAYPAL_CLIENT_ID }}>\r\n                    <PayPalButtons\r\n                        style={{ layout: 'vertical' }}\r\n                        createOrder={(data, actions) => {\r\n                            const amount = translate ? \"7.00\" : \"5.00\";\r\n                            return actions.order.create({\r\n                                purchase_units: [{\r\n                                    amount: {\r\n                                        value: amount\r\n                                    }\r\n                                }]\r\n                            });\r\n                        }}\r\n                        onApprove={(data, actions) => {\r\n                            return actions.order.capture().then(handlePaymentSuccess);\r\n                        }}\r\n                    />\r\n                </PayPalScriptProvider>\r\n            )}\r\n            {message === 'Payment successful. Download your transcript below.' && (\r\n                <div>\r\n                    <p>{transcript}</p>\r\n                    <a\r\n                        href={`data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`}\r\n                        download=\"transcript.txt\"\r\n                    >\r\n                        Download Transcript\r\n                    </a>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TranscriptForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}