{"ast":null,"code":"import React,{useState}from'react';import axios from'axios';import{PayPalButton}from'react-paypal-button-v2';import*as tf from'@tensorflow/tfjs';import*as speechCommands from'@tensorflow-models/speech-commands';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TranscriptForm=()=>{const[url,setUrl]=useState('');const[message,setMessage]=useState('');const[transcript,setTranscript]=useState('');const[isPaymentReady,setIsPaymentReady]=useState(false);const handleUrlChange=e=>{setUrl(e.target.value);};const handleSubmit=async e=>{e.preventDefault();setMessage('Processing...');const videoId=extractVideoId(url);const audioContext=new(window.AudioContext||window.webkitAudioContext)();try{const audioBuffer=await fetchAudioStream(videoId,audioContext);const generatedTranscript=await processAudioStream(audioBuffer);setTranscript(generatedTranscript);setMessage('Transcript ready. Please make the payment to download.');setIsPaymentReady(true);}catch(error){setMessage('Error processing audio');}};const extractVideoId=url=>{const urlObj=new URL(url);return urlObj.searchParams.get('v');};const fetchAudioStream=async(videoId,audioContext)=>{const response=await axios.get(\"/api/get-audio-stream?videoId=\".concat(videoId),{responseType:'arraybuffer'});const audioBuffer=await audioContext.decodeAudioData(response.data);return audioBuffer;};const processAudioStream=async audioBuffer=>{const recognizer=speechCommands.create('BROWSER_FFT');await recognizer.ensureModelLoaded();const float32Array=audioBuffer.getChannelData(0);const inputTensor=tf.tensor(float32Array,[1,float32Array.length]);const result=await recognizer.recognize(inputTensor);return result.words;};const handlePaymentSuccess=()=>{setMessage('Payment successful. Download your transcript below.');setIsPaymentReady(false);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"YouTube URL:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:url,onChange:handleUrlChange,required:true})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Get Transcript\"})]}),message&&/*#__PURE__*/_jsx(\"p\",{children:message}),isPaymentReady&&/*#__PURE__*/_jsx(PayPalButton,{amount:\"5.00\",onSuccess:handlePaymentSuccess}),message==='Payment successful. Download your transcript below.'&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:transcript}),/*#__PURE__*/_jsx(\"a\",{href:\"data:text/plain;charset=utf-8,\".concat(encodeURIComponent(transcript)),download:\"transcript.txt\",children:\"Download Transcript\"})]})]});};export default TranscriptForm;","map":{"version":3,"names":["React","useState","axios","PayPalButton","tf","speechCommands","jsx","_jsx","jsxs","_jsxs","TranscriptForm","url","setUrl","message","setMessage","transcript","setTranscript","isPaymentReady","setIsPaymentReady","handleUrlChange","e","target","value","handleSubmit","preventDefault","videoId","extractVideoId","audioContext","window","AudioContext","webkitAudioContext","audioBuffer","fetchAudioStream","generatedTranscript","processAudioStream","error","urlObj","URL","searchParams","get","response","concat","responseType","decodeAudioData","data","recognizer","create","ensureModelLoaded","float32Array","getChannelData","inputTensor","tensor","length","result","recognize","words","handlePaymentSuccess","children","onSubmit","type","onChange","required","amount","onSuccess","href","encodeURIComponent","download"],"sources":["C:/Users/swths/OneDrive/Documents/youtube-transcriber/youtube-transcriber/client/src/components/TranscriptForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { PayPalButton } from 'react-paypal-button-v2';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport * as speechCommands from '@tensorflow-models/speech-commands';\r\n\r\nconst TranscriptForm = () => {\r\n    const [url, setUrl] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [transcript, setTranscript] = useState('');\r\n    const [isPaymentReady, setIsPaymentReady] = useState(false);\r\n\r\n    const handleUrlChange = (e) => {\r\n        setUrl(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setMessage('Processing...');\r\n\r\n        const videoId = extractVideoId(url);\r\n\r\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n        try {\r\n            const audioBuffer = await fetchAudioStream(videoId, audioContext);\r\n            const generatedTranscript = await processAudioStream(audioBuffer);\r\n            setTranscript(generatedTranscript);\r\n            setMessage('Transcript ready. Please make the payment to download.');\r\n            setIsPaymentReady(true);\r\n        } catch (error) {\r\n            setMessage('Error processing audio');\r\n        }\r\n    };\r\n\r\n    const extractVideoId = (url) => {\r\n        const urlObj = new URL(url);\r\n        return urlObj.searchParams.get('v');\r\n    };\r\n\r\n    const fetchAudioStream = async (videoId, audioContext) => {\r\n        const response = await axios.get(`/api/get-audio-stream?videoId=${videoId}`, { responseType: 'arraybuffer' });\r\n        const audioBuffer = await audioContext.decodeAudioData(response.data);\r\n        return audioBuffer;\r\n    };\r\n\r\n    const processAudioStream = async (audioBuffer) => {\r\n        const recognizer = speechCommands.create('BROWSER_FFT');\r\n        await recognizer.ensureModelLoaded();\r\n\r\n        const float32Array = audioBuffer.getChannelData(0);\r\n        const inputTensor = tf.tensor(float32Array, [1, float32Array.length]);\r\n\r\n        const result = await recognizer.recognize(inputTensor);\r\n        return result.words;\r\n    };\r\n\r\n    const handlePaymentSuccess = () => {\r\n        setMessage('Payment successful. Download your transcript below.');\r\n        setIsPaymentReady(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    YouTube URL:\r\n                    <input type=\"text\" value={url} onChange={handleUrlChange} required />\r\n                </label>\r\n                <button type=\"submit\">Get Transcript</button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n            {isPaymentReady && (\r\n                <PayPalButton\r\n                    amount=\"5.00\"\r\n                    onSuccess={handlePaymentSuccess}\r\n                />\r\n            )}\r\n            {message === 'Payment successful. Download your transcript below.' && (\r\n                <div>\r\n                    <p>{transcript}</p>\r\n                    <a\r\n                        href={`data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`}\r\n                        download=\"transcript.txt\"\r\n                    >\r\n                        Download Transcript\r\n                    </a>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TranscriptForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}