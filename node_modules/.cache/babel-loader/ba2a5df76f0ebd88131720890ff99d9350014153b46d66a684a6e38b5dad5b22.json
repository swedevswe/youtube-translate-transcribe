{"ast":null,"code":"/**\n * @typedef {import('trigram-utils').TrigramTuple} TrigramTuple\n *\n * @typedef Options\n * @property {Array<string>} [only]\n *   Languages to allow.\n * @property {Array<string>} [ignore]\n *   Languages to ignore.\n * @property {number} [minLength=10]\n *   Minimum length to accept.\n */\n\n/* Load `trigram-utils`. */\nimport { asTuples } from 'trigram-utils';\n/* Load `expressions` (regular expressions matching\n * scripts). */\nimport { expressions } from './expressions.js';\n/* Load `data` (trigram information per language,\n * per script). */\nimport { data } from './data.js';\n\n/* Maximum sample length. */\nconst MAX_LENGTH = 2048;\n\n/* Minimum sample length. */\nconst MIN_LENGTH = 10;\n\n/* The maximum distance to add when a given trigram does\n * not exist in a trigram dictionary. */\nconst MAX_DIFFERENCE = 300;\nconst own = {}.hasOwnProperty;\n\n/* Construct trigram dictionaries. */\n\n/** @type {string} */\nlet script;\n\n/** @type {Record<string, Record<string, Record<string, number>>>} */\nconst numericData = {};\nfor (script in data) {\n  if (own.call(data, script)) {\n    const languages = data[script];\n    /** @type {string} */\n    let name;\n    numericData[script] = {};\n    for (name in languages) {\n      if (own.call(languages, name)) {\n        const model = languages[name].split('|');\n        /** @type {Record<string, number>} */\n        const trigrams = {};\n        let weight = model.length;\n        while (weight--) {\n          trigrams[model[weight]] = weight;\n        }\n        numericData[script][name] = trigrams;\n      }\n    }\n  }\n}\n\n/**\n * Get the most probable language for the given value.\n *\n * @param {string} [value]\n *   The value to test.\n * @param {Options} [options]\n *   Configuration.\n * @return {string}\n *  The most probable language.\n */\nexport function franc(value, options) {\n  return francAll(value, options)[0][0];\n}\n\n/**\n * Get a list of probable languages the given value is\n * written in.\n *\n * @param {string} [value]\n *   The value to test.\n * @param {Options} [options]\n *   Configuration.\n * @return {Array<TrigramTuple>}\n *   An array containing language—distance tuples.\n */\nexport function francAll(value) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  /** @type {Array<string>} */\n  // @ts-expect-error: `whitelist` is from long ago.\n  const only = [...(options.whitelist || []), ...(options.only || [])];\n  /** @type {Array<string>} */\n  // @ts-expect-error: `blacklist` is from long ago.\n  const ignore = [...(options.blacklist || []), ...(options.ignore || [])];\n  const minLength = options.minLength !== null && options.minLength !== undefined ? options.minLength : MIN_LENGTH;\n  if (!value || value.length < minLength) {\n    return und();\n  }\n  value = value.slice(0, MAX_LENGTH);\n\n  /* Get the script which characters occur the most\n   * in `value`. */\n  const script = getTopScript(value, expressions);\n\n  /* One languages exists for the most-used script. */\n  if (!script[0] || !(script[0] in numericData)) {\n    /* If no matches occured, such as a digit only string,\n     * or because the language is ignored, exit with `und`. */\n    if (!script[0] || script[1] === 0 || !allow(script[0], only, ignore)) {\n      return und();\n    }\n    return singleLanguageTuples(script[0]);\n  }\n\n  /* Get all distances for a given script, and\n   * normalize the distance values. */\n  return normalize(value, getDistances(asTuples(value), numericData[script[0]], only, ignore));\n}\n\n/**\n * Normalize the difference for each tuple in\n * `distances`.\n *\n * @param {string} value\n *   Value to normalize.\n * @param {Array<TrigramTuple>} distances\n *   List of distances.\n * @return {Array<TrigramTuple>}\n *   Normalized distances.\n */\nfunction normalize(value, distances) {\n  const min = distances[0][1];\n  const max = value.length * MAX_DIFFERENCE - min;\n  let index = -1;\n  while (++index < distances.length) {\n    distances[index][1] = 1 - (distances[index][1] - min) / max || 0;\n  }\n  return distances;\n}\n\n/**\n * From `scripts`, get the most occurring expression for\n * `value`.\n *\n * @param {string} value\n *   Value to check.\n * @param {Record<string, RegExp>} scripts\n *   Top-Scripts.\n * @return {[string|undefined, number]}\n *   Top script and its occurrence percentage.\n */\nfunction getTopScript(value, scripts) {\n  let topCount = -1;\n  /** @type {string|undefined} */\n  let topScript;\n  /** @type {string} */\n  let script;\n  for (script in scripts) {\n    if (own.call(scripts, script)) {\n      const count = getOccurrence(value, scripts[script]);\n      if (count > topCount) {\n        topCount = count;\n        topScript = script;\n      }\n    }\n  }\n  return [topScript, topCount];\n}\n\n/**\n * Get the occurrence ratio of `expression` for `value`.\n *\n * @param {string} value\n *   Value to check.\n * @param {RegExp} expression\n *   Code-point expression.\n * @return {number}\n *   Float between 0 and 1.\n */\nfunction getOccurrence(value, expression) {\n  const count = value.match(expression);\n  return (count ? count.length : 0) / value.length || 0;\n}\n\n/**\n * Get the distance between an array of trigram—count\n * tuples, and multiple trigram dictionaries.\n *\n * @param {Array<TrigramTuple>} trigrams\n *   An array containing trigram—count tuples.\n * @param {Record<string, Record<string, number>>} languages\n *   Multiple trigrams to test against.\n * @param {Array<string>} only\n *   Allowed languages; if non-empty, only included languages are kept.\n * @param {Array<string>} ignore\n *   Disallowed languages; included languages are ignored.\n * @return {Array<TrigramTuple>} An array\n *   containing language—distance tuples.\n */\nfunction getDistances(trigrams, languages, only, ignore) {\n  languages = filterLanguages(languages, only, ignore);\n\n  /** @type {Array<TrigramTuple>} */\n  const distances = [];\n  /** @type {string} */\n  let language;\n  if (languages) {\n    for (language in languages) {\n      if (own.call(languages, language)) {\n        distances.push([language, getDistance(trigrams, languages[language])]);\n      }\n    }\n  }\n  return distances.length === 0 ? und() : distances.sort(sort);\n}\n\n/**\n * Get the distance between an array of trigram—count\n * tuples, and a language dictionary.\n *\n * @param {Array<TrigramTuple>} trigrams\n *   An array containing trigram—count tuples.\n * @param {Record<string, number>} model\n *   Object containing weighted trigrams.\n * @return {number}\n *   The distance between the two.\n */\nfunction getDistance(trigrams, model) {\n  let distance = 0;\n  let index = -1;\n  while (++index < trigrams.length) {\n    const trigram = trigrams[index];\n    let difference = MAX_DIFFERENCE;\n    if (trigram[0] in model) {\n      difference = trigram[1] - model[trigram[0]] - 1;\n      if (difference < 0) {\n        difference = -difference;\n      }\n    }\n    distance += difference;\n  }\n  return distance;\n}\n\n/**\n * Filter `languages` by removing languages in\n * `ignore`, or including languages in `only`.\n *\n * @param {Record<string, Record<string, number>>} languages\n *   Languages to filter\n * @param {Array<string>} only\n *   Allowed languages; if non-empty, only included languages are kept.\n * @param {Array<string>} ignore\n *   Disallowed languages; included languages are ignored.\n * @return {Record<string, Record<string, number>>}\n *   Filtered array of languages.\n */\nfunction filterLanguages(languages, only, ignore) {\n  if (only.length === 0 && ignore.length === 0) {\n    return languages;\n  }\n\n  /** @type {Record<string, Record<string, number>>} */\n  const filteredLanguages = {};\n  /** @type {string} */\n  let language;\n  for (language in languages) {\n    if (allow(language, only, ignore)) {\n      filteredLanguages[language] = languages[language];\n    }\n  }\n  return filteredLanguages;\n}\n\n/**\n * Check if `language` can match according to settings.\n *\n * @param {string} language\n *   Languages to filter\n * @param {Array<string>} only\n *   Allowed languages; if non-empty, only included languages are kept.\n * @param {Array<string>} ignore\n *   Disallowed languages; included languages are ignored.\n * @return {boolean}\n *   Whether `language` can match\n */\nfunction allow(language, only, ignore) {\n  if (only.length === 0 && ignore.length === 0) {\n    return true;\n  }\n  return (only.length === 0 || only.includes(language)) && !ignore.includes(language);\n}\n\n/**\n * Create a single `und` tuple.\n */\nfunction und() {\n  return singleLanguageTuples('und');\n}\n\n/**\n * Create a single tuple as a list of tuples from a given language code.\n *\n * @param {string} language\n * @returns {Array<TrigramTuple>}\n */\nfunction singleLanguageTuples(language) {\n  return [[language, 1]];\n}\n\n/**\n * Deep regular sort on the number at `1` in both objects.\n *\n * @param {TrigramTuple} a\n * @param {TrigramTuple} b\n */\nfunction sort(a, b) {\n  return a[1] - b[1];\n}","map":{"version":3,"names":["asTuples","expressions","data","MAX_LENGTH","MIN_LENGTH","MAX_DIFFERENCE","own","hasOwnProperty","script","numericData","call","languages","name","model","split","trigrams","weight","length","franc","value","options","francAll","arguments","undefined","only","whitelist","ignore","blacklist","minLength","und","slice","getTopScript","allow","singleLanguageTuples","normalize","getDistances","distances","min","max","index","scripts","topCount","topScript","count","getOccurrence","expression","match","filterLanguages","language","push","getDistance","sort","distance","trigram","difference","filteredLanguages","includes","a","b"],"sources":["C:/Users/swths/OneDrive/Documents/youtube-transcriber/youtube-transcriber/client/node_modules/franc/index.js"],"sourcesContent":["/**\n * @typedef {import('trigram-utils').TrigramTuple} TrigramTuple\n *\n * @typedef Options\n * @property {Array<string>} [only]\n *   Languages to allow.\n * @property {Array<string>} [ignore]\n *   Languages to ignore.\n * @property {number} [minLength=10]\n *   Minimum length to accept.\n */\n\n/* Load `trigram-utils`. */\nimport {asTuples} from 'trigram-utils'\n/* Load `expressions` (regular expressions matching\n * scripts). */\nimport {expressions} from './expressions.js'\n/* Load `data` (trigram information per language,\n * per script). */\nimport {data} from './data.js'\n\n/* Maximum sample length. */\nconst MAX_LENGTH = 2048\n\n/* Minimum sample length. */\nconst MIN_LENGTH = 10\n\n/* The maximum distance to add when a given trigram does\n * not exist in a trigram dictionary. */\nconst MAX_DIFFERENCE = 300\n\nconst own = {}.hasOwnProperty\n\n/* Construct trigram dictionaries. */\n\n/** @type {string} */\nlet script\n\n/** @type {Record<string, Record<string, Record<string, number>>>} */\nconst numericData = {}\n\nfor (script in data) {\n  if (own.call(data, script)) {\n    const languages = data[script]\n    /** @type {string} */\n    let name\n\n    numericData[script] = {}\n\n    for (name in languages) {\n      if (own.call(languages, name)) {\n        const model = languages[name].split('|')\n        /** @type {Record<string, number>} */\n        const trigrams = {}\n        let weight = model.length\n\n        while (weight--) {\n          trigrams[model[weight]] = weight\n        }\n\n        numericData[script][name] = trigrams\n      }\n    }\n  }\n}\n\n/**\n * Get the most probable language for the given value.\n *\n * @param {string} [value]\n *   The value to test.\n * @param {Options} [options]\n *   Configuration.\n * @return {string}\n *  The most probable language.\n */\nexport function franc(value, options) {\n  return francAll(value, options)[0][0]\n}\n\n/**\n * Get a list of probable languages the given value is\n * written in.\n *\n * @param {string} [value]\n *   The value to test.\n * @param {Options} [options]\n *   Configuration.\n * @return {Array<TrigramTuple>}\n *   An array containing language—distance tuples.\n */\nexport function francAll(value, options = {}) {\n  /** @type {Array<string>} */\n  // @ts-expect-error: `whitelist` is from long ago.\n  const only = [...(options.whitelist || []), ...(options.only || [])]\n  /** @type {Array<string>} */\n  // @ts-expect-error: `blacklist` is from long ago.\n  const ignore = [...(options.blacklist || []), ...(options.ignore || [])]\n  const minLength =\n    options.minLength !== null && options.minLength !== undefined\n      ? options.minLength\n      : MIN_LENGTH\n\n  if (!value || value.length < minLength) {\n    return und()\n  }\n\n  value = value.slice(0, MAX_LENGTH)\n\n  /* Get the script which characters occur the most\n   * in `value`. */\n  const script = getTopScript(value, expressions)\n\n  /* One languages exists for the most-used script. */\n  if (!script[0] || !(script[0] in numericData)) {\n    /* If no matches occured, such as a digit only string,\n     * or because the language is ignored, exit with `und`. */\n    if (!script[0] || script[1] === 0 || !allow(script[0], only, ignore)) {\n      return und()\n    }\n\n    return singleLanguageTuples(script[0])\n  }\n\n  /* Get all distances for a given script, and\n   * normalize the distance values. */\n  return normalize(\n    value,\n    getDistances(asTuples(value), numericData[script[0]], only, ignore)\n  )\n}\n\n/**\n * Normalize the difference for each tuple in\n * `distances`.\n *\n * @param {string} value\n *   Value to normalize.\n * @param {Array<TrigramTuple>} distances\n *   List of distances.\n * @return {Array<TrigramTuple>}\n *   Normalized distances.\n */\nfunction normalize(value, distances) {\n  const min = distances[0][1]\n  const max = value.length * MAX_DIFFERENCE - min\n  let index = -1\n\n  while (++index < distances.length) {\n    distances[index][1] = 1 - (distances[index][1] - min) / max || 0\n  }\n\n  return distances\n}\n\n/**\n * From `scripts`, get the most occurring expression for\n * `value`.\n *\n * @param {string} value\n *   Value to check.\n * @param {Record<string, RegExp>} scripts\n *   Top-Scripts.\n * @return {[string|undefined, number]}\n *   Top script and its occurrence percentage.\n */\nfunction getTopScript(value, scripts) {\n  let topCount = -1\n  /** @type {string|undefined} */\n  let topScript\n  /** @type {string} */\n  let script\n\n  for (script in scripts) {\n    if (own.call(scripts, script)) {\n      const count = getOccurrence(value, scripts[script])\n\n      if (count > topCount) {\n        topCount = count\n        topScript = script\n      }\n    }\n  }\n\n  return [topScript, topCount]\n}\n\n/**\n * Get the occurrence ratio of `expression` for `value`.\n *\n * @param {string} value\n *   Value to check.\n * @param {RegExp} expression\n *   Code-point expression.\n * @return {number}\n *   Float between 0 and 1.\n */\nfunction getOccurrence(value, expression) {\n  const count = value.match(expression)\n\n  return (count ? count.length : 0) / value.length || 0\n}\n\n/**\n * Get the distance between an array of trigram—count\n * tuples, and multiple trigram dictionaries.\n *\n * @param {Array<TrigramTuple>} trigrams\n *   An array containing trigram—count tuples.\n * @param {Record<string, Record<string, number>>} languages\n *   Multiple trigrams to test against.\n * @param {Array<string>} only\n *   Allowed languages; if non-empty, only included languages are kept.\n * @param {Array<string>} ignore\n *   Disallowed languages; included languages are ignored.\n * @return {Array<TrigramTuple>} An array\n *   containing language—distance tuples.\n */\nfunction getDistances(trigrams, languages, only, ignore) {\n  languages = filterLanguages(languages, only, ignore)\n\n  /** @type {Array<TrigramTuple>} */\n  const distances = []\n  /** @type {string} */\n  let language\n\n  if (languages) {\n    for (language in languages) {\n      if (own.call(languages, language)) {\n        distances.push([language, getDistance(trigrams, languages[language])])\n      }\n    }\n  }\n\n  return distances.length === 0 ? und() : distances.sort(sort)\n}\n\n/**\n * Get the distance between an array of trigram—count\n * tuples, and a language dictionary.\n *\n * @param {Array<TrigramTuple>} trigrams\n *   An array containing trigram—count tuples.\n * @param {Record<string, number>} model\n *   Object containing weighted trigrams.\n * @return {number}\n *   The distance between the two.\n */\nfunction getDistance(trigrams, model) {\n  let distance = 0\n  let index = -1\n\n  while (++index < trigrams.length) {\n    const trigram = trigrams[index]\n    let difference = MAX_DIFFERENCE\n\n    if (trigram[0] in model) {\n      difference = trigram[1] - model[trigram[0]] - 1\n\n      if (difference < 0) {\n        difference = -difference\n      }\n    }\n\n    distance += difference\n  }\n\n  return distance\n}\n\n/**\n * Filter `languages` by removing languages in\n * `ignore`, or including languages in `only`.\n *\n * @param {Record<string, Record<string, number>>} languages\n *   Languages to filter\n * @param {Array<string>} only\n *   Allowed languages; if non-empty, only included languages are kept.\n * @param {Array<string>} ignore\n *   Disallowed languages; included languages are ignored.\n * @return {Record<string, Record<string, number>>}\n *   Filtered array of languages.\n */\nfunction filterLanguages(languages, only, ignore) {\n  if (only.length === 0 && ignore.length === 0) {\n    return languages\n  }\n\n  /** @type {Record<string, Record<string, number>>} */\n  const filteredLanguages = {}\n  /** @type {string} */\n  let language\n\n  for (language in languages) {\n    if (allow(language, only, ignore)) {\n      filteredLanguages[language] = languages[language]\n    }\n  }\n\n  return filteredLanguages\n}\n\n/**\n * Check if `language` can match according to settings.\n *\n * @param {string} language\n *   Languages to filter\n * @param {Array<string>} only\n *   Allowed languages; if non-empty, only included languages are kept.\n * @param {Array<string>} ignore\n *   Disallowed languages; included languages are ignored.\n * @return {boolean}\n *   Whether `language` can match\n */\nfunction allow(language, only, ignore) {\n  if (only.length === 0 && ignore.length === 0) {\n    return true\n  }\n\n  return (\n    (only.length === 0 || only.includes(language)) && !ignore.includes(language)\n  )\n}\n\n/**\n * Create a single `und` tuple.\n */\nfunction und() {\n  return singleLanguageTuples('und')\n}\n\n/**\n * Create a single tuple as a list of tuples from a given language code.\n *\n * @param {string} language\n * @returns {Array<TrigramTuple>}\n */\nfunction singleLanguageTuples(language) {\n  return [[language, 1]]\n}\n\n/**\n * Deep regular sort on the number at `1` in both objects.\n *\n * @param {TrigramTuple} a\n * @param {TrigramTuple} b\n */\nfunction sort(a, b) {\n  return a[1] - b[1]\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}