{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\swths\\\\OneDrive\\\\Documents\\\\youtube-transcriber\\\\youtube-transcriber\\\\client\\\\src\\\\components\\\\TranscriptForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TranscriptForm = () => {\n  _s();\n  const [url, setUrl] = useState('');\n  const [message, setMessage] = useState('');\n  const [transcript, setTranscript] = useState('');\n  const [isPaymentReady, setIsPaymentReady] = useState(false);\n  const handleUrlChange = e => {\n    setUrl(e.target.value);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setMessage('Processing...');\n    const videoId = extractVideoId(url);\n    console.log('Extracted videoId:', videoId);\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    try {\n      console.log('Fetching audio stream...');\n      const audioBuffer = await fetchAudioStream(videoId, audioContext);\n      console.log('Audio stream fetched, processing audio...');\n      const generatedTranscript = await processAudioStream(audioBuffer);\n      console.log('Audio processed, setting transcript...');\n      setTranscript(generatedTranscript);\n      setMessage('Transcript ready. Please make the payment to download.');\n      setIsPaymentReady(true);\n    } catch (error) {\n      console.error('Error during processing:', error.message);\n      setMessage('Error processing audio');\n    }\n  };\n  const extractVideoId = url => {\n    const urlObj = new URL(url);\n    const videoId = urlObj.searchParams.get('v') || urlObj.pathname.split('/').pop();\n    if (!videoId) {\n      throw new Error('Invalid YouTube URL');\n    }\n    return videoId;\n  };\n  const fetchAudioStream = async (videoId, audioContext) => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/get-audio-stream?videoId=${videoId}`, {\n        responseType: 'arraybuffer'\n      });\n      const audioBuffer = await audioContext.decodeAudioData(response.data);\n      return audioBuffer;\n    } catch (error) {\n      console.error('Error fetching audio stream:', error.message);\n      throw new Error('Error fetching audio stream');\n    }\n  };\n  const processAudioStream = async audioBuffer => {\n    return new Promise((resolve, reject) => {\n      const offlineAudioContext = new OfflineAudioContext(1, audioBuffer.length, audioBuffer.sampleRate);\n      const source = offlineAudioContext.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(offlineAudioContext.destination);\n      source.start(0);\n      offlineAudioContext.startRendering().then(renderedBuffer => {\n        const audioData = renderedBuffer.getChannelData(0);\n        const blob = new Blob([new DataView(audioData.buffer)], {\n          type: 'audio/wav'\n        });\n        const reader = new FileReader();\n        reader.onload = () => {\n          const arrayBuffer = reader.result;\n          const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n          audioContext.decodeAudioData(arrayBuffer, buffer => {\n            const source = audioContext.createBufferSource();\n            source.buffer = buffer;\n            const mediaStreamDestination = audioContext.createMediaStreamDestination();\n            source.connect(mediaStreamDestination);\n            source.start(0);\n            const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n            recognition.lang = 'en-US';\n            recognition.interimResults = false;\n            recognition.maxAlternatives = 1;\n            recognition.onresult = event => {\n              const transcript = event.results[0][0].transcript;\n              resolve(transcript);\n            };\n            recognition.onerror = event => {\n              console.error('Speech recognition error:', event.error);\n              reject(new Error('Speech recognition error'));\n            };\n            recognition.onend = () => {\n              console.warn('Speech recognition ended without results');\n              reject(new Error('Speech recognition ended without results'));\n            };\n            const mediaRecorder = new MediaRecorder(mediaStreamDestination.stream);\n            const chunks = [];\n            mediaRecorder.ondataavailable = e => {\n              chunks.push(e.data);\n            };\n            mediaRecorder.onstop = () => {\n              const blob = new Blob(chunks, {\n                type: 'audio/wav'\n              });\n              const audioUrl = URL.createObjectURL(blob);\n              const audio = new Audio(audioUrl);\n              audio.muted = true;\n              audio.oncanplaythrough = () => {\n                recognition.start();\n                audio.play();\n              };\n            };\n            mediaRecorder.start();\n            setTimeout(() => {\n              mediaRecorder.stop();\n              source.stop();\n            }, buffer.duration * 1000);\n          });\n        };\n        reader.onerror = error => {\n          console.error('Reader error:', error);\n          reject(new Error('Error reading audio data'));\n        };\n        reader.readAsArrayBuffer(blob);\n      }).catch(error => {\n        console.error('Rendering error:', error);\n        reject(new Error('Error rendering audio'));\n      });\n    });\n  };\n  const handlePaymentSuccess = () => {\n    setMessage('Payment successful. Download your transcript below.');\n    setIsPaymentReady(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"YouTube URL:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: url,\n          onChange: handleUrlChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Get Transcript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 25\n    }, this), isPaymentReady && /*#__PURE__*/_jsxDEV(PayPalScriptProvider, {\n      options: {\n        \"client-id\": \"YOUR_PAYPAL_CLIENT_ID\"\n      },\n      children: /*#__PURE__*/_jsxDEV(PayPalButtons, {\n        style: {\n          layout: 'vertical'\n        },\n        createOrder: (data, actions) => {\n          return actions.order.create({\n            purchase_units: [{\n              amount: {\n                value: \"5.00\" // Set the correct amount\n              }\n            }]\n          });\n        },\n        onApprove: (data, actions) => {\n          return actions.order.capture().then(handlePaymentSuccess);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }, this), message === 'Payment successful. Download your transcript below.' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`,\n        download: \"transcript.txt\",\n        children: \"Download Transcript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, this);\n};\n_s(TranscriptForm, \"c8lgiaYLKusQWv55oaXUHRdskxI=\");\n_c = TranscriptForm;\nexport default TranscriptForm;\nvar _c;\n$RefreshReg$(_c, \"TranscriptForm\");","map":{"version":3,"names":["React","useState","axios","PayPalButtons","PayPalScriptProvider","jsxDEV","_jsxDEV","TranscriptForm","_s","url","setUrl","message","setMessage","transcript","setTranscript","isPaymentReady","setIsPaymentReady","handleUrlChange","e","target","value","handleSubmit","preventDefault","videoId","extractVideoId","console","log","audioContext","window","AudioContext","webkitAudioContext","audioBuffer","fetchAudioStream","generatedTranscript","processAudioStream","error","urlObj","URL","searchParams","get","pathname","split","pop","Error","response","responseType","decodeAudioData","data","Promise","resolve","reject","offlineAudioContext","OfflineAudioContext","length","sampleRate","source","createBufferSource","buffer","connect","destination","start","startRendering","then","renderedBuffer","audioData","getChannelData","blob","Blob","DataView","type","reader","FileReader","onload","arrayBuffer","result","mediaStreamDestination","createMediaStreamDestination","recognition","SpeechRecognition","webkitSpeechRecognition","lang","interimResults","maxAlternatives","onresult","event","results","onerror","onend","warn","mediaRecorder","MediaRecorder","stream","chunks","ondataavailable","push","onstop","audioUrl","createObjectURL","audio","Audio","muted","oncanplaythrough","play","setTimeout","stop","duration","readAsArrayBuffer","catch","handlePaymentSuccess","children","onSubmit","onChange","required","fileName","_jsxFileName","lineNumber","columnNumber","options","style","layout","createOrder","actions","order","create","purchase_units","amount","onApprove","capture","href","encodeURIComponent","download","_c","$RefreshReg$"],"sources":["C:/Users/swths/OneDrive/Documents/youtube-transcriber/youtube-transcriber/client/src/components/TranscriptForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';\r\n\r\nconst TranscriptForm = () => {\r\n    const [url, setUrl] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [transcript, setTranscript] = useState('');\r\n    const [isPaymentReady, setIsPaymentReady] = useState(false);\r\n\r\n    const handleUrlChange = (e) => {\r\n        setUrl(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setMessage('Processing...');\r\n\r\n        const videoId = extractVideoId(url);\r\n        console.log('Extracted videoId:', videoId);\r\n\r\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n        try {\r\n            console.log('Fetching audio stream...');\r\n            const audioBuffer = await fetchAudioStream(videoId, audioContext);\r\n            console.log('Audio stream fetched, processing audio...');\r\n            const generatedTranscript = await processAudioStream(audioBuffer);\r\n            console.log('Audio processed, setting transcript...');\r\n            setTranscript(generatedTranscript);\r\n            setMessage('Transcript ready. Please make the payment to download.');\r\n            setIsPaymentReady(true);\r\n        } catch (error) {\r\n            console.error('Error during processing:', error.message);\r\n            setMessage('Error processing audio');\r\n        }\r\n    };\r\n\r\n    const extractVideoId = (url) => {\r\n        const urlObj = new URL(url);\r\n        const videoId = urlObj.searchParams.get('v') || urlObj.pathname.split('/').pop();\r\n        if (!videoId) {\r\n            throw new Error('Invalid YouTube URL');\r\n        }\r\n        return videoId;\r\n    };\r\n\r\n    const fetchAudioStream = async (videoId, audioContext) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:5000/api/get-audio-stream?videoId=${videoId}`, { responseType: 'arraybuffer' });\r\n            const audioBuffer = await audioContext.decodeAudioData(response.data);\r\n            return audioBuffer;\r\n        } catch (error) {\r\n            console.error('Error fetching audio stream:', error.message);\r\n            throw new Error('Error fetching audio stream');\r\n        }\r\n    };\r\n\r\n    const processAudioStream = async (audioBuffer) => {\r\n        return new Promise((resolve, reject) => {\r\n            const offlineAudioContext = new OfflineAudioContext(1, audioBuffer.length, audioBuffer.sampleRate);\r\n            const source = offlineAudioContext.createBufferSource();\r\n            source.buffer = audioBuffer;\r\n            source.connect(offlineAudioContext.destination);\r\n\r\n            source.start(0);\r\n            offlineAudioContext.startRendering().then((renderedBuffer) => {\r\n                const audioData = renderedBuffer.getChannelData(0);\r\n                const blob = new Blob([new DataView(audioData.buffer)], { type: 'audio/wav' });\r\n                const reader = new FileReader();\r\n\r\n                reader.onload = () => {\r\n                    const arrayBuffer = reader.result;\r\n                    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n                    audioContext.decodeAudioData(arrayBuffer, (buffer) => {\r\n                        const source = audioContext.createBufferSource();\r\n                        source.buffer = buffer;\r\n                        const mediaStreamDestination = audioContext.createMediaStreamDestination();\r\n                        source.connect(mediaStreamDestination);\r\n                        source.start(0);\r\n\r\n                        const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n                        recognition.lang = 'en-US';\r\n                        recognition.interimResults = false;\r\n                        recognition.maxAlternatives = 1;\r\n\r\n                        recognition.onresult = (event) => {\r\n                            const transcript = event.results[0][0].transcript;\r\n                            resolve(transcript);\r\n                        };\r\n\r\n                        recognition.onerror = (event) => {\r\n                            console.error('Speech recognition error:', event.error);\r\n                            reject(new Error('Speech recognition error'));\r\n                        };\r\n\r\n                        recognition.onend = () => {\r\n                            console.warn('Speech recognition ended without results');\r\n                            reject(new Error('Speech recognition ended without results'));\r\n                        };\r\n\r\n                        const mediaRecorder = new MediaRecorder(mediaStreamDestination.stream);\r\n                        const chunks = [];\r\n\r\n                        mediaRecorder.ondataavailable = (e) => {\r\n                            chunks.push(e.data);\r\n                        };\r\n\r\n                        mediaRecorder.onstop = () => {\r\n                            const blob = new Blob(chunks, { type: 'audio/wav' });\r\n                            const audioUrl = URL.createObjectURL(blob);\r\n                            const audio = new Audio(audioUrl);\r\n                            audio.muted = true;\r\n\r\n                            audio.oncanplaythrough = () => {\r\n                                recognition.start();\r\n                                audio.play();\r\n                            };\r\n                        };\r\n\r\n                        mediaRecorder.start();\r\n                        setTimeout(() => {\r\n                            mediaRecorder.stop();\r\n                            source.stop();\r\n                        }, buffer.duration * 1000);\r\n                    });\r\n                };\r\n                reader.onerror = (error) => {\r\n                    console.error('Reader error:', error);\r\n                    reject(new Error('Error reading audio data'));\r\n                };\r\n                reader.readAsArrayBuffer(blob);\r\n            }).catch((error) => {\r\n                console.error('Rendering error:', error);\r\n                reject(new Error('Error rendering audio'));\r\n            });\r\n        });\r\n    };\r\n\r\n    const handlePaymentSuccess = () => {\r\n        setMessage('Payment successful. Download your transcript below.');\r\n        setIsPaymentReady(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    YouTube URL:\r\n                    <input type=\"text\" value={url} onChange={handleUrlChange} required />\r\n                </label>\r\n                <button type=\"submit\">Get Transcript</button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n            {isPaymentReady && (\r\n                <PayPalScriptProvider options={{ \"client-id\": \"YOUR_PAYPAL_CLIENT_ID\" }}>\r\n                    <PayPalButtons\r\n                        style={{ layout: 'vertical' }}\r\n                        createOrder={(data, actions) => {\r\n                            return actions.order.create({\r\n                                purchase_units: [{\r\n                                    amount: {\r\n                                        value: \"5.00\" // Set the correct amount\r\n                                    }\r\n                                }]\r\n                            });\r\n                        }}\r\n                        onApprove={(data, actions) => {\r\n                            return actions.order.capture().then(handlePaymentSuccess);\r\n                        }}\r\n                    />\r\n                </PayPalScriptProvider>\r\n            )}\r\n            {message === 'Payment successful. Download your transcript below.' && (\r\n                <div>\r\n                    <p>{transcript}</p>\r\n                    <a\r\n                        href={`data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`}\r\n                        download=\"transcript.txt\"\r\n                    >\r\n                        Download Transcript\r\n                    </a>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TranscriptForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}