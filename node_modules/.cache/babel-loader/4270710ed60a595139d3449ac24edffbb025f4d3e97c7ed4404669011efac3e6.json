{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\swths\\\\OneDrive\\\\Documents\\\\youtube-transcriber\\\\youtube-transcriber\\\\client\\\\src\\\\components\\\\TranscriptForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';\nimport { franc } from 'franc';\nimport './TranscriptForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TranscriptForm = () => {\n  _s();\n  const [url, setUrl] = useState('');\n  const [message, setMessage] = useState('');\n  const [transcript, setTranscript] = useState('');\n  const [isPaymentReady, setIsPaymentReady] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [isNonEnglish, setIsNonEnglish] = useState(false);\n  const [translate, setTranslate] = useState(false);\n  const [translationError, setTranslationError] = useState(false);\n  const [paymentError, setPaymentError] = useState(false);\n  const handleUrlChange = e => {\n    setUrl(e.target.value);\n  };\n  const handleTranslateChange = async e => {\n    const isChecked = e.target.checked;\n    setTranslate(isChecked);\n    console.log('Translate checkbox changed:', isChecked);\n    if (isNonEnglish && transcript) {\n      if (isChecked) {\n        try {\n          setMessage('Translating transcript...');\n          const translatedTranscript = await translateTranscript(transcript);\n          setTranscript(translatedTranscript);\n          setMessage('Translation complete. Please make the payment to download.');\n        } catch (error) {\n          setMessage('Error translating transcript. You were not charged.');\n        }\n      } else {\n        setMessage('Transcript available. This video is in a non-English language. You can get the transcript in the original language or translated to English for an extra fee.');\n      }\n    } else if (isNonEnglish && !transcript) {\n      try {\n        setMessage('Processing...');\n        const audioBuffer = await fetchAudioStream(videoId);\n        const generatedTranscript = await processAudioBuffer(audioBuffer, isChecked);\n        setTranscript(generatedTranscript);\n        setIsPaymentReady(true);\n        if (isChecked) {\n          const translatedTranscript = await translateTranscript(generatedTranscript);\n          setTranscript(translatedTranscript);\n          setMessage('Translation complete. Please make the payment to download.');\n        } else {\n          setMessage('Transcript available. This video is in a non-English language. You can get the transcript in the original language or translated to English for an extra fee.');\n        }\n      } catch (error) {\n        setMessage(error.message);\n      }\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setMessage('Processing...');\n    setLoading(true);\n    setIsNonEnglish(false);\n    try {\n      const videoId = extractVideoId(url);\n      const audioBuffer = await fetchAudioStream(videoId);\n      const generatedTranscript = await transcribeWithWhisper(audioBuffer);\n      console.log('Generated Transcript:', generatedTranscript);\n      const language = detectLanguage(generatedTranscript);\n      if (language !== 'en') {\n        setIsNonEnglish(true);\n        setMessage('Transcript available. This video is in a non-English language. You can get the transcript in the original language or translated to English for an extra fee.');\n        setTranscript(generatedTranscript);\n        setIsPaymentReady(true);\n      } else {\n        setMessage('Transcript available. Please make the payment to download.');\n        setTranscript(generatedTranscript);\n        setIsPaymentReady(true);\n      }\n    } catch (error) {\n      setMessage(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const extractVideoId = url => {\n    try {\n      const urlObj = new URL(url);\n      const videoId = urlObj.searchParams.get('v') || urlObj.pathname.split('/').pop();\n      if (!videoId) {\n        throw new Error('Invalid YouTube URL');\n      }\n      return videoId;\n    } catch (error) {\n      throw new Error('Invalid URL format');\n    }\n  };\n  const fetchAudioStream = async videoId => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/get-audio-stream?videoId=${videoId}`, {\n        responseType: 'arraybuffer'\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error('Error fetching audio stream');\n    }\n  };\n  const processAudioBuffer = async (audioBuffer, translate) => {\n    const formData = new FormData();\n    formData.append('audio', new Blob([audioBuffer], {\n      type: 'audio/wav'\n    }));\n    formData.append('translate', translate ? 'true' : 'false');\n    console.log('Sending form data with translate flag:', translate);\n    const response = await axios.post('http://localhost:5000/api/transcribe', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.transcript;\n  };\n  const detectLanguage = text => {\n    const langCode = franc(text);\n    const lang = iso6393to1[langCode] || 'unknown';\n    return lang;\n  };\n  const iso6393to1 = {\n    'eng': 'en',\n    'spa': 'es',\n    'fra': 'fr'\n  };\n  const handlePaymentSuccess = async () => {\n    console.log('Translate flag at payment success:', translate);\n    if (isNonEnglish && translate) {\n      try {\n        const translatedTranscript = await translateTranscript(transcript);\n        setTranscript(translatedTranscript);\n        setMessage('Payment successful. Download your transcript below.');\n        setIsPaymentReady(false);\n        localStorage.setItem('transcript', translatedTranscript);\n      } catch (error) {\n        setMessage('Error translating transcript. You were not charged.');\n      }\n    } else {\n      setMessage('Payment successful. Download your transcript below.');\n      setIsPaymentReady(false);\n      localStorage.setItem('transcript', transcript);\n    }\n  };\n  const translateTranscript = async text => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/translate', {\n        text,\n        translate: 'true'\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data.translatedText;\n    } catch (error) {\n      throw new Error('Error translating transcript');\n    }\n  };\n  const handlePaymentError = () => {\n    setMessage('An error occurred during payment. You were not charged.');\n  };\n  const handleGoBack = () => {\n    setUrl('');\n    setMessage('');\n    setTranscript('');\n    setIsPaymentReady(false);\n    setLoading(false);\n    setIsNonEnglish(false);\n    setTranslate(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"YouTube URL:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: url,\n          onChange: handleUrlChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this), isNonEnglish && /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Translate to English:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: translate,\n          onChange: handleTranslateChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? 'Processing...' : 'Get Transcript'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 25\n    }, this), isPaymentReady && /*#__PURE__*/_jsxDEV(PayPalScriptProvider, {\n      options: {\n        \"client-id\": process.env.REACT_APP_PAYPAL_CLIENT_ID\n      },\n      children: /*#__PURE__*/_jsxDEV(PayPalButtons, {\n        style: {\n          layout: 'vertical'\n        },\n        createOrder: (data, actions) => {\n          const amount = isNonEnglish ? \"7.00\" : \"5.00\";\n          return actions.order.create({\n            purchase_units: [{\n              amount: {\n                value: amount\n              }\n            }]\n          });\n        },\n        onApprove: (data, actions) => {\n          return actions.order.capture().then(handlePaymentSuccess).catch(handlePaymentError);\n        },\n        onError: handlePaymentError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }, this), (paymentError || translationError) && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGoBack,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 17\n    }, this), message === 'Payment successful. Download your transcript below.' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"download-button\",\n        href: `data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`,\n        download: \"transcript.txt\",\n        children: \"Download Transcript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGoBack,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 9\n  }, this);\n};\n_s(TranscriptForm, \"nlFDCz1h+9tY5BvJeAnqGPpVxhA=\");\n_c = TranscriptForm;\nexport default TranscriptForm;\nvar _c;\n$RefreshReg$(_c, \"TranscriptForm\");","map":{"version":3,"names":["React","useState","axios","PayPalButtons","PayPalScriptProvider","franc","jsxDEV","_jsxDEV","TranscriptForm","_s","url","setUrl","message","setMessage","transcript","setTranscript","isPaymentReady","setIsPaymentReady","loading","setLoading","isNonEnglish","setIsNonEnglish","translate","setTranslate","translationError","setTranslationError","paymentError","setPaymentError","handleUrlChange","e","target","value","handleTranslateChange","isChecked","checked","console","log","translatedTranscript","translateTranscript","error","audioBuffer","fetchAudioStream","videoId","generatedTranscript","processAudioBuffer","handleSubmit","preventDefault","extractVideoId","transcribeWithWhisper","language","detectLanguage","urlObj","URL","searchParams","get","pathname","split","pop","Error","response","responseType","data","formData","FormData","append","Blob","type","post","headers","text","langCode","lang","iso6393to1","handlePaymentSuccess","localStorage","setItem","translatedText","handlePaymentError","handleGoBack","children","onSubmit","onChange","required","fileName","_jsxFileName","lineNumber","columnNumber","disabled","options","process","env","REACT_APP_PAYPAL_CLIENT_ID","style","layout","createOrder","actions","amount","order","create","purchase_units","onApprove","capture","then","catch","onError","onClick","className","href","encodeURIComponent","download","_c","$RefreshReg$"],"sources":["C:/Users/swths/OneDrive/Documents/youtube-transcriber/youtube-transcriber/client/src/components/TranscriptForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';\r\nimport { franc } from 'franc';\r\nimport './TranscriptForm.css';\r\n\r\nconst TranscriptForm = () => {\r\n    const [url, setUrl] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [transcript, setTranscript] = useState('');\r\n    const [isPaymentReady, setIsPaymentReady] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [isNonEnglish, setIsNonEnglish] = useState(false);\r\n    const [translate, setTranslate] = useState(false);\r\n    const [translationError, setTranslationError] = useState(false);\r\n    const [paymentError, setPaymentError] = useState(false);\r\n\r\n    const handleUrlChange = (e) => {\r\n        setUrl(e.target.value);\r\n    };\r\n\r\n    const handleTranslateChange = async (e) => {\r\n        const isChecked = e.target.checked;\r\n        setTranslate(isChecked);\r\n        console.log('Translate checkbox changed:', isChecked);\r\n    \r\n        if (isNonEnglish && transcript) {\r\n            if (isChecked) {\r\n                try {\r\n                    setMessage('Translating transcript...');\r\n                    const translatedTranscript = await translateTranscript(transcript);\r\n                    setTranscript(translatedTranscript);\r\n                    setMessage('Translation complete. Please make the payment to download.');\r\n                } catch (error) {\r\n                    setMessage('Error translating transcript. You were not charged.');\r\n                }\r\n            } else {\r\n                setMessage('Transcript available. This video is in a non-English language. You can get the transcript in the original language or translated to English for an extra fee.');\r\n            }\r\n        } else if (isNonEnglish && !transcript) {\r\n            try {\r\n                setMessage('Processing...');\r\n                const audioBuffer = await fetchAudioStream(videoId);\r\n                const generatedTranscript = await processAudioBuffer(audioBuffer, isChecked);\r\n                setTranscript(generatedTranscript);\r\n                setIsPaymentReady(true);\r\n                if (isChecked) {\r\n                    const translatedTranscript = await translateTranscript(generatedTranscript);\r\n                    setTranscript(translatedTranscript);\r\n                    setMessage('Translation complete. Please make the payment to download.');\r\n                } else {\r\n                    setMessage('Transcript available. This video is in a non-English language. You can get the transcript in the original language or translated to English for an extra fee.');\r\n                }\r\n            } catch (error) {\r\n                setMessage(error.message);\r\n            }\r\n        }\r\n    };    \r\n            \r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setMessage('Processing...');\r\n        setLoading(true);\r\n        setIsNonEnglish(false);\r\n    \r\n        try {\r\n            const videoId = extractVideoId(url);\r\n            const audioBuffer = await fetchAudioStream(videoId);\r\n            const generatedTranscript = await transcribeWithWhisper(audioBuffer);\r\n    \r\n            console.log('Generated Transcript:', generatedTranscript);\r\n    \r\n            const language = detectLanguage(generatedTranscript);\r\n            if (language !== 'en') {\r\n                setIsNonEnglish(true);\r\n                setMessage('Transcript available. This video is in a non-English language. You can get the transcript in the original language or translated to English for an extra fee.');\r\n                setTranscript(generatedTranscript);\r\n                setIsPaymentReady(true);\r\n            } else {\r\n                setMessage('Transcript available. Please make the payment to download.');\r\n                setTranscript(generatedTranscript);\r\n                setIsPaymentReady(true);\r\n            }\r\n        } catch (error) {\r\n            setMessage(error.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };    \r\n                        \r\n\r\n    const extractVideoId = (url) => {\r\n        try {\r\n            const urlObj = new URL(url);\r\n            const videoId = urlObj.searchParams.get('v') || urlObj.pathname.split('/').pop();\r\n            if (!videoId) {\r\n                throw new Error('Invalid YouTube URL');\r\n            }\r\n            return videoId;\r\n        } catch (error) {\r\n            throw new Error('Invalid URL format');\r\n        }\r\n    };\r\n\r\n    const fetchAudioStream = async (videoId) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:5000/api/get-audio-stream?videoId=${videoId}`, { responseType: 'arraybuffer' });\r\n            return response.data;\r\n        } catch (error) {\r\n            throw new Error('Error fetching audio stream');\r\n        }\r\n    };\r\n\r\n    const processAudioBuffer = async (audioBuffer, translate) => {\r\n        const formData = new FormData();\r\n        formData.append('audio', new Blob([audioBuffer], { type: 'audio/wav' }));\r\n        formData.append('translate', translate ? 'true' : 'false');\r\n    \r\n        console.log('Sending form data with translate flag:', translate);\r\n    \r\n        const response = await axios.post('http://localhost:5000/api/transcribe', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n        });\r\n    \r\n        return response.data.transcript;\r\n    };\r\n    \r\n\r\n    const detectLanguage = (text) => {\r\n        const langCode = franc(text);\r\n        const lang = iso6393to1[langCode] || 'unknown';\r\n        return lang;\r\n    };\r\n\r\n    const iso6393to1 = {\r\n        'eng': 'en',\r\n        'spa': 'es',\r\n        'fra': 'fr',\r\n    };\r\n\r\n    const handlePaymentSuccess = async () => {\r\n        console.log('Translate flag at payment success:', translate);\r\n        if (isNonEnglish && translate) {\r\n            try {\r\n                const translatedTranscript = await translateTranscript(transcript);\r\n                setTranscript(translatedTranscript);\r\n                setMessage('Payment successful. Download your transcript below.');\r\n                setIsPaymentReady(false);\r\n                localStorage.setItem('transcript', translatedTranscript);\r\n            } catch (error) {\r\n                setMessage('Error translating transcript. You were not charged.');\r\n            }\r\n        } else {\r\n            setMessage('Payment successful. Download your transcript below.');\r\n            setIsPaymentReady(false);\r\n            localStorage.setItem('transcript', transcript);\r\n        }\r\n    };\r\n\r\n    const translateTranscript = async (text) => {\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/api/translate', { text, translate: 'true' }, {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            return response.data.translatedText;\r\n        } catch (error) {\r\n            throw new Error('Error translating transcript');\r\n        }\r\n    };\r\n\r\n    const handlePaymentError = () => {\r\n        setMessage('An error occurred during payment. You were not charged.');\r\n    };\r\n\r\n    const handleGoBack = () => {\r\n        setUrl('');\r\n        setMessage('');\r\n        setTranscript('');\r\n        setIsPaymentReady(false);\r\n        setLoading(false);\r\n        setIsNonEnglish(false);\r\n        setTranslate(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    YouTube URL:\r\n                    <input type=\"text\" value={url} onChange={handleUrlChange} required />\r\n                </label>\r\n                {isNonEnglish && (\r\n                    <label>\r\n                        Translate to English:\r\n                        <input type=\"checkbox\" checked={translate} onChange={handleTranslateChange} />\r\n                    </label>\r\n                )}\r\n                <button type=\"submit\" disabled={loading}>\r\n                    {loading ? 'Processing...' : 'Get Transcript'}\r\n                </button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n            {isPaymentReady && (\r\n                <PayPalScriptProvider options={{ \"client-id\": process.env.REACT_APP_PAYPAL_CLIENT_ID }}>\r\n                    <PayPalButtons\r\n                        style={{ layout: 'vertical' }}\r\n                        createOrder={(data, actions) => {\r\n                            const amount = isNonEnglish ? \"7.00\" : \"5.00\";\r\n                            return actions.order.create({\r\n                                purchase_units: [{\r\n                                    amount: {\r\n                                        value: amount\r\n                                    }\r\n                                }]\r\n                            });\r\n                        }}\r\n                        onApprove={(data, actions) => {\r\n                            return actions.order.capture().then(handlePaymentSuccess).catch(handlePaymentError);\r\n                        }}\r\n                        onError={handlePaymentError}\r\n                    />\r\n                </PayPalScriptProvider>\r\n            )}\r\n            {(paymentError || translationError) && (\r\n                <div>\r\n                    <p>{message}</p>\r\n                    <button onClick={handleGoBack}>Go Back</button>\r\n                </div>\r\n            )}\r\n            {message === 'Payment successful. Download your transcript below.' && (\r\n                <div>\r\n                    <a\r\n                        className=\"download-button\"\r\n                        href={`data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`}\r\n                        download=\"transcript.txt\"\r\n                    >\r\n                        Download Transcript\r\n                    </a>\r\n                    <button onClick={handleGoBack}>Go Back</button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TranscriptForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}