{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\swths\\\\OneDrive\\\\Documents\\\\youtube-transcriber\\\\youtube-transcriber\\\\client\\\\src\\\\components\\\\TranscriptForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { PayPalButton } from 'react-paypal-button-v2';\nimport * as tf from '@tensorflow/tfjs';\nimport * as speechCommands from '@tensorflow-models/speech-commands';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TranscriptForm = () => {\n  _s();\n  const [url, setUrl] = useState('');\n  const [message, setMessage] = useState('');\n  const [transcript, setTranscript] = useState('');\n  const [isPaymentReady, setIsPaymentReady] = useState(false);\n  const handleUrlChange = e => {\n    setUrl(e.target.value);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setMessage('Processing...');\n    const videoId = extractVideoId(url);\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    try {\n      const audioBuffer = await fetchAudioStream(videoId, audioContext);\n      const generatedTranscript = await processAudioStream(audioBuffer);\n      setTranscript(generatedTranscript);\n      setMessage('Transcript ready. Please make the payment to download.');\n      setIsPaymentReady(true);\n    } catch (error) {\n      setMessage('Error processing audio');\n    }\n  };\n  const extractVideoId = url => {\n    const urlObj = new URL(url);\n    return urlObj.searchParams.get('v');\n  };\n  const fetchAudioStream = async (videoId, audioContext) => {\n    const response = await axios.get(`/api/get-audio-stream?videoId=${videoId}`, {\n      responseType: 'arraybuffer'\n    });\n    const audioBuffer = await audioContext.decodeAudioData(response.data);\n    return audioBuffer;\n  };\n  const processAudioStream = async audioBuffer => {\n    const recognizer = speechCommands.create('BROWSER_FFT');\n    await recognizer.ensureModelLoaded();\n    const float32Array = audioBuffer.getChannelData(0);\n    const inputTensor = tf.tensor(float32Array, [1, float32Array.length]);\n    const result = await recognizer.recognize(inputTensor);\n    return result.words;\n  };\n  const handlePaymentSuccess = () => {\n    setMessage('Payment successful. Download your transcript below.');\n    setIsPaymentReady(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"YouTube URL:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: url,\n          onChange: handleUrlChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Get Transcript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 25\n    }, this), isPaymentReady && /*#__PURE__*/_jsxDEV(PayPalButton, {\n      amount: \"5.00\",\n      onSuccess: handlePaymentSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this), message === 'Payment successful. Download your transcript below.' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`,\n        download: \"transcript.txt\",\n        children: \"Download Transcript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(TranscriptForm, \"c8lgiaYLKusQWv55oaXUHRdskxI=\");\n_c = TranscriptForm;\nexport default TranscriptForm;\nvar _c;\n$RefreshReg$(_c, \"TranscriptForm\");","map":{"version":3,"names":["React","useState","axios","PayPalButton","tf","speechCommands","jsxDEV","_jsxDEV","TranscriptForm","_s","url","setUrl","message","setMessage","transcript","setTranscript","isPaymentReady","setIsPaymentReady","handleUrlChange","e","target","value","handleSubmit","preventDefault","videoId","extractVideoId","audioContext","window","AudioContext","webkitAudioContext","audioBuffer","fetchAudioStream","generatedTranscript","processAudioStream","error","urlObj","URL","searchParams","get","response","responseType","decodeAudioData","data","recognizer","create","ensureModelLoaded","float32Array","getChannelData","inputTensor","tensor","length","result","recognize","words","handlePaymentSuccess","children","onSubmit","type","onChange","required","fileName","_jsxFileName","lineNumber","columnNumber","amount","onSuccess","href","encodeURIComponent","download","_c","$RefreshReg$"],"sources":["C:/Users/swths/OneDrive/Documents/youtube-transcriber/youtube-transcriber/client/src/components/TranscriptForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { PayPalButton } from 'react-paypal-button-v2';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport * as speechCommands from '@tensorflow-models/speech-commands';\r\n\r\nconst TranscriptForm = () => {\r\n    const [url, setUrl] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [transcript, setTranscript] = useState('');\r\n    const [isPaymentReady, setIsPaymentReady] = useState(false);\r\n\r\n    const handleUrlChange = (e) => {\r\n        setUrl(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setMessage('Processing...');\r\n\r\n        const videoId = extractVideoId(url);\r\n\r\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n        try {\r\n            const audioBuffer = await fetchAudioStream(videoId, audioContext);\r\n            const generatedTranscript = await processAudioStream(audioBuffer);\r\n            setTranscript(generatedTranscript);\r\n            setMessage('Transcript ready. Please make the payment to download.');\r\n            setIsPaymentReady(true);\r\n        } catch (error) {\r\n            setMessage('Error processing audio');\r\n        }\r\n    };\r\n\r\n    const extractVideoId = (url) => {\r\n        const urlObj = new URL(url);\r\n        return urlObj.searchParams.get('v');\r\n    };\r\n\r\n    const fetchAudioStream = async (videoId, audioContext) => {\r\n        const response = await axios.get(`/api/get-audio-stream?videoId=${videoId}`, { responseType: 'arraybuffer' });\r\n        const audioBuffer = await audioContext.decodeAudioData(response.data);\r\n        return audioBuffer;\r\n    };\r\n\r\n    const processAudioStream = async (audioBuffer) => {\r\n        const recognizer = speechCommands.create('BROWSER_FFT');\r\n        await recognizer.ensureModelLoaded();\r\n\r\n        const float32Array = audioBuffer.getChannelData(0);\r\n        const inputTensor = tf.tensor(float32Array, [1, float32Array.length]);\r\n\r\n        const result = await recognizer.recognize(inputTensor);\r\n        return result.words;\r\n    };\r\n\r\n    const handlePaymentSuccess = () => {\r\n        setMessage('Payment successful. Download your transcript below.');\r\n        setIsPaymentReady(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    YouTube URL:\r\n                    <input type=\"text\" value={url} onChange={handleUrlChange} required />\r\n                </label>\r\n                <button type=\"submit\">Get Transcript</button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n            {isPaymentReady && (\r\n                <PayPalButton\r\n                    amount=\"5.00\"\r\n                    onSuccess={handlePaymentSuccess}\r\n                />\r\n            )}\r\n            {message === 'Payment successful. Download your transcript below.' && (\r\n                <div>\r\n                    <p>{transcript}</p>\r\n                    <a\r\n                        href={`data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`}\r\n                        download=\"transcript.txt\"\r\n                    >\r\n                        Download Transcript\r\n                    </a>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TranscriptForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}