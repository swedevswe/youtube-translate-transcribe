{"ast":null,"code":"const hasApostrophe = /['‘’‛‵′`´]/;\n\n// normal regexes\nconst doRegs = function (str, regs) {\n  for (let i = 0; i < regs.length; i += 1) {\n    if (regs[i][0].test(str) === true) {\n      return regs[i];\n    }\n  }\n  return null;\n};\n// suffix-regexes, indexed by last-character\nconst doEndsWith = function () {\n  let str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let byEnd = arguments.length > 1 ? arguments[1] : undefined;\n  let char = str[str.length - 1];\n  if (byEnd.hasOwnProperty(char) === true) {\n    let regs = byEnd[char] || [];\n    for (let r = 0; r < regs.length; r += 1) {\n      if (regs[r][0].test(str) === true) {\n        return regs[r];\n      }\n    }\n  }\n  return null;\n};\nconst checkRegex = function (terms, i, model, world) {\n  const setTag = world.methods.one.setTag;\n  let {\n    regexText,\n    regexNormal,\n    regexNumbers,\n    endsWith\n  } = model.two;\n  let term = terms[i];\n  let normal = term.machine || term.normal;\n  let text = term.text;\n  // keep dangling apostrophe?\n  if (hasApostrophe.test(term.post) && !hasApostrophe.test(term.pre)) {\n    text += term.post.trim();\n  }\n  let arr = doRegs(text, regexText) || doRegs(normal, regexNormal);\n  // hide a bunch of number regexes behind this one\n  if (!arr && /[0-9]/.test(normal)) {\n    arr = doRegs(normal, regexNumbers);\n  }\n  // only run endsWith if we're desperate\n  if (!arr && term.tags.size === 0) {\n    arr = doEndsWith(normal, endsWith);\n  }\n  if (arr) {\n    // console.log(arr)\n    setTag([term], arr[1], world, null, \"2-regex-'\".concat(arr[2] || arr[0], \"'\"));\n    term.confidence = 0.6;\n    return true;\n  }\n  return null;\n};\nexport default checkRegex;","map":{"version":3,"names":["hasApostrophe","doRegs","str","regs","i","length","test","doEndsWith","arguments","undefined","byEnd","char","hasOwnProperty","r","checkRegex","terms","model","world","setTag","methods","one","regexText","regexNormal","regexNumbers","endsWith","two","term","normal","machine","text","post","pre","trim","arr","tags","size","concat","confidence"],"sources":["C:/Users/swths/node_modules/compromise/src/2-two/preTagger/compute/tagger/2nd-pass/03-regex.js"],"sourcesContent":["const hasApostrophe = /['‘’‛‵′`´]/\n\n// normal regexes\nconst doRegs = function (str, regs) {\n  for (let i = 0; i < regs.length; i += 1) {\n    if (regs[i][0].test(str) === true) {\n      return regs[i]\n    }\n  }\n  return null\n}\n// suffix-regexes, indexed by last-character\nconst doEndsWith = function (str = '', byEnd) {\n  let char = str[str.length - 1]\n  if (byEnd.hasOwnProperty(char) === true) {\n    let regs = byEnd[char] || []\n    for (let r = 0; r < regs.length; r += 1) {\n      if (regs[r][0].test(str) === true) {\n        return regs[r]\n      }\n    }\n  }\n  return null\n}\n\nconst checkRegex = function (terms, i, model, world) {\n  const setTag = world.methods.one.setTag\n  let { regexText, regexNormal, regexNumbers, endsWith } = model.two\n  let term = terms[i]\n  let normal = term.machine || term.normal\n  let text = term.text\n  // keep dangling apostrophe?\n  if (hasApostrophe.test(term.post) && !hasApostrophe.test(term.pre)) {\n    text += term.post.trim()\n  }\n  let arr = doRegs(text, regexText) || doRegs(normal, regexNormal)\n  // hide a bunch of number regexes behind this one\n  if (!arr && /[0-9]/.test(normal)) {\n    arr = doRegs(normal, regexNumbers)\n  }\n  // only run endsWith if we're desperate\n  if (!arr && term.tags.size === 0) {\n    arr = doEndsWith(normal, endsWith)\n  }\n  if (arr) {\n    // console.log(arr)\n    setTag([term], arr[1], world, null, `2-regex-'${arr[2] || arr[0]}'`)\n    term.confidence = 0.6\n    return true\n  }\n  return null\n}\nexport default checkRegex\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}