{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\swths\\\\OneDrive\\\\Documents\\\\youtube-transcriber\\\\youtube-transcriber\\\\client\\\\src\\\\components\\\\TranscriptForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';\nimport { franc } from 'franc';\nimport './TranscriptForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TranscriptForm = () => {\n  _s();\n  const [url, setUrl] = useState('');\n  const [message, setMessage] = useState('');\n  const [transcript, setTranscript] = useState('');\n  const [isPaymentReady, setIsPaymentReady] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [isNonEnglish, setIsNonEnglish] = useState(false);\n  const [translate, setTranslate] = useState(false);\n  const [translationError, setTranslationError] = useState(false);\n  const [paymentError, setPaymentError] = useState(false);\n  const [showGetTranscriptButton, setShowGetTranscriptButton] = useState(true);\n  const handleUrlChange = e => {\n    setUrl(e.target.value);\n  };\n  const handleTranslateChange = async e => {\n    const isChecked = e.target.checked;\n    const message = `Transcript available. This video is in a non-English language. \\nYou can get the transcript in the original language \\nor translated to English for an extra fee.`;\n    const messageSentences = message.split('\\n');\n    setTranslate(isChecked);\n    console.log('Translate checkbox changed:', isChecked);\n    if (isChecked && isNonEnglish && transcript) {\n      try {\n        setMessage( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-container\",\n          children: \"Translating transcript...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 24\n        }, this));\n        const translatedTranscript = await translateTranscript(transcript);\n        setTranscript(translatedTranscript);\n        setMessage( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-container\",\n          children: \"Translation complete. Please make the payment to download.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 24\n        }, this));\n      } catch (error) {\n        setMessage( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-container\",\n          children: \"Error translating transcript. You were not charged.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 24\n        }, this));\n      }\n    } else if (!isChecked && isNonEnglish) {\n      setMessage( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-container\",\n        children: messageSentences.map((sentence, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: sentence\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this));\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setIsNonEnglish(false);\n    try {\n      const videoId = extractVideoId(url);\n      const audioBuffer = await fetchAudioStream(videoId);\n      const generatedTranscript = await processAudioBuffer(audioBuffer, translate);\n      const message = `Transcript available. This video is in a non-English language. \\nYou can get the transcript in the original language \\nor translated to English for an extra fee.`;\n      const messageSentences = message.split('\\n');\n      const language = detectLanguage(generatedTranscript);\n      if (language !== 'en') {\n        setIsNonEnglish(true);\n        setMessage( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-container\",\n          children: messageSentences.map((sentence, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: sentence\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this));\n      } else {\n        setMessage( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-container\",\n          children: \"Transcript available. Please make the payment to download.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 24\n        }, this));\n      }\n      setTranscript(generatedTranscript);\n      setIsPaymentReady(true);\n    } catch (error) {\n      setMessage( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-container\",\n        children: error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 22\n      }, this));\n    } finally {\n      setLoading(false);\n      setShowGetTranscriptButton(false);\n    }\n  };\n  const extractVideoId = url => {\n    try {\n      const urlObj = new URL(url);\n      const videoId = urlObj.searchParams.get('v') || urlObj.pathname.split('/').pop();\n      if (!videoId) {\n        throw new Error('Invalid YouTube URL');\n      }\n      return videoId;\n    } catch (error) {\n      throw new Error('Invalid URL format');\n    }\n  };\n  const fetchAudioStream = async videoId => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/get-audio-stream?videoId=${videoId}`, {\n        responseType: 'arraybuffer'\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error('Error fetching audio stream');\n    }\n  };\n  const processAudioBuffer = async (audioBuffer, translate) => {\n    const formData = new FormData();\n    formData.append('audio', new Blob([audioBuffer], {\n      type: 'audio/wav'\n    }));\n    formData.append('translate', translate ? 'true' : 'false');\n    console.log('Sending form data with translate flag:', translate);\n    const response = await axios.post('http://localhost:5000/transcribe', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.transcript;\n  };\n  const detectLanguage = text => {\n    const langCode = franc(text);\n    const lang = iso6393to1[langCode] || 'unknown';\n    return lang;\n  };\n  const iso6393to1 = {\n    'eng': 'en',\n    'spa': 'es',\n    'fra': 'fr'\n  };\n  const handlePaymentSuccess = async () => {\n    console.log('Translate flag at payment success:', translate);\n    if (isNonEnglish && translate) {\n      try {\n        const translatedTranscript = await translateTranscript(transcript);\n        setTranscript(translatedTranscript);\n        setMessage('Payment successful. Download your transcript below.');\n        setIsPaymentReady(false);\n        localStorage.setItem('transcript', translatedTranscript);\n      } catch (error) {\n        setMessage('Error translating transcript. You were not charged.');\n      }\n    } else {\n      setMessage('Payment successful. Download your transcript below.');\n      setIsPaymentReady(false);\n      localStorage.setItem('transcript', transcript);\n    }\n  };\n  const translateTranscript = async text => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/translate', {\n        text,\n        translate: 'true'\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data.translatedText;\n    } catch (error) {\n      throw new Error('Error translating transcript');\n    }\n  };\n  const handlePaymentError = () => {\n    setMessage('An error occurred during payment. You were not charged.');\n  };\n  const handleGoBack = () => {\n    setUrl('');\n    setMessage('');\n    setTranscript('');\n    setIsPaymentReady(false);\n    setLoading(false);\n    setIsNonEnglish(false);\n    setTranslate(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transcript-form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"YouTube Transcriber\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Please enter the YouTube URL:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: url,\n            onChange: handleUrlChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this), showGetTranscriptButton && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: loading,\n          children: loading ? 'Processing...Please wait..' : 'Get Transcript'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }, this), isNonEnglish && /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Translate to English:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: translate,\n            onChange: handleTranslateChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 29\n      }, this), isPaymentReady && /*#__PURE__*/_jsxDEV(PayPalScriptProvider, {\n        options: {\n          \"client-id\": process.env.REACT_APP_PAYPAL_CLIENT_ID\n        },\n        children: /*#__PURE__*/_jsxDEV(PayPalButtons, {\n          style: {\n            layout: 'vertical'\n          },\n          createOrder: (data, actions) => {\n            const amount = isNonEnglish ? \"6.00\" : \"4.00\";\n            return actions.order.create({\n              purchase_units: [{\n                amount: {\n                  value: amount\n                }\n              }]\n            });\n          },\n          onApprove: (data, actions) => {\n            return actions.order.capture().then(handlePaymentSuccess).catch(handlePaymentError);\n          },\n          onError: handlePaymentError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }, this), (paymentError || translationError) && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleGoBack,\n          children: \"Go Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 21\n      }, this), message === 'Payment successful. Download your transcript below.' && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"download-button\",\n          href: `data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`,\n          download: \"transcript.txt\",\n          children: \"Download Transcript\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"go-back-button\",\n          onClick: handleGoBack,\n          children: \"Go Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 9\n  }, this);\n};\n_s(TranscriptForm, \"E1Dz+29Gwe0n+at73TceyLo7xp4=\");\n_c = TranscriptForm;\nexport default TranscriptForm;\nvar _c;\n$RefreshReg$(_c, \"TranscriptForm\");","map":{"version":3,"names":["React","useState","axios","PayPalButtons","PayPalScriptProvider","franc","jsxDEV","_jsxDEV","TranscriptForm","_s","url","setUrl","message","setMessage","transcript","setTranscript","isPaymentReady","setIsPaymentReady","loading","setLoading","isNonEnglish","setIsNonEnglish","translate","setTranslate","translationError","setTranslationError","paymentError","setPaymentError","showGetTranscriptButton","setShowGetTranscriptButton","handleUrlChange","e","target","value","handleTranslateChange","isChecked","checked","messageSentences","split","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","translatedTranscript","translateTranscript","error","map","sentence","index","handleSubmit","preventDefault","videoId","extractVideoId","audioBuffer","fetchAudioStream","generatedTranscript","processAudioBuffer","language","detectLanguage","urlObj","URL","searchParams","get","pathname","pop","Error","response","responseType","data","formData","FormData","append","Blob","type","post","headers","text","langCode","lang","iso6393to1","handlePaymentSuccess","localStorage","setItem","translatedText","handlePaymentError","handleGoBack","onSubmit","onChange","required","disabled","options","process","env","REACT_APP_PAYPAL_CLIENT_ID","style","layout","createOrder","actions","amount","order","create","purchase_units","onApprove","capture","then","catch","onError","onClick","href","encodeURIComponent","download","_c","$RefreshReg$"],"sources":["C:/Users/swths/OneDrive/Documents/youtube-transcriber/youtube-transcriber/client/src/components/TranscriptForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';\r\nimport { franc } from 'franc';\r\nimport './TranscriptForm.css';\r\nconst TranscriptForm = () => {\r\n    const [url, setUrl] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [transcript, setTranscript] = useState('');\r\n    const [isPaymentReady, setIsPaymentReady] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [isNonEnglish, setIsNonEnglish] = useState(false);\r\n    const [translate, setTranslate] = useState(false);\r\n    const [translationError, setTranslationError] = useState(false);\r\n    const [paymentError, setPaymentError] = useState(false);\r\n    const [showGetTranscriptButton, setShowGetTranscriptButton] = useState(true);\r\n\r\n    const handleUrlChange = (e) => {\r\n        setUrl(e.target.value);\r\n    };\r\n    const handleTranslateChange = async (e) => {\r\n        const isChecked = e.target.checked;\r\n        const message = `Transcript available. This video is in a non-English language. \\nYou can get the transcript in the original language \\nor translated to English for an extra fee.`;\r\n        const messageSentences = message.split('\\n');\r\n        setTranslate(isChecked);\r\n        console.log('Translate checkbox changed:', isChecked);\r\n        if (isChecked && isNonEnglish && transcript) {\r\n          try {\r\n            setMessage(<div className=\"message-container\">Translating transcript...</div>);\r\n            const translatedTranscript = await translateTranscript(transcript);\r\n            setTranscript(translatedTranscript);\r\n            setMessage(<div className=\"message-container\">Translation complete. Please make the payment to download.</div>);\r\n          } catch (error) {\r\n            setMessage(<div className=\"message-container\">Error translating transcript. You were not charged.</div>);\r\n          }\r\n        } else if (!isChecked && isNonEnglish) {\r\n          setMessage(\r\n            <div className=\"message-container\">\r\n              {messageSentences.map((sentence, index) => (\r\n                <p key={index}>{sentence}</p>\r\n              ))}\r\n            </div>\r\n          );\r\n        }\r\n      };\r\n      \r\n      const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        setIsNonEnglish(false);\r\n      \r\n        try {\r\n          const videoId = extractVideoId(url);\r\n          const audioBuffer = await fetchAudioStream(videoId);\r\n          const generatedTranscript = await processAudioBuffer(audioBuffer, translate);\r\n      \r\n          const message = `Transcript available. This video is in a non-English language. \\nYou can get the transcript in the original language \\nor translated to English for an extra fee.`;\r\n          const messageSentences = message.split('\\n');\r\n          const language = detectLanguage(generatedTranscript);\r\n          if (language !== 'en') {\r\n            setIsNonEnglish(true);\r\n            setMessage(\r\n              <div className=\"message-container\">\r\n                {messageSentences.map((sentence, index) => (\r\n                  <p key={index}>{sentence}</p>\r\n                ))}\r\n              </div>\r\n            );\r\n          } else {\r\n            setMessage(<div className=\"message-container\">Transcript available. Please make the payment to download.</div>);\r\n          }\r\n      \r\n          setTranscript(generatedTranscript);\r\n          setIsPaymentReady(true);\r\n        } catch (error) {\r\n          setMessage(<div className=\"message-container\">{error.message}</div>);\r\n        } finally {\r\n          setLoading(false);\r\n          setShowGetTranscriptButton(false);\r\n        }\r\n      };    \r\n                        \r\n    const extractVideoId = (url) => {\r\n        try {\r\n            const urlObj = new URL(url);\r\n            const videoId = urlObj.searchParams.get('v') || urlObj.pathname.split('/').pop();\r\n            if (!videoId) {\r\n                throw new Error('Invalid YouTube URL');\r\n            }\r\n            return videoId;\r\n        } catch (error) {\r\n            throw new Error('Invalid URL format');\r\n        }\r\n    };\r\n    const fetchAudioStream = async (videoId) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:5000/api/get-audio-stream?videoId=${videoId}`, { responseType: 'arraybuffer' });\r\n            return response.data;\r\n        } catch (error) {\r\n            throw new Error('Error fetching audio stream');\r\n        }\r\n    };\r\n    const processAudioBuffer = async (audioBuffer, translate) => {\r\n        const formData = new FormData();\r\n        formData.append('audio', new Blob([audioBuffer], { type: 'audio/wav' }));\r\n        formData.append('translate', translate ? 'true' : 'false');\r\n    \r\n        console.log('Sending form data with translate flag:', translate);\r\n    \r\n        const response = await axios.post('http://localhost:5000/transcribe', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n        });\r\n    \r\n        return response.data.transcript;\r\n    };\r\n    \r\n    const detectLanguage = (text) => {\r\n        const langCode = franc(text);\r\n        const lang = iso6393to1[langCode] || 'unknown';\r\n        return lang;\r\n    };\r\n    const iso6393to1 = {\r\n        'eng': 'en',\r\n        'spa': 'es',\r\n        'fra': 'fr',\r\n    };\r\n    const handlePaymentSuccess = async () => {\r\n        console.log('Translate flag at payment success:', translate);\r\n        if (isNonEnglish && translate) {\r\n            try {\r\n                const translatedTranscript = await translateTranscript(transcript);\r\n                setTranscript(translatedTranscript);\r\n                setMessage('Payment successful. Download your transcript below.');\r\n                setIsPaymentReady(false);\r\n                localStorage.setItem('transcript', translatedTranscript);\r\n            } catch (error) {\r\n                setMessage('Error translating transcript. You were not charged.');\r\n            }\r\n        } else {\r\n            setMessage('Payment successful. Download your transcript below.');\r\n            setIsPaymentReady(false);\r\n            localStorage.setItem('transcript', transcript);\r\n        }\r\n    };\r\n    const translateTranscript = async (text) => {\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/api/translate', { text, translate: 'true' }, {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            return response.data.translatedText;\r\n        } catch (error) {\r\n            throw new Error('Error translating transcript');\r\n        }\r\n    };\r\n    const handlePaymentError = () => {\r\n        setMessage('An error occurred during payment. You were not charged.');\r\n    };\r\n    const handleGoBack = () => {\r\n        setUrl('');\r\n        setMessage('');\r\n        setTranscript('');\r\n        setIsPaymentReady(false);\r\n        setLoading(false);\r\n        setIsNonEnglish(false);\r\n        setTranslate(false);\r\n    };\r\n    return (\r\n        <div className=\"background\">\r\n            <div className=\"transcript-form-container\">\r\n            <h1>YouTube Transcriber</h1>\r\n                <form onSubmit={handleSubmit}>\r\n                    <label>\r\n                        Please enter the YouTube URL:\r\n                        <input type=\"text\" value={url} onChange={handleUrlChange} required />\r\n                    </label>\r\n                    {showGetTranscriptButton && (\r\n                        <button type=\"submit\" disabled={loading}>\r\n                        {loading ? 'Processing...Please wait..' : 'Get Transcript'}\r\n                    </button>\r\n                    )}\r\n                    {isNonEnglish && (\r\n                        <label>\r\n                            Translate to English:\r\n                            <input type=\"checkbox\" checked={translate} onChange={handleTranslateChange} />\r\n                        </label>\r\n                    )}\r\n                </form>\r\n                {message && <p>{message}</p>}\r\n                {isPaymentReady && (\r\n                    <PayPalScriptProvider options={{ \"client-id\": process.env.REACT_APP_PAYPAL_CLIENT_ID }}>\r\n                        <PayPalButtons\r\n                            style={{ layout: 'vertical' }}\r\n                            createOrder={(data, actions) => {\r\n                                const amount = isNonEnglish ? \"6.00\" : \"4.00\";\r\n                                return actions.order.create({\r\n                                    purchase_units: [{\r\n                                        amount: {\r\n                                            value: amount\r\n                                        }\r\n                                    }]\r\n                                });\r\n                            }}\r\n                            onApprove={(data, actions) => {\r\n                                return actions.order.capture().then(handlePaymentSuccess).catch(handlePaymentError);\r\n                            }}\r\n                            onError={handlePaymentError}\r\n                        />\r\n                    </PayPalScriptProvider>\r\n                )}\r\n                {(paymentError || translationError) && (\r\n                    <div>\r\n                        <p>{message}</p>\r\n                        <button onClick={handleGoBack}>Go Back</button>\r\n                    </div>\r\n                )}\r\n                {message === 'Payment successful. Download your transcript below.' && (\r\n                    <div>\r\n                        <a\r\n                            className=\"download-button\"\r\n                            href={`data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`}\r\n                            download=\"transcript.txt\"\r\n                        >\r\n                            Download Transcript\r\n                        </a>\r\n                        <button className=\"go-back-button\" onClick={handleGoBack}>Go Back</button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default TranscriptForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}