{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\swths\\\\OneDrive\\\\Documents\\\\youtube-transcriber\\\\youtube-transcriber\\\\client\\\\src\\\\components\\\\TranscriptForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';\nimport nlp from 'compromise';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TranscriptForm = () => {\n  _s();\n  const [url, setUrl] = useState('');\n  const [message, setMessage] = useState('');\n  const [transcript, setTranscript] = useState('');\n  const [isPaymentReady, setIsPaymentReady] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [isNonEnglish, setIsNonEnglish] = useState(false);\n  const [translate, setTranslate] = useState(false);\n  const handleUrlChange = e => {\n    setUrl(e.target.value);\n  };\n  const handleTranslateChange = e => {\n    setTranslate(e.target.checked);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setMessage('Processing...');\n    setLoading(true);\n    setIsNonEnglish(false);\n    try {\n      const videoId = extractVideoId(url);\n      console.log('Extracted video ID:', videoId);\n      const audioBuffer = await fetchAudioStream(videoId);\n      console.log('Fetched audio buffer');\n      const generatedTranscript = await processAudioBuffer(audioBuffer);\n      console.log('Generated transcript:', generatedTranscript);\n      const language = detectLanguage(generatedTranscript);\n      console.log('Detected language:', language);\n      if (language !== 'en') {\n        setIsNonEnglish(true);\n        setMessage('Transcript available. This video is in a non-English language. You can get the transcript in the original language or translated to English for an extra fee.');\n      } else {\n        setMessage('Transcript available. Please make the payment to download.');\n      }\n      setTranscript(generatedTranscript);\n      setIsPaymentReady(true);\n    } catch (error) {\n      setMessage(error.message);\n      console.error('Error during processing:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const extractVideoId = url => {\n    try {\n      const urlObj = new URL(url);\n      const videoId = urlObj.searchParams.get('v') || urlObj.pathname.split('/').pop();\n      if (!videoId) {\n        throw new Error('Invalid YouTube URL');\n      }\n      return videoId;\n    } catch (error) {\n      throw new Error('Invalid URL format');\n    }\n  };\n  const fetchAudioStream = async videoId => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/get-audio-stream?videoId=${videoId}`, {\n        responseType: 'arraybuffer'\n      });\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const audioBuffer = await audioContext.decodeAudioData(response.data);\n      return audioBuffer;\n    } catch (error) {\n      throw new Error('Error fetching audio stream');\n    }\n  };\n  const processAudioBuffer = async audioBuffer => {\n    return new Promise((resolve, reject) => {\n      const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n      recognition.lang = 'en-US';\n      recognition.interimResults = false;\n      recognition.maxAlternatives = 1;\n      recognition.onresult = event => {\n        const transcript = event.results[0][0].transcript;\n        resolve(transcript);\n      };\n      recognition.onerror = event => {\n        reject(new Error('Speech recognition error: ' + event.error));\n      };\n      recognition.onend = () => {\n        reject(new Error('Speech recognition ended without results'));\n      };\n      const offlineContext = new OfflineAudioContext(1, audioBuffer.length, audioBuffer.sampleRate);\n      const source = offlineContext.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(offlineContext.destination);\n      source.start();\n      offlineContext.startRendering().then(renderedBuffer => {\n        const wavBuffer = audioBufferToWav(renderedBuffer);\n        const audioBlob = new Blob([new DataView(wavBuffer)], {\n          type: 'audio/wav'\n        });\n        const audioUrl = URL.createObjectURL(audioBlob);\n        const audio = new Audio(audioUrl);\n        audio.oncanplaythrough = () => {\n          recognition.start();\n        };\n        audio.onended = () => {\n          recognition.stop();\n        };\n        audio.play();\n      }).catch(error => {\n        reject(new Error('Offline rendering error: ' + error));\n      });\n    });\n  };\n  const audioBufferToWav = buffer => {\n    const numOfChan = buffer.numberOfChannels,\n      length = buffer.length * numOfChan * 2 + 44,\n      bufferArray = new ArrayBuffer(length),\n      view = new DataView(bufferArray),\n      channels = [],\n      sampleRate = buffer.sampleRate;\n    let offset = 0,\n      pos = 0;\n    setUint32(0x46464952); // \"RIFF\"\n    setUint32(length - 8); // file length - 8\n    setUint32(0x45564157); // \"WAVE\"\n\n    setUint32(0x20746d66); // \"fmt \" chunk\n    setUint32(16); // length = 16\n    setUint16(1); // PCM (uncompressed)\n    setUint16(numOfChan);\n    setUint32(sampleRate);\n    setUint32(sampleRate * 2 * numOfChan); // avg. bytes/sec\n    setUint16(numOfChan * 2); // block-align\n    setUint16(16); // 16-bit (hardcoded in this demo)\n\n    setUint32(0x61746164); // \"data\" - chunk\n    setUint32(length - pos - 4); // chunk length\n\n    // write interleaved data\n    for (let i = 0; i < buffer.length; i++) {\n      for (let channel = 0; channel < numOfChan; channel++) {\n        let sample = buffer.getChannelData(channel)[i];\n        // clamp value to range\n        if (sample < -1) sample = -1;else if (sample > 1) sample = 1;\n        sample = sample < 0 ? sample * 0x8000 : sample * 0x7FFF; // scale to 16-bit signed int\n        view.setInt16(pos, sample, true); // write 16-bit sample\n        pos += 2;\n      }\n    }\n    function setUint16(data) {\n      view.setUint16(pos, data, true);\n      pos += 2;\n    }\n    function setUint32(data) {\n      view.setUint32(pos, data, true);\n      pos += 4;\n    }\n    return bufferArray;\n  };\n  const detectLanguage = text => {\n    const doc = nlp(text);\n    const lang = doc.language();\n    return lang.iso639_1 || 'en'; // Default to 'en' if language is not detected\n  };\n  const translateTranscript = async text => {\n    try {\n      const response = await axios.post(`http://localhost:5000/api/translate`, {\n        text\n      });\n      return response.data.translatedText;\n    } catch (error) {\n      throw new Error('Error translating transcript');\n    }\n  };\n  const handlePaymentSuccess = async () => {\n    if (isNonEnglish && translate) {\n      try {\n        const translatedTranscript = await translateTranscript(transcript);\n        setTranscript(translatedTranscript);\n      } catch (error) {\n        setMessage('Error translating transcript');\n        return;\n      }\n    }\n    setMessage('Payment successful. Download your transcript below.');\n    setIsPaymentReady(false);\n    // Save transcript to localStorage\n    localStorage.setItem('transcript', transcript);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"YouTube URL:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: url,\n          onChange: handleUrlChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this), isNonEnglish && /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Translate to English:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: translate,\n          onChange: handleTranslateChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? 'Processing...' : 'Get Transcript'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 25\n    }, this), isPaymentReady && /*#__PURE__*/_jsxDEV(PayPalScriptProvider, {\n      options: {\n        \"client-id\": process.env.REACT_APP_PAYPAL_CLIENT_ID\n      },\n      children: /*#__PURE__*/_jsxDEV(PayPalButtons, {\n        style: {\n          layout: 'vertical'\n        },\n        createOrder: (data, actions) => {\n          const amount = isNonEnglish ? \"7.00\" : \"5.00\";\n          return actions.order.create({\n            purchase_units: [{\n              amount: {\n                value: amount\n              }\n            }]\n          });\n        },\n        onApprove: (data, actions) => {\n          return actions.order.capture().then(handlePaymentSuccess);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 17\n    }, this), message === 'Payment successful. Download your transcript below.' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`,\n        download: \"transcript.txt\",\n        children: \"Download Transcript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 9\n  }, this);\n};\n_s(TranscriptForm, \"gxyp6IIWUpwHiXcQoxt4QftuyAQ=\");\n_c = TranscriptForm;\nexport default TranscriptForm;\nvar _c;\n$RefreshReg$(_c, \"TranscriptForm\");","map":{"version":3,"names":["React","useState","axios","PayPalButtons","PayPalScriptProvider","nlp","jsxDEV","_jsxDEV","TranscriptForm","_s","url","setUrl","message","setMessage","transcript","setTranscript","isPaymentReady","setIsPaymentReady","loading","setLoading","isNonEnglish","setIsNonEnglish","translate","setTranslate","handleUrlChange","e","target","value","handleTranslateChange","checked","handleSubmit","preventDefault","videoId","extractVideoId","console","log","audioBuffer","fetchAudioStream","generatedTranscript","processAudioBuffer","language","detectLanguage","error","urlObj","URL","searchParams","get","pathname","split","pop","Error","response","responseType","audioContext","window","AudioContext","webkitAudioContext","decodeAudioData","data","Promise","resolve","reject","recognition","SpeechRecognition","webkitSpeechRecognition","lang","interimResults","maxAlternatives","onresult","event","results","onerror","onend","offlineContext","OfflineAudioContext","length","sampleRate","source","createBufferSource","buffer","connect","destination","start","startRendering","then","renderedBuffer","wavBuffer","audioBufferToWav","audioBlob","Blob","DataView","type","audioUrl","createObjectURL","audio","Audio","oncanplaythrough","onended","stop","play","catch","numOfChan","numberOfChannels","bufferArray","ArrayBuffer","view","channels","offset","pos","setUint32","setUint16","i","channel","sample","getChannelData","setInt16","text","doc","iso639_1","translateTranscript","post","translatedText","handlePaymentSuccess","translatedTranscript","localStorage","setItem","children","onSubmit","onChange","required","fileName","_jsxFileName","lineNumber","columnNumber","disabled","options","process","env","REACT_APP_PAYPAL_CLIENT_ID","style","layout","createOrder","actions","amount","order","create","purchase_units","onApprove","capture","href","encodeURIComponent","download","_c","$RefreshReg$"],"sources":["C:/Users/swths/OneDrive/Documents/youtube-transcriber/youtube-transcriber/client/src/components/TranscriptForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';\r\nimport nlp from 'compromise';\r\n\r\nconst TranscriptForm = () => {\r\n    const [url, setUrl] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [transcript, setTranscript] = useState('');\r\n    const [isPaymentReady, setIsPaymentReady] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [isNonEnglish, setIsNonEnglish] = useState(false);\r\n    const [translate, setTranslate] = useState(false);\r\n\r\n    const handleUrlChange = (e) => {\r\n        setUrl(e.target.value);\r\n    };\r\n\r\n    const handleTranslateChange = (e) => {\r\n        setTranslate(e.target.checked);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setMessage('Processing...');\r\n        setLoading(true);\r\n        setIsNonEnglish(false);\r\n\r\n        try {\r\n            const videoId = extractVideoId(url);\r\n            console.log('Extracted video ID:', videoId);\r\n            const audioBuffer = await fetchAudioStream(videoId);\r\n            console.log('Fetched audio buffer');\r\n            const generatedTranscript = await processAudioBuffer(audioBuffer);\r\n            console.log('Generated transcript:', generatedTranscript);\r\n\r\n            const language = detectLanguage(generatedTranscript);\r\n            console.log('Detected language:', language);\r\n\r\n            if (language !== 'en') {\r\n                setIsNonEnglish(true);\r\n                setMessage('Transcript available. This video is in a non-English language. You can get the transcript in the original language or translated to English for an extra fee.');\r\n            } else {\r\n                setMessage('Transcript available. Please make the payment to download.');\r\n            }\r\n\r\n            setTranscript(generatedTranscript);\r\n            setIsPaymentReady(true);\r\n        } catch (error) {\r\n            setMessage(error.message);\r\n            console.error('Error during processing:', error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const extractVideoId = (url) => {\r\n        try {\r\n            const urlObj = new URL(url);\r\n            const videoId = urlObj.searchParams.get('v') || urlObj.pathname.split('/').pop();\r\n            if (!videoId) {\r\n                throw new Error('Invalid YouTube URL');\r\n            }\r\n            return videoId;\r\n        } catch (error) {\r\n            throw new Error('Invalid URL format');\r\n        }\r\n    };\r\n\r\n    const fetchAudioStream = async (videoId) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:5000/api/get-audio-stream?videoId=${videoId}`, { responseType: 'arraybuffer' });\r\n            const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n            const audioBuffer = await audioContext.decodeAudioData(response.data);\r\n            return audioBuffer;\r\n        } catch (error) {\r\n            throw new Error('Error fetching audio stream');\r\n        }\r\n    };\r\n\r\n    const processAudioBuffer = async (audioBuffer) => {\r\n        return new Promise((resolve, reject) => {\r\n            const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n            recognition.lang = 'en-US';\r\n            recognition.interimResults = false;\r\n            recognition.maxAlternatives = 1;\r\n    \r\n            recognition.onresult = (event) => {\r\n                const transcript = event.results[0][0].transcript;\r\n                resolve(transcript);\r\n            };\r\n    \r\n            recognition.onerror = (event) => {\r\n                reject(new Error('Speech recognition error: ' + event.error));\r\n            };\r\n    \r\n            recognition.onend = () => {\r\n                reject(new Error('Speech recognition ended without results'));\r\n            };\r\n    \r\n            const offlineContext = new OfflineAudioContext(1, audioBuffer.length, audioBuffer.sampleRate);\r\n            const source = offlineContext.createBufferSource();\r\n            source.buffer = audioBuffer;\r\n            source.connect(offlineContext.destination);\r\n            source.start();\r\n    \r\n            offlineContext.startRendering().then((renderedBuffer) => {\r\n                const wavBuffer = audioBufferToWav(renderedBuffer);\r\n                const audioBlob = new Blob([new DataView(wavBuffer)], { type: 'audio/wav' });\r\n                const audioUrl = URL.createObjectURL(audioBlob);\r\n                const audio = new Audio(audioUrl);\r\n    \r\n                audio.oncanplaythrough = () => {\r\n                    recognition.start();\r\n                };\r\n    \r\n                audio.onended = () => {\r\n                    recognition.stop();\r\n                };\r\n    \r\n                audio.play();\r\n            }).catch((error) => {\r\n                reject(new Error('Offline rendering error: ' + error));\r\n            });\r\n        });\r\n    };\r\n    \r\n    const audioBufferToWav = (buffer) => {\r\n        const numOfChan = buffer.numberOfChannels,\r\n              length = buffer.length * numOfChan * 2 + 44,\r\n              bufferArray = new ArrayBuffer(length),\r\n              view = new DataView(bufferArray),\r\n              channels = [],\r\n              sampleRate = buffer.sampleRate;\r\n        let offset = 0,\r\n            pos = 0;\r\n    \r\n        setUint32(0x46464952); // \"RIFF\"\r\n        setUint32(length - 8); // file length - 8\r\n        setUint32(0x45564157); // \"WAVE\"\r\n    \r\n        setUint32(0x20746d66); // \"fmt \" chunk\r\n        setUint32(16); // length = 16\r\n        setUint16(1); // PCM (uncompressed)\r\n        setUint16(numOfChan);\r\n        setUint32(sampleRate);\r\n        setUint32(sampleRate * 2 * numOfChan); // avg. bytes/sec\r\n        setUint16(numOfChan * 2); // block-align\r\n        setUint16(16); // 16-bit (hardcoded in this demo)\r\n    \r\n        setUint32(0x61746164); // \"data\" - chunk\r\n        setUint32(length - pos - 4); // chunk length\r\n    \r\n        // write interleaved data\r\n        for (let i = 0; i < buffer.length; i++) {\r\n            for (let channel = 0; channel < numOfChan; channel++) {\r\n                let sample = buffer.getChannelData(channel)[i];\r\n                // clamp value to range\r\n                if (sample < -1) sample = -1;\r\n                else if (sample > 1) sample = 1;\r\n                sample = sample < 0 ? sample * 0x8000 : sample * 0x7FFF; // scale to 16-bit signed int\r\n                view.setInt16(pos, sample, true); // write 16-bit sample\r\n                pos += 2;\r\n            }\r\n        }\r\n    \r\n        function setUint16(data) {\r\n            view.setUint16(pos, data, true);\r\n            pos += 2;\r\n        }\r\n    \r\n        function setUint32(data) {\r\n            view.setUint32(pos, data, true);\r\n            pos += 4;\r\n        }\r\n    \r\n        return bufferArray;\r\n    };\r\n    \r\n    \r\n    \r\n    const detectLanguage = (text) => {\r\n        const doc = nlp(text);\r\n        const lang = doc.language();\r\n        return lang.iso639_1 || 'en'; // Default to 'en' if language is not detected\r\n    };\r\n\r\n    const translateTranscript = async (text) => {\r\n        try {\r\n            const response = await axios.post(`http://localhost:5000/api/translate`, { text });\r\n            return response.data.translatedText;\r\n        } catch (error) {\r\n            throw new Error('Error translating transcript');\r\n        }\r\n    };\r\n\r\n    const handlePaymentSuccess = async () => {\r\n        if (isNonEnglish && translate) {\r\n            try {\r\n                const translatedTranscript = await translateTranscript(transcript);\r\n                setTranscript(translatedTranscript);\r\n            } catch (error) {\r\n                setMessage('Error translating transcript');\r\n                return;\r\n            }\r\n        }\r\n        setMessage('Payment successful. Download your transcript below.');\r\n        setIsPaymentReady(false);\r\n        // Save transcript to localStorage\r\n        localStorage.setItem('transcript', transcript);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    YouTube URL:\r\n                    <input type=\"text\" value={url} onChange={handleUrlChange} required />\r\n                </label>\r\n                {isNonEnglish && (\r\n                    <label>\r\n                        Translate to English:\r\n                        <input type=\"checkbox\" checked={translate} onChange={handleTranslateChange} />\r\n                    </label>\r\n                )}\r\n                <button type=\"submit\" disabled={loading}>\r\n                    {loading ? 'Processing...' : 'Get Transcript'}\r\n                </button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n            {isPaymentReady && (\r\n                <PayPalScriptProvider options={{ \"client-id\": process.env.REACT_APP_PAYPAL_CLIENT_ID }}>\r\n                    <PayPalButtons\r\n                        style={{ layout: 'vertical' }}\r\n                        createOrder={(data, actions) => {\r\n                            const amount = isNonEnglish ? \"7.00\" : \"5.00\";\r\n                            return actions.order.create({\r\n                                purchase_units: [{\r\n                                    amount: {\r\n                                        value: amount\r\n                                    }\r\n                                }]\r\n                            });\r\n                        }}\r\n                        onApprove={(data, actions) => {\r\n                            return actions.order.capture().then(handlePaymentSuccess);\r\n                        }}\r\n                    />\r\n                </PayPalScriptProvider>\r\n            )}\r\n            {message === 'Payment successful. Download your transcript below.' && (\r\n                <div>\r\n                    <p>{transcript}</p>\r\n                    <a\r\n                        href={`data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`}\r\n                        download=\"transcript.txt\"\r\n                    >\r\n                        Download Transcript\r\n                    </a>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TranscriptForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}