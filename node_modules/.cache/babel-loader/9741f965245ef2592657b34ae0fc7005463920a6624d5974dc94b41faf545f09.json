{"ast":null,"code":"import React,{useState}from'react';import axios from'axios';import{PayPalButtons,PayPalScriptProvider}from'@paypal/react-paypal-js';import compromise from'compromise';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TranscriptForm=()=>{const[url,setUrl]=useState('');const[message,setMessage]=useState('');const[transcript,setTranscript]=useState('');const[isPaymentReady,setIsPaymentReady]=useState(false);const[loading,setLoading]=useState(false);const[isNonEnglish,setIsNonEnglish]=useState(false);const[translate,setTranslate]=useState(false);const handleUrlChange=e=>{setUrl(e.target.value);};const handleTranslateChange=e=>{setTranslate(e.target.checked);};const handleSubmit=async e=>{e.preventDefault();setMessage('Processing...');setLoading(true);setIsNonEnglish(false);try{const videoId=extractVideoId(url);const audioBuffer=await fetchAudioStream(videoId);const generatedTranscript=await processAudioBuffer(audioBuffer);const language=detectLanguage(generatedTranscript);if(language!=='en'){setIsNonEnglish(true);setMessage('Transcript available. This video is in a non-English language. You can get the transcript in the original language or translated to English for an extra fee.');}else{setMessage('Transcript available. Please make the payment to download.');}setTranscript(generatedTranscript);setIsPaymentReady(true);}catch(error){setMessage(error.message);}finally{setLoading(false);}};const extractVideoId=url=>{try{const urlObj=new URL(url);const videoId=urlObj.searchParams.get('v')||urlObj.pathname.split('/').pop();if(!videoId){throw new Error('Invalid YouTube URL');}return videoId;}catch(error){throw new Error('Invalid URL format');}};const fetchAudioStream=async videoId=>{try{const response=await axios.get(\"http://localhost:5000/api/get-audio-stream?videoId=\".concat(videoId),{responseType:'arraybuffer'});const audioContext=new(window.AudioContext||window.webkitAudioContext)();const audioBuffer=await audioContext.decodeAudioData(response.data);return audioBuffer;}catch(error){throw new Error('Error fetching audio stream');}};const processAudioBuffer=async audioBuffer=>{return new Promise((resolve,reject)=>{const recognition=new(window.SpeechRecognition||window.webkitSpeechRecognition)();recognition.lang='en-US';recognition.interimResults=false;recognition.maxAlternatives=1;recognition.onresult=event=>{const transcript=event.results[0][0].transcript;resolve(transcript);};recognition.onerror=event=>{reject(new Error('Speech recognition error'));};recognition.onend=()=>{reject(new Error('Speech recognition ended without results'));};// Create an offline audio context to process the audio buffer\nconst offlineContext=new OfflineAudioContext(1,audioBuffer.length,audioBuffer.sampleRate);const source=offlineContext.createBufferSource();source.buffer=audioBuffer;source.connect(offlineContext.destination);source.start();offlineContext.startRendering().then(renderedBuffer=>{const audioData=renderedBuffer.getChannelData(0);const audioBlob=new Blob([audioData.buffer],{type:'audio/wav'});const audioUrl=URL.createObjectURL(audioBlob);const audio=new Audio(audioUrl);audio.muted=true;audio.oncanplaythrough=()=>{recognition.start();audio.play();};audio.onended=()=>{resolve('Transcript processing complete');};}).catch(error=>{reject(new Error('Offline rendering error'));});});};const detectLanguage=text=>{const doc=compromise(text);const lang=doc.language();return lang.iso639_1||'en';// Default to 'en' if language is not detected\n};const translateTranscript=async text=>{try{const response=await axios.post(\"http://localhost:5000/api/translate\",{text});return response.data.translatedText;}catch(error){throw new Error('Error translating transcript');}};const handlePaymentSuccess=async()=>{if(isNonEnglish&&translate){try{const translatedTranscript=await translateTranscript(transcript);setTranscript(translatedTranscript);}catch(error){setMessage('Error translating transcript');return;}}setMessage('Payment successful. Download your transcript below.');setIsPaymentReady(false);// Save transcript to localStorage\nlocalStorage.setItem('transcript',transcript);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"YouTube Transcriber\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"YouTube URL:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:url,onChange:handleUrlChange,required:true})]}),isNonEnglish&&/*#__PURE__*/_jsxs(\"label\",{children:[\"Translate to English:\",/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:translate,onChange:handleTranslateChange})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:loading,children:loading?'Processing...':'Get Transcript'})]}),message&&/*#__PURE__*/_jsx(\"p\",{children:message}),isPaymentReady&&/*#__PURE__*/_jsx(PayPalScriptProvider,{options:{\"client-id\":process.env.REACT_APP_PAYPAL_CLIENT_ID},children:/*#__PURE__*/_jsx(PayPalButtons,{style:{layout:'vertical'},createOrder:(data,actions)=>{const amount=isNonEnglish?\"7.00\":\"5.00\";return actions.order.create({purchase_units:[{amount:{value:amount}}]});},onApprove:(data,actions)=>{return actions.order.capture().then(handlePaymentSuccess);}})}),message==='Payment successful. Download your transcript below.'&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:transcript}),/*#__PURE__*/_jsx(\"a\",{href:\"data:text/plain;charset=utf-8,\".concat(encodeURIComponent(transcript)),download:\"transcript.txt\",children:\"Download Transcript\"})]})]});};export default TranscriptForm;","map":{"version":3,"names":["React","useState","axios","PayPalButtons","PayPalScriptProvider","compromise","jsx","_jsx","jsxs","_jsxs","TranscriptForm","url","setUrl","message","setMessage","transcript","setTranscript","isPaymentReady","setIsPaymentReady","loading","setLoading","isNonEnglish","setIsNonEnglish","translate","setTranslate","handleUrlChange","e","target","value","handleTranslateChange","checked","handleSubmit","preventDefault","videoId","extractVideoId","audioBuffer","fetchAudioStream","generatedTranscript","processAudioBuffer","language","detectLanguage","error","urlObj","URL","searchParams","get","pathname","split","pop","Error","response","concat","responseType","audioContext","window","AudioContext","webkitAudioContext","decodeAudioData","data","Promise","resolve","reject","recognition","SpeechRecognition","webkitSpeechRecognition","lang","interimResults","maxAlternatives","onresult","event","results","onerror","onend","offlineContext","OfflineAudioContext","length","sampleRate","source","createBufferSource","buffer","connect","destination","start","startRendering","then","renderedBuffer","audioData","getChannelData","audioBlob","Blob","type","audioUrl","createObjectURL","audio","Audio","muted","oncanplaythrough","play","onended","catch","text","doc","iso639_1","translateTranscript","post","translatedText","handlePaymentSuccess","translatedTranscript","localStorage","setItem","children","onSubmit","onChange","required","disabled","options","process","env","REACT_APP_PAYPAL_CLIENT_ID","style","layout","createOrder","actions","amount","order","create","purchase_units","onApprove","capture","href","encodeURIComponent","download"],"sources":["C:/Users/swths/OneDrive/Documents/youtube-transcriber/youtube-transcriber/client/src/components/TranscriptForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';\r\nimport compromise from 'compromise';\r\n\r\nconst TranscriptForm = () => {\r\n    const [url, setUrl] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [transcript, setTranscript] = useState('');\r\n    const [isPaymentReady, setIsPaymentReady] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [isNonEnglish, setIsNonEnglish] = useState(false);\r\n    const [translate, setTranslate] = useState(false);\r\n\r\n    const handleUrlChange = (e) => {\r\n        setUrl(e.target.value);\r\n    };\r\n\r\n    const handleTranslateChange = (e) => {\r\n        setTranslate(e.target.checked);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setMessage('Processing...');\r\n        setLoading(true);\r\n        setIsNonEnglish(false);\r\n\r\n        try {\r\n            const videoId = extractVideoId(url);\r\n            const audioBuffer = await fetchAudioStream(videoId);\r\n            const generatedTranscript = await processAudioBuffer(audioBuffer);\r\n\r\n            const language = detectLanguage(generatedTranscript);\r\n            if (language !== 'en') {\r\n                setIsNonEnglish(true);\r\n                setMessage('Transcript available. This video is in a non-English language. You can get the transcript in the original language or translated to English for an extra fee.');\r\n            } else {\r\n                setMessage('Transcript available. Please make the payment to download.');\r\n            }\r\n\r\n            setTranscript(generatedTranscript);\r\n            setIsPaymentReady(true);\r\n        } catch (error) {\r\n            setMessage(error.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const extractVideoId = (url) => {\r\n        try {\r\n            const urlObj = new URL(url);\r\n            const videoId = urlObj.searchParams.get('v') || urlObj.pathname.split('/').pop();\r\n            if (!videoId) {\r\n                throw new Error('Invalid YouTube URL');\r\n            }\r\n            return videoId;\r\n        } catch (error) {\r\n            throw new Error('Invalid URL format');\r\n        }\r\n    };\r\n\r\n    const fetchAudioStream = async (videoId) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:5000/api/get-audio-stream?videoId=${videoId}`, { responseType: 'arraybuffer' });\r\n            const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n            const audioBuffer = await audioContext.decodeAudioData(response.data);\r\n            return audioBuffer;\r\n        } catch (error) {\r\n            throw new Error('Error fetching audio stream');\r\n        }\r\n    };\r\n\r\n    const processAudioBuffer = async (audioBuffer) => {\r\n        return new Promise((resolve, reject) => {\r\n            const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n            recognition.lang = 'en-US';\r\n            recognition.interimResults = false;\r\n            recognition.maxAlternatives = 1;\r\n\r\n            recognition.onresult = (event) => {\r\n                const transcript = event.results[0][0].transcript;\r\n                resolve(transcript);\r\n            };\r\n\r\n            recognition.onerror = (event) => {\r\n                reject(new Error('Speech recognition error'));\r\n            };\r\n\r\n            recognition.onend = () => {\r\n                reject(new Error('Speech recognition ended without results'));\r\n            };\r\n\r\n            // Create an offline audio context to process the audio buffer\r\n            const offlineContext = new OfflineAudioContext(1, audioBuffer.length, audioBuffer.sampleRate);\r\n            const source = offlineContext.createBufferSource();\r\n            source.buffer = audioBuffer;\r\n            source.connect(offlineContext.destination);\r\n            source.start();\r\n\r\n            offlineContext.startRendering().then((renderedBuffer) => {\r\n                const audioData = renderedBuffer.getChannelData(0);\r\n                const audioBlob = new Blob([audioData.buffer], { type: 'audio/wav' });\r\n                const audioUrl = URL.createObjectURL(audioBlob);\r\n                const audio = new Audio(audioUrl);\r\n                audio.muted = true;\r\n\r\n                audio.oncanplaythrough = () => {\r\n                    recognition.start();\r\n                    audio.play();\r\n                };\r\n\r\n                audio.onended = () => {\r\n                    resolve('Transcript processing complete');\r\n                };\r\n            }).catch((error) => {\r\n                reject(new Error('Offline rendering error'));\r\n            });\r\n        });\r\n    };\r\n\r\n    const detectLanguage = (text) => {\r\n        const doc = compromise(text);\r\n        const lang = doc.language();\r\n        return lang.iso639_1 || 'en'; // Default to 'en' if language is not detected\r\n    };\r\n\r\n    const translateTranscript = async (text) => {\r\n        try {\r\n            const response = await axios.post(`http://localhost:5000/api/translate`, { text });\r\n            return response.data.translatedText;\r\n        } catch (error) {\r\n            throw new Error('Error translating transcript');\r\n        }\r\n    };\r\n\r\n    const handlePaymentSuccess = async () => {\r\n        if (isNonEnglish && translate) {\r\n            try {\r\n                const translatedTranscript = await translateTranscript(transcript);\r\n                setTranscript(translatedTranscript);\r\n            } catch (error) {\r\n                setMessage('Error translating transcript');\r\n                return;\r\n            }\r\n        }\r\n        setMessage('Payment successful. Download your transcript below.');\r\n        setIsPaymentReady(false);\r\n        // Save transcript to localStorage\r\n        localStorage.setItem('transcript', transcript);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>YouTube Transcriber</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    YouTube URL:\r\n                    <input type=\"text\" value={url} onChange={handleUrlChange} required />\r\n                </label>\r\n                {isNonEnglish && (\r\n                    <label>\r\n                        Translate to English:\r\n                        <input type=\"checkbox\" checked={translate} onChange={handleTranslateChange} />\r\n                    </label>\r\n                )}\r\n                <button type=\"submit\" disabled={loading}>\r\n                    {loading ? 'Processing...' : 'Get Transcript'}\r\n                </button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n            {isPaymentReady && (\r\n                <PayPalScriptProvider options={{ \"client-id\": process.env.REACT_APP_PAYPAL_CLIENT_ID }}>\r\n                    <PayPalButtons\r\n                        style={{ layout: 'vertical' }}\r\n                        createOrder={(data, actions) => {\r\n                            const amount = isNonEnglish ? \"7.00\" : \"5.00\";\r\n                            return actions.order.create({\r\n                                purchase_units: [{\r\n                                    amount: {\r\n                                        value: amount\r\n                                    }\r\n                                }]\r\n                            });\r\n                        }}\r\n                        onApprove={(data, actions) => {\r\n                            return actions.order.capture().then(handlePaymentSuccess);\r\n                        }}\r\n                    />\r\n                </PayPalScriptProvider>\r\n            )}\r\n            {message === 'Payment successful. Download your transcript below.' && (\r\n                <div>\r\n                    <p>{transcript}</p>\r\n                    <a\r\n                        href={`data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`}\r\n                        download=\"transcript.txt\"\r\n                    >\r\n                        Download Transcript\r\n                    </a>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TranscriptForm;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,KAAK,KAAM,OAAO,CACzB,OAASC,aAAa,CAAEC,oBAAoB,KAAQ,yBAAyB,CAC7E,MAAO,CAAAC,UAAU,KAAM,YAAY,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEpC,KAAM,CAAAC,cAAc,CAAGA,CAAA,GAAM,CACzB,KAAM,CAACC,GAAG,CAAEC,MAAM,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAClC,KAAM,CAACY,OAAO,CAAEC,UAAU,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAACc,UAAU,CAAEC,aAAa,CAAC,CAAGf,QAAQ,CAAC,EAAE,CAAC,CAChD,KAAM,CAACgB,cAAc,CAAEC,iBAAiB,CAAC,CAAGjB,QAAQ,CAAC,KAAK,CAAC,CAC3D,KAAM,CAACkB,OAAO,CAAEC,UAAU,CAAC,CAAGnB,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACoB,YAAY,CAAEC,eAAe,CAAC,CAAGrB,QAAQ,CAAC,KAAK,CAAC,CACvD,KAAM,CAACsB,SAAS,CAAEC,YAAY,CAAC,CAAGvB,QAAQ,CAAC,KAAK,CAAC,CAEjD,KAAM,CAAAwB,eAAe,CAAIC,CAAC,EAAK,CAC3Bd,MAAM,CAACc,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAC1B,CAAC,CAED,KAAM,CAAAC,qBAAqB,CAAIH,CAAC,EAAK,CACjCF,YAAY,CAACE,CAAC,CAACC,MAAM,CAACG,OAAO,CAAC,CAClC,CAAC,CAED,KAAM,CAAAC,YAAY,CAAG,KAAO,CAAAL,CAAC,EAAK,CAC9BA,CAAC,CAACM,cAAc,CAAC,CAAC,CAClBlB,UAAU,CAAC,eAAe,CAAC,CAC3BM,UAAU,CAAC,IAAI,CAAC,CAChBE,eAAe,CAAC,KAAK,CAAC,CAEtB,GAAI,CACA,KAAM,CAAAW,OAAO,CAAGC,cAAc,CAACvB,GAAG,CAAC,CACnC,KAAM,CAAAwB,WAAW,CAAG,KAAM,CAAAC,gBAAgB,CAACH,OAAO,CAAC,CACnD,KAAM,CAAAI,mBAAmB,CAAG,KAAM,CAAAC,kBAAkB,CAACH,WAAW,CAAC,CAEjE,KAAM,CAAAI,QAAQ,CAAGC,cAAc,CAACH,mBAAmB,CAAC,CACpD,GAAIE,QAAQ,GAAK,IAAI,CAAE,CACnBjB,eAAe,CAAC,IAAI,CAAC,CACrBR,UAAU,CAAC,+JAA+J,CAAC,CAC/K,CAAC,IAAM,CACHA,UAAU,CAAC,4DAA4D,CAAC,CAC5E,CAEAE,aAAa,CAACqB,mBAAmB,CAAC,CAClCnB,iBAAiB,CAAC,IAAI,CAAC,CAC3B,CAAE,MAAOuB,KAAK,CAAE,CACZ3B,UAAU,CAAC2B,KAAK,CAAC5B,OAAO,CAAC,CAC7B,CAAC,OAAS,CACNO,UAAU,CAAC,KAAK,CAAC,CACrB,CACJ,CAAC,CAED,KAAM,CAAAc,cAAc,CAAIvB,GAAG,EAAK,CAC5B,GAAI,CACA,KAAM,CAAA+B,MAAM,CAAG,GAAI,CAAAC,GAAG,CAAChC,GAAG,CAAC,CAC3B,KAAM,CAAAsB,OAAO,CAAGS,MAAM,CAACE,YAAY,CAACC,GAAG,CAAC,GAAG,CAAC,EAAIH,MAAM,CAACI,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAChF,GAAI,CAACf,OAAO,CAAE,CACV,KAAM,IAAI,CAAAgB,KAAK,CAAC,qBAAqB,CAAC,CAC1C,CACA,MAAO,CAAAhB,OAAO,CAClB,CAAE,MAAOQ,KAAK,CAAE,CACZ,KAAM,IAAI,CAAAQ,KAAK,CAAC,oBAAoB,CAAC,CACzC,CACJ,CAAC,CAED,KAAM,CAAAb,gBAAgB,CAAG,KAAO,CAAAH,OAAO,EAAK,CACxC,GAAI,CACA,KAAM,CAAAiB,QAAQ,CAAG,KAAM,CAAAhD,KAAK,CAAC2C,GAAG,uDAAAM,MAAA,CAAuDlB,OAAO,EAAI,CAAEmB,YAAY,CAAE,aAAc,CAAC,CAAC,CAClI,KAAM,CAAAC,YAAY,CAAG,IAAKC,MAAM,CAACC,YAAY,EAAID,MAAM,CAACE,kBAAkB,EAAE,CAAC,CAC7E,KAAM,CAAArB,WAAW,CAAG,KAAM,CAAAkB,YAAY,CAACI,eAAe,CAACP,QAAQ,CAACQ,IAAI,CAAC,CACrE,MAAO,CAAAvB,WAAW,CACtB,CAAE,MAAOM,KAAK,CAAE,CACZ,KAAM,IAAI,CAAAQ,KAAK,CAAC,6BAA6B,CAAC,CAClD,CACJ,CAAC,CAED,KAAM,CAAAX,kBAAkB,CAAG,KAAO,CAAAH,WAAW,EAAK,CAC9C,MAAO,IAAI,CAAAwB,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACpC,KAAM,CAAAC,WAAW,CAAG,IAAKR,MAAM,CAACS,iBAAiB,EAAIT,MAAM,CAACU,uBAAuB,EAAE,CAAC,CACtFF,WAAW,CAACG,IAAI,CAAG,OAAO,CAC1BH,WAAW,CAACI,cAAc,CAAG,KAAK,CAClCJ,WAAW,CAACK,eAAe,CAAG,CAAC,CAE/BL,WAAW,CAACM,QAAQ,CAAIC,KAAK,EAAK,CAC9B,KAAM,CAAAtD,UAAU,CAAGsD,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACvD,UAAU,CACjD6C,OAAO,CAAC7C,UAAU,CAAC,CACvB,CAAC,CAED+C,WAAW,CAACS,OAAO,CAAIF,KAAK,EAAK,CAC7BR,MAAM,CAAC,GAAI,CAAAZ,KAAK,CAAC,0BAA0B,CAAC,CAAC,CACjD,CAAC,CAEDa,WAAW,CAACU,KAAK,CAAG,IAAM,CACtBX,MAAM,CAAC,GAAI,CAAAZ,KAAK,CAAC,0CAA0C,CAAC,CAAC,CACjE,CAAC,CAED;AACA,KAAM,CAAAwB,cAAc,CAAG,GAAI,CAAAC,mBAAmB,CAAC,CAAC,CAAEvC,WAAW,CAACwC,MAAM,CAAExC,WAAW,CAACyC,UAAU,CAAC,CAC7F,KAAM,CAAAC,MAAM,CAAGJ,cAAc,CAACK,kBAAkB,CAAC,CAAC,CAClDD,MAAM,CAACE,MAAM,CAAG5C,WAAW,CAC3B0C,MAAM,CAACG,OAAO,CAACP,cAAc,CAACQ,WAAW,CAAC,CAC1CJ,MAAM,CAACK,KAAK,CAAC,CAAC,CAEdT,cAAc,CAACU,cAAc,CAAC,CAAC,CAACC,IAAI,CAAEC,cAAc,EAAK,CACrD,KAAM,CAAAC,SAAS,CAAGD,cAAc,CAACE,cAAc,CAAC,CAAC,CAAC,CAClD,KAAM,CAAAC,SAAS,CAAG,GAAI,CAAAC,IAAI,CAAC,CAACH,SAAS,CAACP,MAAM,CAAC,CAAE,CAAEW,IAAI,CAAE,WAAY,CAAC,CAAC,CACrE,KAAM,CAAAC,QAAQ,CAAGhD,GAAG,CAACiD,eAAe,CAACJ,SAAS,CAAC,CAC/C,KAAM,CAAAK,KAAK,CAAG,GAAI,CAAAC,KAAK,CAACH,QAAQ,CAAC,CACjCE,KAAK,CAACE,KAAK,CAAG,IAAI,CAElBF,KAAK,CAACG,gBAAgB,CAAG,IAAM,CAC3BlC,WAAW,CAACoB,KAAK,CAAC,CAAC,CACnBW,KAAK,CAACI,IAAI,CAAC,CAAC,CAChB,CAAC,CAEDJ,KAAK,CAACK,OAAO,CAAG,IAAM,CAClBtC,OAAO,CAAC,gCAAgC,CAAC,CAC7C,CAAC,CACL,CAAC,CAAC,CAACuC,KAAK,CAAE1D,KAAK,EAAK,CAChBoB,MAAM,CAAC,GAAI,CAAAZ,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAChD,CAAC,CAAC,CACN,CAAC,CAAC,CACN,CAAC,CAED,KAAM,CAAAT,cAAc,CAAI4D,IAAI,EAAK,CAC7B,KAAM,CAAAC,GAAG,CAAGhG,UAAU,CAAC+F,IAAI,CAAC,CAC5B,KAAM,CAAAnC,IAAI,CAAGoC,GAAG,CAAC9D,QAAQ,CAAC,CAAC,CAC3B,MAAO,CAAA0B,IAAI,CAACqC,QAAQ,EAAI,IAAI,CAAE;AAClC,CAAC,CAED,KAAM,CAAAC,mBAAmB,CAAG,KAAO,CAAAH,IAAI,EAAK,CACxC,GAAI,CACA,KAAM,CAAAlD,QAAQ,CAAG,KAAM,CAAAhD,KAAK,CAACsG,IAAI,uCAAwC,CAAEJ,IAAK,CAAC,CAAC,CAClF,MAAO,CAAAlD,QAAQ,CAACQ,IAAI,CAAC+C,cAAc,CACvC,CAAE,MAAOhE,KAAK,CAAE,CACZ,KAAM,IAAI,CAAAQ,KAAK,CAAC,8BAA8B,CAAC,CACnD,CACJ,CAAC,CAED,KAAM,CAAAyD,oBAAoB,CAAG,KAAAA,CAAA,GAAY,CACrC,GAAIrF,YAAY,EAAIE,SAAS,CAAE,CAC3B,GAAI,CACA,KAAM,CAAAoF,oBAAoB,CAAG,KAAM,CAAAJ,mBAAmB,CAACxF,UAAU,CAAC,CAClEC,aAAa,CAAC2F,oBAAoB,CAAC,CACvC,CAAE,MAAOlE,KAAK,CAAE,CACZ3B,UAAU,CAAC,8BAA8B,CAAC,CAC1C,OACJ,CACJ,CACAA,UAAU,CAAC,qDAAqD,CAAC,CACjEI,iBAAiB,CAAC,KAAK,CAAC,CACxB;AACA0F,YAAY,CAACC,OAAO,CAAC,YAAY,CAAE9F,UAAU,CAAC,CAClD,CAAC,CAED,mBACIN,KAAA,QAAAqG,QAAA,eACIvG,IAAA,OAAAuG,QAAA,CAAI,qBAAmB,CAAI,CAAC,cAC5BrG,KAAA,SAAMsG,QAAQ,CAAEhF,YAAa,CAAA+E,QAAA,eACzBrG,KAAA,UAAAqG,QAAA,EAAO,cAEH,cAAAvG,IAAA,UAAOmF,IAAI,CAAC,MAAM,CAAC9D,KAAK,CAAEjB,GAAI,CAACqG,QAAQ,CAAEvF,eAAgB,CAACwF,QAAQ,MAAE,CAAC,EAClE,CAAC,CACP5F,YAAY,eACTZ,KAAA,UAAAqG,QAAA,EAAO,uBAEH,cAAAvG,IAAA,UAAOmF,IAAI,CAAC,UAAU,CAAC5D,OAAO,CAAEP,SAAU,CAACyF,QAAQ,CAAEnF,qBAAsB,CAAE,CAAC,EAC3E,CACV,cACDtB,IAAA,WAAQmF,IAAI,CAAC,QAAQ,CAACwB,QAAQ,CAAE/F,OAAQ,CAAA2F,QAAA,CACnC3F,OAAO,CAAG,eAAe,CAAG,gBAAgB,CACzC,CAAC,EACP,CAAC,CACNN,OAAO,eAAIN,IAAA,MAAAuG,QAAA,CAAIjG,OAAO,CAAI,CAAC,CAC3BI,cAAc,eACXV,IAAA,CAACH,oBAAoB,EAAC+G,OAAO,CAAE,CAAE,WAAW,CAAEC,OAAO,CAACC,GAAG,CAACC,0BAA2B,CAAE,CAAAR,QAAA,cACnFvG,IAAA,CAACJ,aAAa,EACVoH,KAAK,CAAE,CAAEC,MAAM,CAAE,UAAW,CAAE,CAC9BC,WAAW,CAAEA,CAAC/D,IAAI,CAAEgE,OAAO,GAAK,CAC5B,KAAM,CAAAC,MAAM,CAAGtG,YAAY,CAAG,MAAM,CAAG,MAAM,CAC7C,MAAO,CAAAqG,OAAO,CAACE,KAAK,CAACC,MAAM,CAAC,CACxBC,cAAc,CAAE,CAAC,CACbH,MAAM,CAAE,CACJ/F,KAAK,CAAE+F,MACX,CACJ,CAAC,CACL,CAAC,CAAC,CACN,CAAE,CACFI,SAAS,CAAEA,CAACrE,IAAI,CAAEgE,OAAO,GAAK,CAC1B,MAAO,CAAAA,OAAO,CAACE,KAAK,CAACI,OAAO,CAAC,CAAC,CAAC5C,IAAI,CAACsB,oBAAoB,CAAC,CAC7D,CAAE,CACL,CAAC,CACgB,CACzB,CACA7F,OAAO,GAAK,qDAAqD,eAC9DJ,KAAA,QAAAqG,QAAA,eACIvG,IAAA,MAAAuG,QAAA,CAAI/F,UAAU,CAAI,CAAC,cACnBR,IAAA,MACI0H,IAAI,kCAAA9E,MAAA,CAAmC+E,kBAAkB,CAACnH,UAAU,CAAC,CAAG,CACxEoH,QAAQ,CAAC,gBAAgB,CAAArB,QAAA,CAC5B,qBAED,CAAG,CAAC,EACH,CACR,EACA,CAAC,CAEd,CAAC,CAED,cAAe,CAAApG,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}