{"ast":null,"code":"var fs = require('fs'),\n  unicode = require('unicode-9.0.0');\nvar profiles = 'profiles';\nvar _langlist = [];\n_wordLangProbMap = {};\nvar URL_REGEX = /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi,\n  MAIL_REGEX = /(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/gi,\n  LATIN1_EXCLUDED = '\\u00A0\\u00AB\\u00B0\\u00BB',\n  CJKS = '',\n  N_GRAM = 3,\n  TRIALS = 7,\n  PROB_THRESHOLD = 0.1,\n  ALPHA_DEFAULT = 0.5,\n  ALPHA_WIDTH = 0.05,\n  ITERATION_LIMIT = 1000,\n  BASE_FREQ = 10000,\n  CONV_THRESHOLD = 0.99999,\n  MAX_TEXT_LENGTH = 10000;\nexports.detect = function (text) {\n  text = normalizeText(text);\n  text = reduceSpace(text);\n  text = cleanText(text);\n  var ngrams = extractNGram(text);\n  if (ngrams.length == 0) return null;\n  var langprob = new Array(_langlist.length),\n    priorMap = null,\n    alpha = ALPHA_WIDTH;\n  for (var j = 0; j < langprob.length; j++) langprob[j] = 0;\n  for (var i = 0; i < TRIALS; i++) {\n    var prob = new Array(_langlist.length),\n      current_alpha = alpha + Math.random() * ALPHA_WIDTH;\n    var updateLangProb = function (word) {\n        if (!word || !_wordLangProbMap[word]) return false;\n        var langProbMap = _wordLangProbMap[word],\n          weight = current_alpha / BASE_FREQ;\n        for (var k = 0; k < prob.length; k++) {\n          prob[k] *= weight + (langProbMap[k] ? langProbMap[k] : 0);\n        }\n        return true;\n      },\n      normalizeProb = function () {\n        var maxp = 0,\n          sump = 0;\n        for (var k = 0; k < prob.length; k++) sump += prob[k];\n        for (var k = 0; k < prob.length; k++) {\n          var p = prob[k] / sump;\n          if (maxp < p) maxp = p;\n          prob[k] = p;\n        }\n        return maxp;\n      };\n    if (priorMap) {\n      for (var j = 0; j < prob.length; j++) prob[j] = priorMap[j];\n    } else {\n      for (var j = 0; j < prob.length; j++) prob[j] = 1.0 / _langlist.length;\n    }\n    for (var j = 0;; j++) {\n      var r = parseInt(Math.random() * ngrams.length);\n      updateLangProb(ngrams[r]);\n      if (j % 5 == 0) {\n        if (normalizeProb(prob) > CONV_THRESHOLD || j >= ITERATION_LIMIT) break;\n      }\n    }\n    for (var j = 0; j < langprob.length; j++) langprob[j] += (prob[j] || 0) / TRIALS;\n  }\n  var retlist = [];\n  for (var i = 0; i < langprob.length; i++) {\n    var p = langprob[i];\n    if (p > PROB_THRESHOLD) {\n      retlist.push({\n        lang: _langlist[i],\n        prob: p\n      });\n    }\n  }\n  retlist.sort(function (a, b) {\n    return b.prob - a.prob;\n  });\n  return retlist;\n};\nexports.detectOne = function (text) {\n  var langs = exports.detect(text);\n  return langs.length > 0 ? langs[0].lang : null;\n};\nfunction normalizeText(text) {\n  text = text.replace(URL_REGEX, ' ');\n  text = text.replace(MAIL_REGEX, ' ');\n  return text;\n}\nfunction reduceSpace(text) {\n  var pre = null,\n    ret = '';\n  for (var i = 0; i < text.length && i < MAX_TEXT_LENGTH; i++) {\n    var c = text[i];\n    if (c != ' ' || pre != ' ') ret += c;\n    pre = c;\n  }\n  return ret;\n}\nfunction cleanText(text) {\n  var latinCount = 0,\n    nonLatinText = '';\n  for (var i = 0; i < text.length; i++) {\n    var c = text[i];\n    if (c <= 'z' && c >= 'A') {\n      ++latinCount;\n    } else if (c >= '\\u0300' && getUnicodeBlock(c) != 'Latin Extended Additional') {\n      nonLatinText += c;\n    }\n  }\n  if (latinCount * 2 < nonLatinText.length) return nonLatinText;\n  return text;\n}\nfunction extractNGram(text) {\n  var grams_ = ' ',\n    capitalword_ = false,\n    list = [];\n  for (var i = 0; i < text.length; i++) {\n    // NGram.addChar\n    var ch = normalize(text[i]),\n      lastchar = grams_[grams_.length - 1],\n      do_not_add = false;\n    if (lastchar == ' ') {\n      grams_ = ' ';\n      capitalword_ = false;\n      if (ch == ' ') do_not_add = true;\n    } else if (grams_.length >= N_GRAM) {\n      grams_ = grams_.substring(1, grams_.length);\n    }\n    if (!do_not_add) {\n      grams_ += ch;\n      if (ch != ch.toLowerCase()) {\n        if (lastchar != lastchar.toLowerCase()) capitalword_ = true;\n      } else {\n        capitalword_ = false;\n      }\n    }\n    for (var n = 1; n <= N_GRAM; n++) {\n      var w = null;\n      // NGram.get\n      if (!capitalword_) {\n        var len = grams_.length;\n        if (n >= 1 && n <= 3 && len >= n) {\n          if (n == 1 && grams_[len - 1] != ' ') w = grams_[len - 1];else w = grams_.substring(len - n, len);\n        }\n      }\n      if (w && _wordLangProbMap[w]) list.push(w);\n    }\n  }\n  return list;\n}\nfunction normalize(ch) {\n  var ub = getUnicodeBlock(ch);\n  switch (ub) {\n    case 'Basic Latin':\n      if (ch < 'A' || ch < 'a' && ch > 'Z' || ch > 'z') ch = ' ';\n      break;\n    case 'Latin-1 Supplement':\n      if (LATIN1_EXCLUDED.indexOf(ch) >= 0) ch = ' ';\n      break;\n    case 'Latin Extended-B':\n      // normalization for Romanian\n      if (ch == '\\u0219') ch = '\\u015f'; // Small S with comma below => with cedilla\n      if (ch == '\\u021b') ch = '\\u0163'; // Small T with comma below => with cedilla\n      break;\n    case 'Latin Extended Additional':\n      if (ch >= '\\u1ea0') ch = '\\u1ec3';\n      break;\n    case 'Arabic':\n      if (ch == '\\u06cc') ch = '\\u064a';\n      break;\n    // Farsi yeh => Arabic yeh\n    case 'Hiragana':\n      ch = '\\u3042';\n      break;\n    case 'Katakana':\n      ch = '\\u30a2';\n      break;\n    case 'Hangul Jamo':\n    case 'Hangul Jamo Extended-A':\n    case 'Hangul Jamo Extended-B':\n    case 'Hangul Compatibility Jamo':\n      ch = '\\u314b';\n      break;\n    case 'Hangul Syllables':\n      ch = '\\uac00';\n      break;\n    case 'Bopomofo':\n    case 'Bopomofo Extended':\n      ch = '\\u3105';\n      break;\n    case 'General Punctuation':\n      ch = ' ';\n      break;\n  }\n  return ch;\n}\n\n/**\n * Unicode Initialization\n */\nvar UnicodeBlocks = [];\nfunction getUnicodeBlock(char) {\n  for (var i = 0; i < UnicodeBlocks.length; i++) {\n    if (UnicodeBlocks[i].regex.test(char)) {\n      return UnicodeBlocks[i].name;\n    }\n  }\n  return null;\n}\n\n/**\n * LangDetect Initialization\n */\nfunction prepare() {\n  var langlist = fs.readdirSync(__dirname + '/' + profiles);\n  for (var i = 0; i < langlist.length; i++) {\n    var file = langlist[i],\n      lang = file.split('.')[0],\n      profile = require(__dirname + '/' + profiles + '/' + file);\n    if (_langlist.indexOf[lang] >= 0) throw new Error('duplicate the same language profile');\n    _langlist.push(lang);\n    for (var word in profile.freq) {\n      if (!_wordLangProbMap[word]) _wordLangProbMap[word] = new Array(langlist.length);\n      var len = word.length;\n      if (len >= 1 && len <= 3) {\n        var prob = profile.freq[word] / profile.n_words[len - 1];\n        _wordLangProbMap[word][i] = prob;\n      }\n    }\n  }\n  unicode.Block.forEach(function (unicode_block) {\n    UnicodeBlocks.push({\n      name: unicode_block,\n      regex: require('unicode-9.0.0/Block/' + unicode_block + '/regex')\n    });\n  });\n}\nprepare();","map":{"version":3,"names":["fs","require","unicode","profiles","_langlist","_wordLangProbMap","URL_REGEX","MAIL_REGEX","LATIN1_EXCLUDED","CJKS","N_GRAM","TRIALS","PROB_THRESHOLD","ALPHA_DEFAULT","ALPHA_WIDTH","ITERATION_LIMIT","BASE_FREQ","CONV_THRESHOLD","MAX_TEXT_LENGTH","exports","detect","text","normalizeText","reduceSpace","cleanText","ngrams","extractNGram","length","langprob","Array","priorMap","alpha","j","i","prob","current_alpha","Math","random","updateLangProb","word","langProbMap","weight","k","normalizeProb","maxp","sump","p","r","parseInt","retlist","push","lang","sort","a","b","detectOne","langs","replace","pre","ret","c","latinCount","nonLatinText","getUnicodeBlock","grams_","capitalword_","list","ch","normalize","lastchar","do_not_add","substring","toLowerCase","n","w","len","ub","indexOf","UnicodeBlocks","char","regex","test","name","prepare","langlist","readdirSync","__dirname","file","split","profile","Error","freq","n_words","Block","forEach","unicode_block"],"sources":["C:/Users/swths/OneDrive/Documents/youtube-transcriber/youtube-transcriber/client/node_modules/langdetect/index.js"],"sourcesContent":["var fs = require('fs'),\n\tunicode = require('unicode-9.0.0');\nvar profiles = 'profiles';\n\nvar _langlist = [];\n\t_wordLangProbMap = {};\n\nvar URL_REGEX = /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi,\n\tMAIL_REGEX = /(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/gi,\n\tLATIN1_EXCLUDED = '\\u00A0\\u00AB\\u00B0\\u00BB',\n\tCJKS = '',\n\tN_GRAM = 3,\n\tTRIALS = 7,\n\tPROB_THRESHOLD = 0.1,\n\tALPHA_DEFAULT = 0.5,\n\tALPHA_WIDTH = 0.05,\n\tITERATION_LIMIT = 1000,\n\tBASE_FREQ = 10000,\n\tCONV_THRESHOLD = 0.99999,\n\tMAX_TEXT_LENGTH = 10000;\n\nexports.detect = function (text) {\n\ttext = normalizeText(text);\n\ttext = reduceSpace(text);\n\ttext = cleanText(text);\n\n\tvar ngrams = extractNGram(text);\n\tif(ngrams.length == 0) return null;\n\n\tvar langprob = new Array(_langlist.length),\n\t    priorMap = null,\n\t    alpha = ALPHA_WIDTH;\n\n\tfor(var j=0; j<langprob.length; j++) langprob[j] = 0;\n\n\tfor(var i=0; i< TRIALS; i++) {\n\t    var prob = new Array(_langlist.length),\n\t        current_alpha = alpha + Math.random() * ALPHA_WIDTH;\n\n\t    var updateLangProb = function (word) {\n\t        if (!word || !_wordLangProbMap[word]) return false;\n\n\t        var langProbMap = _wordLangProbMap[word],\n\t            weight = current_alpha / BASE_FREQ;\n\n\t        for (var k=0; k<prob.length; k++) {\n\t            prob[k] *= weight + (langProbMap[k] ? langProbMap[k] :  0);\n\t        }\n\n\t        return true;\n\t    }, normalizeProb = function () {\n\t        var maxp = 0, sump = 0;\n\t        for(var k=0; k<prob.length; k++) sump += prob[k];\n\t        for(var k=0; k<prob.length; k++) {\n\t            var p = prob[k] / sump;\n\t            if (maxp < p) maxp = p;\n\t            prob[k] = p;\n\t        }\n\t        return maxp;\n\t    }\n\n        if (priorMap) {\n            for(var j=0; j<prob.length; j++) prob[j] = priorMap[j];\n        } else {\n            for(var j=0; j<prob.length; j++) prob[j] = 1.0 / _langlist.length;\n        }\n\n        for(var j=0;; j++) {\n            var r = parseInt(Math.random() * ngrams.length);\n            updateLangProb(ngrams[r]);\n\n            if(j % 5 == 0) {\n                if (normalizeProb(prob) > CONV_THRESHOLD || j >= ITERATION_LIMIT) break;\n            }\n        }\n\n        for(var j=0; j<langprob.length; j++) langprob[j] += (prob[j] || 0) / TRIALS;\n\t}\n\n\tvar retlist = [];\n\tfor(var i=0; i<langprob.length; i++) {\n\t    var p = langprob[i];\n\t    if(p > PROB_THRESHOLD) {\n\t        retlist.push({\n\t            lang: _langlist[i],\n\t            prob: p\n\t        });\n\t    }\n\t}\n\n\tretlist.sort(function (a, b) { return b.prob - a.prob; });\n\n\treturn retlist;\n};\n\nexports.detectOne = function (text) {\n    var langs = exports.detect(text);\n    return langs.length > 0 ? langs[0].lang : null;\n};\n\nfunction normalizeText (text) {\n\ttext = text.replace(URL_REGEX, ' ');\n\ttext = text.replace(MAIL_REGEX, ' ');\n\n\treturn text;\n}\n\nfunction reduceSpace (text) {\n\tvar pre = null, ret = '';\n\tfor(var i=0; (i<text.length) && (i<MAX_TEXT_LENGTH); i++) {\n\t\tvar c = text[i];\n\t\tif(c != ' ' || pre != ' ') ret += c;\n\t\tpre = c;\n\t}\n\n\treturn ret;\n}\n\nfunction cleanText (text) {\n\tvar latinCount = 0, nonLatinText = '';\n\n\tfor(var i=0; i<text.length; i++) {\n\t\tvar c = text[i]\n\t\tif(c <= 'z' && c >= 'A') {\n\t\t\t++latinCount;\n\t\t} else if (c >= '\\u0300' && (getUnicodeBlock(c) != 'Latin Extended Additional')) {\n\t\t\tnonLatinText += c;\n\t\t}\n\t}\n\n\tif (latinCount * 2 < nonLatinText.length)\n\t\treturn nonLatinText;\n\n\treturn text;\n}\n\nfunction extractNGram (text) {\n    var grams_ = ' ',\n        capitalword_ = false,\n        list = [];\n\n\tfor(var i=0; i<text.length; i++) {\n\t    // NGram.addChar\n\t\tvar ch = normalize(text[i]),\n\t\t    lastchar = grams_[grams_.length - 1],\n\t\t    do_not_add = false;\n\n\t\tif(lastchar == ' ') {\n\t\t    grams_ = ' ';\n            capitalword_ = false;\n            if (ch == ' ') do_not_add = true;\n\t\t} else if(grams_.length >= N_GRAM) {\n\t\t    grams_ = grams_.substring(1, grams_.length);\n\t\t}\n\n\t\tif(!do_not_add) {\n\t\t    grams_ += ch;\n\n\t        if(ch != ch.toLowerCase()) {\n\t            if (lastchar != lastchar.toLowerCase()) capitalword_ = true;\n\t        } else {\n\t            capitalword_ = false;\n\t        }\n\t\t}\n\n\t\tfor(var n=1; n<=N_GRAM; n++) {\n\t\t    var w = null;\n\t\t    // NGram.get\n\t\t    if(!capitalword_) {\n\t\t        var len = grams_.length;\n\t\t        if(n >= 1 && n <= 3 && len >= n) {\n\t\t            if(n == 1 && grams_[len - 1] != ' ') w = grams_[len - 1];\n\t\t            else w = grams_.substring(len - n, len);\n\t\t        }\n\t\t    }\n\n\t\t    if(w && _wordLangProbMap[w]) list.push(w);\n        }\n\t}\n\n\treturn list;\n}\n\nfunction normalize (ch) {\n\tvar ub = getUnicodeBlock(ch);\n\tswitch(ub) {\n\tcase 'Basic Latin': if(ch < 'A' || (ch < 'a' && ch > 'Z') || ch > 'z') ch = ' '; break;\n\tcase 'Latin-1 Supplement': if(LATIN1_EXCLUDED.indexOf(ch) >= 0) ch = ' '; break;\n\tcase 'Latin Extended-B':\n\t\t// normalization for Romanian\n\t\tif (ch == '\\u0219') ch = '\\u015f'; // Small S with comma below => with cedilla\n\t\tif (ch == '\\u021b') ch = '\\u0163'; // Small T with comma below => with cedilla\n\t\tbreak;\n\tcase 'Latin Extended Additional': if (ch >= '\\u1ea0') ch = '\\u1ec3'; break;\n\tcase 'Arabic': if (ch == '\\u06cc') ch = '\\u064a'; break; // Farsi yeh => Arabic yeh\n\tcase 'Hiragana': ch = '\\u3042'; break;\n\tcase 'Katakana': ch = '\\u30a2'; break;\n\tcase 'Hangul Jamo':\n\tcase 'Hangul Jamo Extended-A':\n\tcase 'Hangul Jamo Extended-B':\n\tcase 'Hangul Compatibility Jamo': ch = '\\u314b'; break;\n\tcase 'Hangul Syllables': ch = '\\uac00'; break;\n\tcase 'Bopomofo':\n\tcase 'Bopomofo Extended': ch = '\\u3105'; break;\n\tcase 'General Punctuation':\n\t\tch = ' ';\n\t\tbreak;\n\t}\n\treturn ch;\n}\n\n/**\n * Unicode Initialization\n */\nvar UnicodeBlocks = [];\nfunction getUnicodeBlock (char) {\n\tfor(var i=0; i<UnicodeBlocks.length; i++) {\n\t\tif(UnicodeBlocks[i].regex.test(char)) {\n\t\t\treturn UnicodeBlocks[i].name;\n\t\t}\n\t}\n\treturn null;\n}\n\n/**\n * LangDetect Initialization\n */\nfunction prepare() {\n\tvar langlist = fs.readdirSync(__dirname + '/' + profiles);\n\n\tfor(var i=0; i<langlist.length; i++) {\n\t\tvar file = langlist[i],\n\t\t\tlang = file.split('.')[0],\n\t\t\tprofile = require(__dirname + '/' + profiles + '/' + file);\n\n\t\tif(_langlist.indexOf[lang] >= 0) throw new Error('duplicate the same language profile');\n\t\t_langlist.push(lang);\n\n\t\tfor(var word in profile.freq) {\n\t\t\tif(!_wordLangProbMap[word]) _wordLangProbMap[word] = new Array(langlist.length);\n\t\t\tvar len = word.length;\n\t\t\tif (len >= 1 && len <= 3) {\n\t\t\t\tvar prob = profile.freq[word] / profile.n_words[len - 1];\n\t\t\t\t_wordLangProbMap[word][i] = prob;\n            }\n\t\t}\n\t}\n\n\tunicode.Block.forEach(function (unicode_block) {\n\t\tUnicodeBlocks.push({\n\t\t\tname: unicode_block,\n\t\t\tregex: require('unicode-9.0.0/Block/' + unicode_block + '/regex')\n\t\t});\n\t});\n}\n\nprepare();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}