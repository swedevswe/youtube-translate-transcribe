{"ast":null,"code":"// guard against superlative+comparative forms\nconst toRoot = function (adj) {\n  let str = adj.compute('root').text('root');\n  return str;\n};\n\n// return the nth elem of a doc\nconst api = function (View) {\n  class Adverbs extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups);\n      this.viewType = 'Adverbs';\n    }\n    conjugate(n) {\n      return this.getNth(n).map(adv => {\n        let adj = toRoot(adv);\n        return {\n          Adverb: adv.text('normal'),\n          Adjective: adj\n        };\n      }, []);\n    }\n    json() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const fromAdverb = this.methods.two.transform.adjective.fromAdverb;\n      opts.normal = true;\n      return this.map(m => {\n        let json = m.toView().json(opts)[0] || {};\n        json.adverb = {\n          adjective: fromAdverb(json.normal)\n        };\n        return json;\n      }, []);\n    }\n  }\n  View.prototype.adverbs = function (n) {\n    let m = this.match('#Adverb');\n    m = m.getNth(n);\n    return new Adverbs(m.document, m.pointer);\n  };\n};\nexport default {\n  api\n};","map":{"version":3,"names":["toRoot","adj","str","compute","text","api","View","Adverbs","constructor","document","pointer","groups","viewType","conjugate","n","getNth","map","adv","Adverb","Adjective","json","opts","arguments","length","undefined","fromAdverb","methods","two","transform","adjective","normal","m","toView","adverb","prototype","adverbs","match"],"sources":["C:/Users/swths/node_modules/compromise/src/3-three/adverbs/plugin.js"],"sourcesContent":["// guard against superlative+comparative forms\nconst toRoot = function (adj) {\n  let str = adj.compute('root').text('root')\n  return str\n}\n\n// return the nth elem of a doc\nconst api = function (View) {\n\n  class Adverbs extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Adverbs'\n    }\n    conjugate(n) {\n      return this.getNth(n).map(adv => {\n        let adj = toRoot(adv)\n        return {\n          Adverb: adv.text('normal'),\n          Adjective: adj,\n        }\n      }, [])\n    }\n    json(opts = {}) {\n      const fromAdverb = this.methods.two.transform.adjective.fromAdverb\n      opts.normal = true\n      return this.map(m => {\n        let json = m.toView().json(opts)[0] || {}\n        json.adverb = {\n          adjective: fromAdverb(json.normal)\n        }\n        return json\n      }, [])\n    }\n  }\n\n  View.prototype.adverbs = function (n) {\n    let m = this.match('#Adverb')\n    m = m.getNth(n)\n    return new Adverbs(m.document, m.pointer)\n  }\n}\nexport default { api }\n"],"mappings":"AAAA;AACA,MAAMA,MAAM,GAAG,SAAAA,CAAUC,GAAG,EAAE;EAC5B,IAAIC,GAAG,GAAGD,GAAG,CAACE,OAAO,CAAC,MAAM,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC;EAC1C,OAAOF,GAAG;AACZ,CAAC;;AAED;AACA,MAAMG,GAAG,GAAG,SAAAA,CAAUC,IAAI,EAAE;EAE1B,MAAMC,OAAO,SAASD,IAAI,CAAC;IACzBE,WAAWA,CAACC,QAAQ,EAAEC,OAAO,EAAEC,MAAM,EAAE;MACrC,KAAK,CAACF,QAAQ,EAAEC,OAAO,EAAEC,MAAM,CAAC;MAChC,IAAI,CAACC,QAAQ,GAAG,SAAS;IAC3B;IACAC,SAASA,CAACC,CAAC,EAAE;MACX,OAAO,IAAI,CAACC,MAAM,CAACD,CAAC,CAAC,CAACE,GAAG,CAACC,GAAG,IAAI;QAC/B,IAAIhB,GAAG,GAAGD,MAAM,CAACiB,GAAG,CAAC;QACrB,OAAO;UACLC,MAAM,EAAED,GAAG,CAACb,IAAI,CAAC,QAAQ,CAAC;UAC1Be,SAAS,EAAElB;QACb,CAAC;MACH,CAAC,EAAE,EAAE,CAAC;IACR;IACAmB,IAAIA,CAAA,EAAY;MAAA,IAAXC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;MACZ,MAAMG,UAAU,GAAG,IAAI,CAACC,OAAO,CAACC,GAAG,CAACC,SAAS,CAACC,SAAS,CAACJ,UAAU;MAClEJ,IAAI,CAACS,MAAM,GAAG,IAAI;MAClB,OAAO,IAAI,CAACd,GAAG,CAACe,CAAC,IAAI;QACnB,IAAIX,IAAI,GAAGW,CAAC,CAACC,MAAM,CAAC,CAAC,CAACZ,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACzCD,IAAI,CAACa,MAAM,GAAG;UACZJ,SAAS,EAAEJ,UAAU,CAACL,IAAI,CAACU,MAAM;QACnC,CAAC;QACD,OAAOV,IAAI;MACb,CAAC,EAAE,EAAE,CAAC;IACR;EACF;EAEAd,IAAI,CAAC4B,SAAS,CAACC,OAAO,GAAG,UAAUrB,CAAC,EAAE;IACpC,IAAIiB,CAAC,GAAG,IAAI,CAACK,KAAK,CAAC,SAAS,CAAC;IAC7BL,CAAC,GAAGA,CAAC,CAAChB,MAAM,CAACD,CAAC,CAAC;IACf,OAAO,IAAIP,OAAO,CAACwB,CAAC,CAACtB,QAAQ,EAAEsB,CAAC,CAACrB,OAAO,CAAC;EAC3C,CAAC;AACH,CAAC;AACD,eAAe;EAAEL;AAAI,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}