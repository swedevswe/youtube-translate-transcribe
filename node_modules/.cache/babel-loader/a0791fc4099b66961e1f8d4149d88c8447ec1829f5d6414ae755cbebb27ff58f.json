{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\swths\\\\OneDrive\\\\Documents\\\\youtube-transcriber\\\\youtube-transcriber\\\\client\\\\src\\\\components\\\\TranscriptForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';\nimport { franc } from 'franc';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TranscriptForm = () => {\n  _s();\n  const [url, setUrl] = useState('');\n  const [message, setMessage] = useState('');\n  const [transcript, setTranscript] = useState('');\n  const [isPaymentReady, setIsPaymentReady] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [isNonEnglish, setIsNonEnglish] = useState(false);\n  const [translate, setTranslate] = useState(false);\n  const handleUrlChange = e => {\n    setUrl(e.target.value);\n  };\n  const handleTranslateChange = e => {\n    setTranslate(e.target.checked);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setMessage('Processing...');\n    setLoading(true);\n    setIsNonEnglish(false);\n    try {\n      const videoId = extractVideoId(url);\n      const audioBuffer = await fetchAudioStream(videoId);\n      const generatedTranscript = await processAudioBuffer(audioBuffer);\n      const language = detectLanguage(generatedTranscript);\n      if (language !== 'en') {\n        setIsNonEnglish(true);\n        setMessage('Transcript available. This video is in a non-English language. You can get the transcript in the original language or translated to English for an extra fee.');\n      } else {\n        setMessage('Transcript available. Please make the payment to download.');\n      }\n      setTranscript(generatedTranscript);\n      setIsPaymentReady(true);\n    } catch (error) {\n      setMessage(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const extractVideoId = url => {\n    try {\n      const urlObj = new URL(url);\n      const videoId = urlObj.searchParams.get('v') || urlObj.pathname.split('/').pop();\n      if (!videoId) {\n        throw new Error('Invalid YouTube URL');\n      }\n      return videoId;\n    } catch (error) {\n      throw new Error('Invalid URL format');\n    }\n  };\n  const fetchAudioStream = async videoId => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/get-audio-stream?videoId=${videoId}`, {\n        responseType: 'arraybuffer'\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error('Error fetching audio stream');\n    }\n  };\n  const processAudioBuffer = async audioBuffer => {\n    try {\n      const formData = new FormData();\n      formData.append('audio', new Blob([audioBuffer], {\n        type: 'audio/wav'\n      }));\n      const response = await axios.post('http://localhost:5000/api/transcribe', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data.transcript;\n    } catch (error) {\n      throw new Error('Error transcribing audio');\n    }\n  };\n  const iso6393to1 = {\n    'eng': 'en',\n    'spa': 'es',\n    'fra': 'fr'\n  };\n  const detectLanguage = text => {\n    const langCode = franc(text);\n    const lang = iso6393to1[langCode] || 'unknown';\n    return lang;\n  };\n  const translateTranscript = async text => {\n    try {\n      const response = await axios.post(`http://localhost:5000/api/translate`, {\n        text\n      });\n      return response.data.translatedText;\n    } catch (error) {\n      throw new Error('Error translating transcript');\n    }\n  };\n  const handlePaymentSuccess = async () => {\n    if (isNonEnglish && translate) {\n      try {\n        const translatedTranscript = await translateTranscript(transcript);\n        setTranscript(translatedTranscript);\n      } catch (error) {\n        setMessage('Error translating transcript');\n        return;\n      }\n    }\n    setMessage('Payment successful. Download your transcript below.');\n    setIsPaymentReady(false);\n    setIsNonEnglish(false); // Hide the translate checkbox\n    // Save transcript to localStorage\n    localStorage.setItem('transcript', transcript);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"YouTube URL:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: url,\n          onChange: handleUrlChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), isNonEnglish && /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Translate to English:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: translate,\n          onChange: handleTranslateChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this), !isPaymentReady && /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? 'Processing...' : 'Get Transcript'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 25\n    }, this), isPaymentReady && /*#__PURE__*/_jsxDEV(PayPalScriptProvider, {\n      options: {\n        \"client-id\": process.env.REACT_APP_PAYPAL_CLIENT_ID\n      },\n      children: /*#__PURE__*/_jsxDEV(PayPalButtons, {\n        style: {\n          layout: 'vertical'\n        },\n        createOrder: (data, actions) => {\n          const amount = isNonEnglish ? \"7.00\" : \"5.00\";\n          return actions.order.create({\n            purchase_units: [{\n              amount: {\n                value: amount\n              }\n            }]\n          });\n        },\n        onApprove: (data, actions) => {\n          return actions.order.capture().then(handlePaymentSuccess);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }, this), message === 'Payment successful. Download your transcript below.' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`,\n        download: \"transcript.txt\",\n        children: \"Download Transcript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this);\n};\n_s(TranscriptForm, \"gxyp6IIWUpwHiXcQoxt4QftuyAQ=\");\n_c = TranscriptForm;\nexport default TranscriptForm;\nvar _c;\n$RefreshReg$(_c, \"TranscriptForm\");","map":{"version":3,"names":["React","useState","axios","PayPalButtons","PayPalScriptProvider","franc","jsxDEV","_jsxDEV","TranscriptForm","_s","url","setUrl","message","setMessage","transcript","setTranscript","isPaymentReady","setIsPaymentReady","loading","setLoading","isNonEnglish","setIsNonEnglish","translate","setTranslate","handleUrlChange","e","target","value","handleTranslateChange","checked","handleSubmit","preventDefault","videoId","extractVideoId","audioBuffer","fetchAudioStream","generatedTranscript","processAudioBuffer","language","detectLanguage","error","urlObj","URL","searchParams","get","pathname","split","pop","Error","response","responseType","data","formData","FormData","append","Blob","type","post","headers","iso6393to1","text","langCode","lang","translateTranscript","translatedText","handlePaymentSuccess","translatedTranscript","localStorage","setItem","children","onSubmit","onChange","required","fileName","_jsxFileName","lineNumber","columnNumber","disabled","options","process","env","REACT_APP_PAYPAL_CLIENT_ID","style","layout","createOrder","actions","amount","order","create","purchase_units","onApprove","capture","then","href","encodeURIComponent","download","_c","$RefreshReg$"],"sources":["C:/Users/swths/OneDrive/Documents/youtube-transcriber/youtube-transcriber/client/src/components/TranscriptForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';\r\nimport { franc } from 'franc';\r\n\r\nconst TranscriptForm = () => {\r\n    const [url, setUrl] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [transcript, setTranscript] = useState('');\r\n    const [isPaymentReady, setIsPaymentReady] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [isNonEnglish, setIsNonEnglish] = useState(false);\r\n    const [translate, setTranslate] = useState(false);\r\n\r\n    const handleUrlChange = (e) => {\r\n        setUrl(e.target.value);\r\n    };\r\n\r\n    const handleTranslateChange = (e) => {\r\n        setTranslate(e.target.checked);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setMessage('Processing...');\r\n        setLoading(true);\r\n        setIsNonEnglish(false);\r\n\r\n        try {\r\n            const videoId = extractVideoId(url);\r\n            const audioBuffer = await fetchAudioStream(videoId);\r\n            const generatedTranscript = await processAudioBuffer(audioBuffer);\r\n\r\n            const language = detectLanguage(generatedTranscript);\r\n            if (language !== 'en') {\r\n                setIsNonEnglish(true);\r\n                setMessage('Transcript available. This video is in a non-English language. You can get the transcript in the original language or translated to English for an extra fee.');\r\n            } else {\r\n                setMessage('Transcript available. Please make the payment to download.');\r\n            }\r\n\r\n            setTranscript(generatedTranscript);\r\n            setIsPaymentReady(true);\r\n        } catch (error) {\r\n            setMessage(error.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const extractVideoId = (url) => {\r\n        try {\r\n            const urlObj = new URL(url);\r\n            const videoId = urlObj.searchParams.get('v') || urlObj.pathname.split('/').pop();\r\n            if (!videoId) {\r\n                throw new Error('Invalid YouTube URL');\r\n            }\r\n            return videoId;\r\n        } catch (error) {\r\n            throw new Error('Invalid URL format');\r\n        }\r\n    };\r\n\r\n    const fetchAudioStream = async (videoId) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:5000/api/get-audio-stream?videoId=${videoId}`, { responseType: 'arraybuffer' });\r\n            return response.data;\r\n        } catch (error) {\r\n            throw new Error('Error fetching audio stream');\r\n        }\r\n    };\r\n\r\n    const processAudioBuffer = async (audioBuffer) => {\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append('audio', new Blob([audioBuffer], { type: 'audio/wav' }));\r\n    \r\n            const response = await axios.post('http://localhost:5000/api/transcribe', formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            });\r\n            return response.data.transcript;\r\n        } catch (error) {\r\n            throw new Error('Error transcribing audio');\r\n        }\r\n    };\r\n\r\n    const iso6393to1 = {\r\n        'eng': 'en',\r\n        'spa': 'es',\r\n        'fra': 'fr',\r\n    };\r\n\r\n    const detectLanguage = (text) => {\r\n        const langCode = franc(text);\r\n        const lang = iso6393to1[langCode] || 'unknown';\r\n        return lang;\r\n    };\r\n\r\n    const translateTranscript = async (text) => {\r\n        try {\r\n            const response = await axios.post(`http://localhost:5000/api/translate`, { text });\r\n            return response.data.translatedText;\r\n        } catch (error) {\r\n            throw new Error('Error translating transcript');\r\n        }\r\n    };\r\n\r\n    const handlePaymentSuccess = async () => {\r\n        if (isNonEnglish && translate) {\r\n            try {\r\n                const translatedTranscript = await translateTranscript(transcript);\r\n                setTranscript(translatedTranscript);\r\n            } catch (error) {\r\n                setMessage('Error translating transcript');\r\n                return;\r\n            }\r\n        }\r\n        setMessage('Payment successful. Download your transcript below.');\r\n        setIsPaymentReady(false);\r\n        setIsNonEnglish(false); // Hide the translate checkbox\r\n        // Save transcript to localStorage\r\n        localStorage.setItem('transcript', transcript);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    YouTube URL:\r\n                    <input type=\"text\" value={url} onChange={handleUrlChange} required />\r\n                </label>\r\n                {isNonEnglish && (\r\n                    <label>\r\n                        Translate to English:\r\n                        <input type=\"checkbox\" checked={translate} onChange={handleTranslateChange} />\r\n                    </label>\r\n                )}\r\n                {!isPaymentReady && (\r\n                    <button type=\"submit\" disabled={loading}>\r\n                        {loading ? 'Processing...' : 'Get Transcript'}\r\n                    </button>\r\n                )}\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n            {isPaymentReady && (\r\n                <PayPalScriptProvider options={{ \"client-id\": process.env.REACT_APP_PAYPAL_CLIENT_ID }}>\r\n                    <PayPalButtons\r\n                        style={{ layout: 'vertical' }}\r\n                        createOrder={(data, actions) => {\r\n                            const amount = isNonEnglish ? \"7.00\" : \"5.00\";\r\n                            return actions.order.create({\r\n                                purchase_units: [{\r\n                                    amount: {\r\n                                        value: amount\r\n                                    }\r\n                                }]\r\n                            });\r\n                        }}\r\n                        onApprove={(data, actions) => {\r\n                            return actions.order.capture().then(handlePaymentSuccess);\r\n                        }}\r\n                    />\r\n                </PayPalScriptProvider>\r\n            )}\r\n            {message === 'Payment successful. Download your transcript below.' && (\r\n                <div>\r\n                    <a\r\n                        href={`data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`}\r\n                        download=\"transcript.txt\"\r\n                    >\r\n                        Download Transcript\r\n                    </a>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TranscriptForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}