{"ast":null,"code":"import React,{useState}from'react';import axios from'axios';import{PayPalButtons,PayPalScriptProvider}from'@paypal/react-paypal-js';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TranscriptForm=()=>{const[url,setUrl]=useState('');const[message,setMessage]=useState('');const[transcript,setTranscript]=useState('');const[isPaymentReady,setIsPaymentReady]=useState(false);const[loading,setLoading]=useState(false);const[isNonEnglish,setIsNonEnglish]=useState(false);const handleUrlChange=e=>{setUrl(e.target.value);};const handleSubmit=async e=>{e.preventDefault();setMessage('Processing...');setLoading(true);setIsNonEnglish(false);try{const videoId=extractVideoId(url);const audioBuffer=await fetchAudioStream(videoId);const generatedTranscript=await processAudioBuffer(audioBuffer);const language=await detectLanguage(generatedTranscript);if(language!=='en'){setIsNonEnglish(true);setMessage('Transcript available. This video is in a non-English language. You can get the transcript in the original language or translated to English for an extra fee.');}else{setMessage('Transcript available. Please make the payment to download.');}setTranscript(generatedTranscript);setIsPaymentReady(true);}catch(error){setMessage(error.message);}finally{setLoading(false);}};const extractVideoId=url=>{try{const urlObj=new URL(url);const videoId=urlObj.searchParams.get('v')||urlObj.pathname.split('/').pop();if(!videoId){throw new Error('Invalid YouTube URL');}return videoId;}catch(error){throw new Error('Invalid URL format');}};const fetchAudioStream=async videoId=>{try{const response=await axios.get(\"http://localhost:5000/api/get-audio-stream?videoId=\".concat(videoId),{responseType:'arraybuffer'});const audioContext=new(window.AudioContext||window.webkitAudioContext)();const audioBuffer=await audioContext.decodeAudioData(response.data);return audioBuffer;}catch(error){throw new Error('Error fetching audio stream');}};const processAudioBuffer=async audioBuffer=>{try{const audioBlob=new Blob([audioBuffer],{type:'audio/webm'});const formData=new FormData();formData.append('audio',audioBlob);const response=await axios.post(\"http://localhost:5000/api/process-audio\",formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data.transcript;}catch(error){throw new Error('Error processing audio buffer');}};const detectLanguage=async text=>{try{const response=await axios.post(\"http://localhost:5000/api/detect-language\",{text});return response.data.language;}catch(error){throw new Error('Error detecting language');}};const translateTranscript=async text=>{try{const response=await axios.post(\"http://localhost:5000/api/translate\",{text});return response.data.translatedText;}catch(error){throw new Error('Error translating transcript');}};const handlePaymentSuccess=async()=>{if(isNonEnglish){try{const translatedTranscript=await translateTranscript(transcript);setTranscript(translatedTranscript);}catch(error){setMessage('Error translating transcript');return;}}setMessage('Payment successful. Download your transcript below.');setIsPaymentReady(false);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"YouTube Transcriber\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"YouTube URL:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:url,onChange:handleUrlChange,required:true})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:loading,children:loading?'Processing...':'Get Transcript'})]}),message&&/*#__PURE__*/_jsx(\"p\",{children:message}),isPaymentReady&&/*#__PURE__*/_jsx(PayPalScriptProvider,{options:{\"client-id\":process.env.REACT_APP_PAYPAL_CLIENT_ID},children:/*#__PURE__*/_jsx(PayPalButtons,{style:{layout:'vertical'},createOrder:(data,actions)=>{const amount=isNonEnglish?\"7.00\":\"5.00\";return actions.order.create({purchase_units:[{amount:{value:amount}}]});},onApprove:(data,actions)=>{return actions.order.capture().then(handlePaymentSuccess);}})}),message==='Payment successful. Download your transcript below.'&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:transcript}),/*#__PURE__*/_jsx(\"a\",{href:\"data:text/plain;charset=utf-8,\".concat(encodeURIComponent(transcript)),download:\"transcript.txt\",children:\"Download Transcript\"})]})]});};export default TranscriptForm;","map":{"version":3,"names":["React","useState","axios","PayPalButtons","PayPalScriptProvider","jsx","_jsx","jsxs","_jsxs","TranscriptForm","url","setUrl","message","setMessage","transcript","setTranscript","isPaymentReady","setIsPaymentReady","loading","setLoading","isNonEnglish","setIsNonEnglish","handleUrlChange","e","target","value","handleSubmit","preventDefault","videoId","extractVideoId","audioBuffer","fetchAudioStream","generatedTranscript","processAudioBuffer","language","detectLanguage","error","urlObj","URL","searchParams","get","pathname","split","pop","Error","response","concat","responseType","audioContext","window","AudioContext","webkitAudioContext","decodeAudioData","data","audioBlob","Blob","type","formData","FormData","append","post","headers","text","translateTranscript","translatedText","handlePaymentSuccess","translatedTranscript","children","onSubmit","onChange","required","disabled","options","process","env","REACT_APP_PAYPAL_CLIENT_ID","style","layout","createOrder","actions","amount","order","create","purchase_units","onApprove","capture","then","href","encodeURIComponent","download"],"sources":["C:/Users/swths/OneDrive/Documents/youtube-transcriber/youtube-transcriber/client/src/components/TranscriptForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';\r\n\r\nconst TranscriptForm = () => {\r\n    const [url, setUrl] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [transcript, setTranscript] = useState('');\r\n    const [isPaymentReady, setIsPaymentReady] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [isNonEnglish, setIsNonEnglish] = useState(false);\r\n\r\n    const handleUrlChange = (e) => {\r\n        setUrl(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setMessage('Processing...');\r\n        setLoading(true);\r\n        setIsNonEnglish(false);\r\n\r\n        try {\r\n            const videoId = extractVideoId(url);\r\n            const audioBuffer = await fetchAudioStream(videoId);\r\n            const generatedTranscript = await processAudioBuffer(audioBuffer);\r\n            \r\n            const language = await detectLanguage(generatedTranscript);\r\n\r\n            if (language !== 'en') {\r\n                setIsNonEnglish(true);\r\n                setMessage('Transcript available. This video is in a non-English language. You can get the transcript in the original language or translated to English for an extra fee.');\r\n            } else {\r\n                setMessage('Transcript available. Please make the payment to download.');\r\n            }\r\n            \r\n            setTranscript(generatedTranscript);\r\n            setIsPaymentReady(true);\r\n        } catch (error) {\r\n            setMessage(error.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const extractVideoId = (url) => {\r\n        try {\r\n            const urlObj = new URL(url);\r\n            const videoId = urlObj.searchParams.get('v') || urlObj.pathname.split('/').pop();\r\n            if (!videoId) {\r\n                throw new Error('Invalid YouTube URL');\r\n            }\r\n            return videoId;\r\n        } catch (error) {\r\n            throw new Error('Invalid URL format');\r\n        }\r\n    };\r\n\r\n    const fetchAudioStream = async (videoId) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:5000/api/get-audio-stream?videoId=${videoId}`, { responseType: 'arraybuffer' });\r\n            const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n            const audioBuffer = await audioContext.decodeAudioData(response.data);\r\n            return audioBuffer;\r\n        } catch (error) {\r\n            throw new Error('Error fetching audio stream');\r\n        }\r\n    };\r\n\r\n    const processAudioBuffer = async (audioBuffer) => {\r\n        try {\r\n            const audioBlob = new Blob([audioBuffer], { type: 'audio/webm' });\r\n            const formData = new FormData();\r\n            formData.append('audio', audioBlob);\r\n    \r\n            const response = await axios.post(`http://localhost:5000/api/process-audio`, formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            });\r\n    \r\n            return response.data.transcript;\r\n        } catch (error) {\r\n            throw new Error('Error processing audio buffer');\r\n        }\r\n    };\r\n\r\n    const detectLanguage = async (text) => {\r\n        try {\r\n            const response = await axios.post(`http://localhost:5000/api/detect-language`, { text });\r\n            return response.data.language;\r\n        } catch (error) {\r\n            throw new Error('Error detecting language');\r\n        }\r\n    };\r\n\r\n    const translateTranscript = async (text) => {\r\n        try {\r\n            const response = await axios.post(`http://localhost:5000/api/translate`, { text });\r\n            return response.data.translatedText;\r\n        } catch (error) {\r\n            throw new Error('Error translating transcript');\r\n        }\r\n    };\r\n\r\n    const handlePaymentSuccess = async () => {\r\n        if (isNonEnglish) {\r\n            try {\r\n                const translatedTranscript = await translateTranscript(transcript);\r\n                setTranscript(translatedTranscript);\r\n            } catch (error) {\r\n                setMessage('Error translating transcript');\r\n                return;\r\n            }\r\n        }\r\n        setMessage('Payment successful. Download your transcript below.');\r\n        setIsPaymentReady(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>YouTube Transcriber</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    YouTube URL:\r\n                    <input type=\"text\" value={url} onChange={handleUrlChange} required />\r\n                </label>\r\n                <button type=\"submit\" disabled={loading}>\r\n                    {loading ? 'Processing...' : 'Get Transcript'}\r\n                </button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n            {isPaymentReady && (\r\n                <PayPalScriptProvider options={{ \"client-id\": process.env.REACT_APP_PAYPAL_CLIENT_ID }}>\r\n                    <PayPalButtons\r\n                        style={{ layout: 'vertical' }}\r\n                        createOrder={(data, actions) => {\r\n                            const amount = isNonEnglish ? \"7.00\" : \"5.00\";\r\n                            return actions.order.create({\r\n                                purchase_units: [{\r\n                                    amount: {\r\n                                        value: amount\r\n                                    }\r\n                                }]\r\n                            });\r\n                        }}\r\n                        onApprove={(data, actions) => {\r\n                            return actions.order.capture().then(handlePaymentSuccess);\r\n                        }}\r\n                    />\r\n                </PayPalScriptProvider>\r\n            )}\r\n            {message === 'Payment successful. Download your transcript below.' && (\r\n                <div>\r\n                    <p>{transcript}</p>\r\n                    <a\r\n                        href={`data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`}\r\n                        download=\"transcript.txt\"\r\n                    >\r\n                        Download Transcript\r\n                    </a>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TranscriptForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}