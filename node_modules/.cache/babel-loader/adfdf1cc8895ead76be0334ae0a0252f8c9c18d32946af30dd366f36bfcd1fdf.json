{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\swths\\\\OneDrive\\\\Documents\\\\youtube-transcriber\\\\youtube-transcriber\\\\client\\\\src\\\\components\\\\TranscriptForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';\nimport { franc } from 'franc';\nimport './TranscriptForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TranscriptForm = () => {\n  _s();\n  const [url, setUrl] = useState('');\n  const [message, setMessage] = useState('');\n  const [transcript, setTranscript] = useState('');\n  const [isPaymentReady, setIsPaymentReady] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [isNonEnglish, setIsNonEnglish] = useState(false);\n  const [translate, setTranslate] = useState(false);\n  const [translationError, setTranslationError] = useState(false);\n  const [paymentError, setPaymentError] = useState(false);\n  const [showGetTranscriptButton, setShowGetTranscriptButton] = useState(true);\n  const [transcriptionStarted, setTranscriptionStarted] = useState(false);\n  const handleUrlChange = e => {\n    setUrl(e.target.value);\n  };\n  const handleTranslateChange = async e => {\n    const isChecked = e.target.checked;\n    setTranslate(isChecked);\n    if (isChecked && isNonEnglish && transcript) {\n      try {\n        setMessage( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-container\",\n          children: \"Translating transcript...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 28\n        }, this));\n        const translatedTranscript = await translateTranscript(transcript);\n        setTranscript(translatedTranscript);\n        setMessage( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-container\",\n          children: \"Translation complete. Please make the payment to download.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 28\n        }, this));\n      } catch (error) {\n        setMessage( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-container\",\n          children: \"Error translating transcript. You were not charged.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 28\n        }, this));\n      }\n    } else if (!isChecked && isNonEnglish) {\n      setMessage( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Transcript available. This video is in a non-English language.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You can get the transcript in the original language\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"or translated to English for an extra fee.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this));\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (transcriptionStarted) return;\n    setLoading(true);\n    setIsNonEnglish(false);\n    setTranslationError(false);\n    setPaymentError(false);\n    setTranscriptionStarted(true);\n    try {\n      const videoId = extractVideoId(url);\n      const audioBuffer = await fetchAudioStream(videoId);\n      const generatedTranscript = await processAudioBuffer(audioBuffer, translate);\n      const language = detectLanguage(generatedTranscript);\n      if (language !== 'en') {\n        setIsNonEnglish(true);\n        setMessage( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Transcript available. This video is in a non-English language.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"You can get the transcript in the original language\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"or translated to English for an extra fee.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this));\n      } else {\n        setMessage( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-container\",\n          children: \"Transcript available. Please make the payment to download.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this));\n      }\n      setTranscript(generatedTranscript);\n      setIsPaymentReady(true);\n    } catch (error) {\n      setMessage( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-container\",\n        children: error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 24\n      }, this));\n    } finally {\n      setLoading(false);\n      setShowGetTranscriptButton(false);\n    }\n  };\n  const extractVideoId = url => {\n    try {\n      const urlObj = new URL(url);\n      const videoId = urlObj.searchParams.get('v') || urlObj.pathname.split('/').pop();\n      if (!videoId) {\n        throw new Error('Invalid YouTube URL');\n      }\n      return videoId;\n    } catch (error) {\n      throw new Error('Invalid URL format');\n    }\n  };\n  const fetchAudioStream = async videoId => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/get-audio-stream?videoId=${videoId}`, {\n        responseType: 'arraybuffer'\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error('Error fetching audio stream');\n    }\n  };\n  const processAudioBuffer = async (audioBuffer, translate) => {\n    const formData = new FormData();\n    formData.append('audio', new Blob([audioBuffer], {\n      type: 'audio/wav'\n    }));\n    formData.append('translate', translate ? 'true' : 'false');\n    console.log('Sending form data with translate flag:', translate);\n    const response = await axios.post('http://localhost:5000/transcribe', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.transcript;\n  };\n  const detectLanguage = text => {\n    const langCode = franc(text);\n    const lang = iso6393to1[langCode] || 'unknown';\n    return lang;\n  };\n  const iso6393to1 = {\n    'eng': 'en',\n    'spa': 'es',\n    'fra': 'fr',\n    'hi': 'hi',\n    'ur': 'ur'\n  };\n  const handlePaymentSuccess = async () => {\n    console.log('Translate flag at payment success:', translate);\n    if (isNonEnglish && translate) {\n      try {\n        const translatedTranscript = await translateTranscript(transcript);\n        setTranscript(translatedTranscript);\n        setMessage('Payment successful. Download your transcript below.');\n        setIsPaymentReady(false);\n        localStorage.setItem('transcript', translatedTranscript);\n      } catch (error) {\n        setMessage('Error translating transcript. You were not charged.');\n      }\n    } else {\n      setMessage('Payment successful. Download your transcript below.');\n      setIsPaymentReady(false);\n      localStorage.setItem('transcript', transcript);\n    }\n  };\n  const translateTranscript = async text => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/translate', {\n        text,\n        translate: 'true'\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data.translatedText;\n    } catch (error) {\n      throw new Error('Error translating transcript');\n    }\n  };\n  const handlePaymentError = () => {\n    setMessage('An error occurred during payment. You were not charged.');\n  };\n  const handleGoBack = () => {\n    setUrl('');\n    setMessage('');\n    setTranscript('');\n    setIsPaymentReady(false);\n    setLoading(false);\n    setIsNonEnglish(false);\n    setTranslate(false);\n    setShowGetTranscriptButton(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Please enter the YouTube URL:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: url,\n          onChange: handleUrlChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 21\n      }, this), showGetTranscriptButton && /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? 'Processing... Please wait..' : 'Get Transcript'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 25\n      }, this), isNonEnglish && /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Translate to English:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: translate,\n          onChange: handleTranslateChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 17\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 29\n    }, this), isPaymentReady && /*#__PURE__*/_jsxDEV(PayPalScriptProvider, {\n      options: {\n        \"client-id\": process.env.REACT_APP_PAYPAL_CLIENT_ID\n      },\n      children: /*#__PURE__*/_jsxDEV(PayPalButtons, {\n        style: {\n          layout: 'vertical'\n        },\n        createOrder: (data, actions) => {\n          const amount = isNonEnglish ? \"6.00\" : \"4.00\";\n          return actions.order.create({\n            purchase_units: [{\n              amount: {\n                value: amount\n              }\n            }]\n          });\n        },\n        onApprove: (data, actions) => {\n          return actions.order.capture().then(handlePaymentSuccess).catch(handlePaymentError);\n        },\n        onError: handlePaymentError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 21\n    }, this), (paymentError || translationError) && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGoBack,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 21\n    }, this), message === 'Payment successful. Download your transcript below.' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"download-button\",\n        href: `data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`,\n        download: \"transcript.txt\",\n        children: \"Download Transcript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"go-back-button\",\n        onClick: handleGoBack,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 9\n  }, this);\n};\n_s(TranscriptForm, \"EHgUeW4TwNieUk9hYVdaI16j6rQ=\");\n_c = TranscriptForm;\nexport default TranscriptForm;\nvar _c;\n$RefreshReg$(_c, \"TranscriptForm\");","map":{"version":3,"names":["React","useState","axios","PayPalButtons","PayPalScriptProvider","franc","jsxDEV","_jsxDEV","TranscriptForm","_s","url","setUrl","message","setMessage","transcript","setTranscript","isPaymentReady","setIsPaymentReady","loading","setLoading","isNonEnglish","setIsNonEnglish","translate","setTranslate","translationError","setTranslationError","paymentError","setPaymentError","showGetTranscriptButton","setShowGetTranscriptButton","transcriptionStarted","setTranscriptionStarted","handleUrlChange","e","target","value","handleTranslateChange","isChecked","checked","className","children","fileName","_jsxFileName","lineNumber","columnNumber","translatedTranscript","translateTranscript","error","handleSubmit","preventDefault","videoId","extractVideoId","audioBuffer","fetchAudioStream","generatedTranscript","processAudioBuffer","language","detectLanguage","urlObj","URL","searchParams","get","pathname","split","pop","Error","response","responseType","data","formData","FormData","append","Blob","type","console","log","post","headers","text","langCode","lang","iso6393to1","handlePaymentSuccess","localStorage","setItem","translatedText","handlePaymentError","handleGoBack","onSubmit","onChange","required","disabled","options","process","env","REACT_APP_PAYPAL_CLIENT_ID","style","layout","createOrder","actions","amount","order","create","purchase_units","onApprove","capture","then","catch","onError","onClick","href","encodeURIComponent","download","_c","$RefreshReg$"],"sources":["C:/Users/swths/OneDrive/Documents/youtube-transcriber/youtube-transcriber/client/src/components/TranscriptForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';\r\nimport { franc } from 'franc';\r\nimport './TranscriptForm.css';\r\n\r\nconst TranscriptForm = () => {\r\n    const [url, setUrl] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [transcript, setTranscript] = useState('');\r\n    const [isPaymentReady, setIsPaymentReady] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [isNonEnglish, setIsNonEnglish] = useState(false);\r\n    const [translate, setTranslate] = useState(false);\r\n    const [translationError, setTranslationError] = useState(false);\r\n    const [paymentError, setPaymentError] = useState(false);\r\n    const [showGetTranscriptButton, setShowGetTranscriptButton] = useState(true);\r\n    const [transcriptionStarted, setTranscriptionStarted] = useState(false);\r\n\r\n    const handleUrlChange = (e) => {\r\n        setUrl(e.target.value);\r\n    };\r\n\r\n    const handleTranslateChange = async (e) => {\r\n        const isChecked = e.target.checked;\r\n        setTranslate(isChecked);\r\n\r\n        if (isChecked && isNonEnglish && transcript) {\r\n            try {\r\n                setMessage(<div className=\"message-container\">Translating transcript...</div>);\r\n                const translatedTranscript = await translateTranscript(transcript);\r\n                setTranscript(translatedTranscript);\r\n                setMessage(<div className=\"message-container\">Translation complete. Please make the payment to download.</div>);\r\n            } catch (error) {\r\n                setMessage(<div className=\"message-container\">Error translating transcript. You were not charged.</div>);\r\n            }\r\n        } else if (!isChecked && isNonEnglish) {\r\n            setMessage(\r\n                <div className=\"message-container\">\r\n                    <p>Transcript available. This video is in a non-English language.</p>\r\n                    <p>You can get the transcript in the original language</p>\r\n                    <p>or translated to English for an extra fee.</p>\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (transcriptionStarted) return;\r\n        setLoading(true);\r\n        setIsNonEnglish(false);\r\n        setTranslationError(false);\r\n        setPaymentError(false);\r\n        setTranscriptionStarted(true);\r\n\r\n        try {\r\n            const videoId = extractVideoId(url);\r\n            const audioBuffer = await fetchAudioStream(videoId);\r\n            const generatedTranscript = await processAudioBuffer(audioBuffer, translate);\r\n\r\n            const language = detectLanguage(generatedTranscript);\r\n            if (language !== 'en') {\r\n                setIsNonEnglish(true);\r\n                setMessage(\r\n                    <div className=\"message-container\">\r\n                        <p>Transcript available. This video is in a non-English language.</p>\r\n                        <p>You can get the transcript in the original language</p>\r\n                        <p>or translated to English for an extra fee.</p>\r\n                    </div>\r\n                );\r\n            } else {\r\n                setMessage(\r\n                <div className=\"message-container\">Transcript available. Please make the payment to download.</div>);\r\n            }\r\n\r\n            setTranscript(generatedTranscript);\r\n            setIsPaymentReady(true);\r\n        } catch (error) {\r\n            setMessage(<div className=\"message-container\">{error.message}</div>);\r\n        } finally {\r\n            setLoading(false);\r\n            setShowGetTranscriptButton(false);\r\n        }\r\n    };\r\n\r\n    const extractVideoId = (url) => {\r\n        try {\r\n            const urlObj = new URL(url);\r\n            const videoId = urlObj.searchParams.get('v') || urlObj.pathname.split('/').pop();\r\n            if (!videoId) {\r\n                throw new Error('Invalid YouTube URL');\r\n            }\r\n            return videoId;\r\n        } catch (error) {\r\n            throw new Error('Invalid URL format');\r\n        }\r\n    };\r\n\r\n    const fetchAudioStream = async (videoId) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:5000/api/get-audio-stream?videoId=${videoId}`, { responseType: 'arraybuffer' });\r\n            return response.data;\r\n        } catch (error) {\r\n            throw new Error('Error fetching audio stream');\r\n        }\r\n    };\r\n\r\n    const processAudioBuffer = async (audioBuffer, translate) => {\r\n        const formData = new FormData();\r\n        formData.append('audio', new Blob([audioBuffer], { type: 'audio/wav' }));\r\n        formData.append('translate', translate ? 'true' : 'false');\r\n\r\n        console.log('Sending form data with translate flag:', translate);\r\n\r\n        const response = await axios.post('http://localhost:5000/transcribe', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n        });\r\n\r\n        return response.data.transcript;\r\n    };\r\n\r\n    const detectLanguage = (text) => {\r\n        const langCode = franc(text);\r\n        const lang = iso6393to1[langCode] || 'unknown';\r\n        return lang;\r\n    };\r\n\r\n    const iso6393to1 = {\r\n        'eng': 'en',\r\n        'spa': 'es',\r\n        'fra': 'fr',\r\n        'hi' : 'hi',\r\n        'ur' : 'ur'\r\n    };\r\n\r\n    const handlePaymentSuccess = async () => {\r\n        console.log('Translate flag at payment success:', translate);\r\n        if (isNonEnglish && translate) {\r\n            try {\r\n                const translatedTranscript = await translateTranscript(transcript);\r\n                setTranscript(translatedTranscript);\r\n                setMessage('Payment successful. Download your transcript below.');\r\n                setIsPaymentReady(false);\r\n                localStorage.setItem('transcript', translatedTranscript);\r\n            } catch (error) {\r\n                setMessage('Error translating transcript. You were not charged.');\r\n            }\r\n        } else {\r\n            setMessage('Payment successful. Download your transcript below.');\r\n            setIsPaymentReady(false);\r\n            localStorage.setItem('transcript', transcript);\r\n        }\r\n    };\r\n\r\n    const translateTranscript = async (text) => {\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/api/translate', { text, translate: 'true' }, {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            return response.data.translatedText;\r\n        } catch (error) {\r\n            throw new Error('Error translating transcript');\r\n        }\r\n    };\r\n\r\n    const handlePaymentError = () => {\r\n        setMessage('An error occurred during payment. You were not charged.');\r\n    };\r\n\r\n    const handleGoBack = () => {\r\n        setUrl('');\r\n        setMessage('');\r\n        setTranscript('');\r\n        setIsPaymentReady(false);\r\n        setLoading(false);\r\n        setIsNonEnglish(false);\r\n        setTranslate(false);\r\n        setShowGetTranscriptButton(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n                <form onSubmit={handleSubmit}>\r\n                    <label>\r\n                        Please enter the YouTube URL:\r\n                        <input type=\"text\" value={url} onChange={handleUrlChange} required />\r\n                    </label>\r\n                    {showGetTranscriptButton && (\r\n                        <button type=\"submit\" disabled={loading}>\r\n                            {loading ? 'Processing... Please wait..' : 'Get Transcript'}\r\n                        </button>\r\n                    )}\r\n                    {isNonEnglish && (\r\n                        <label>\r\n                            Translate to English:\r\n                            <input type=\"checkbox\" checked={translate} onChange={handleTranslateChange} />\r\n                        </label>\r\n                    )}\r\n                </form>\r\n                {message && <p>{message}</p>}\r\n                {isPaymentReady && (\r\n                    <PayPalScriptProvider options={{ \"client-id\": process.env.REACT_APP_PAYPAL_CLIENT_ID }}>\r\n                        <PayPalButtons\r\n                            style={{ layout: 'vertical' }}\r\n                            createOrder={(data, actions) => {\r\n                                const amount = isNonEnglish ? \"6.00\" : \"4.00\";\r\n                                return actions.order.create({\r\n                                    purchase_units: [{\r\n                                        amount: {\r\n                                            value: amount\r\n                                        }\r\n                                    }]\r\n                                });\r\n                            }}\r\n                            onApprove={(data, actions) => {\r\n                                return actions.order.capture().then(handlePaymentSuccess).catch(handlePaymentError);\r\n                            }}\r\n                            onError={handlePaymentError}\r\n                        />\r\n                    </PayPalScriptProvider>\r\n                )}\r\n                {(paymentError || translationError) && (\r\n                    <div>\r\n                        <p>{message}</p>\r\n                        <button onClick={handleGoBack}>Go Back</button>\r\n                    </div>\r\n                )}\r\n                {message === 'Payment successful. Download your transcript below.' && (\r\n                    <div>\r\n                        <a \r\n                            className=\"download-button\"\r\n                            href={`data:text/plain;charset=utf-8,${encodeURIComponent(transcript)}`}\r\n                            download=\"transcript.txt\"\r\n                        >\r\n                            Download Transcript\r\n                        </a>\r\n                        <button className=\"go-back-button\" onClick={handleGoBack}>Go Back</button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default TranscriptForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}